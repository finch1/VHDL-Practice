
testing.elf:     file format elf32-littlenios2
testing.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x020001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04008020 paddr 0x02000020 align 2**12
         filesz 0x00000198 memsz 0x00000198 flags r-x
    LOAD off    0x000011b8 vaddr 0x020001b8 paddr 0x020001b8 align 2**12
         filesz 0x000053b8 memsz 0x000053b8 flags r-x
    LOAD off    0x00006570 vaddr 0x02005570 paddr 0x02006fb8 align 2**12
         filesz 0x00001a48 memsz 0x00001a48 flags rw-
    LOAD off    0x00008a00 vaddr 0x02008a00 paddr 0x02008a00 align 2**12
         filesz 0x00000000 memsz 0x000002e4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  04008020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005370  020001b8  020001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  02005528  02005528  00006528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  02005570  02006fb8  00006570  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e4  02008a00  02008a00  00008a00  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00007fb8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000930  00000000  00000000  00007fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00017596  00000000  00000000  00008910  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005a15  00000000  00000000  0001fea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006b5e  00000000  00000000  000258bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000fd0  00000000  00000000  0002c41c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002107  00000000  00000000  0002d3ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000562f  00000000  00000000  0002f4f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00034b24  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  00034b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000372c2  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  000372c5  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000372c8  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000372c9  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000009  00000000  00000000  000372ca  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000009  00000000  00000000  000372d3  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000009  00000000  00000000  000372dc  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000004  00000000  00000000  000372e5  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000015  00000000  00000000  000372e9  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     00046869  00000000  00000000  000372fe  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
04008020 l    d  .exceptions	00000000 .exceptions
020001b8 l    d  .text	00000000 .text
02005528 l    d  .rodata	00000000 .rodata
02005570 l    d  .rwdata	00000000 .rwdata
02008a00 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../testing_bsp//obj/HAL/src/crt0.o
020001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
04008094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 fileIO.c
00000000 l    df *ABS*	00000000 hello_world.c
020001f4 l     F .text	00000068 handle_button_interrupts
0200025c l     F .text	00000060 init_button_pio
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
02005570 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02001e74 l     F .text	00000008 __fp_lock
02001e7c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
02002e7c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
02002f98 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
02002fc4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0200338c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
02003480 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0200356c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
02003748 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
02006fac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
020039bc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
02003afc l     F .text	00000038 alt_dev_reg
02005f20 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
02003dd0 l     F .text	00000204 altera_avalon_jtag_uart_irq
02003fd4 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0200476c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02004930 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
02004a88 l     F .text	00000050 alt_get_errno
02004ad8 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
02002d18 g     F .text	00000064 _isatty_r
02003690 g     F .text	00000078 alt_main
02000338 g     F .text	00000084 _puts_r
02008a54 g     O .bss	00000100 alt_irq
02002d7c g     F .text	0000006c _lseek_r
02006fb8 g       *ABS*	00000000 __flash_rwdata_start
02008ce4 g       *ABS*	00000000 __alt_heap_start
02002a2c g     F .text	0000005c __sseek
02001f18 g     F .text	0000010c __sinit
02001e90 g     F .text	00000078 __sfmoreglue
02003728 g     F .text	00000020 __malloc_unlock
020012fc g     F .text	0000018c memmove
02001f08 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
02000000 g     F .entry	0000000c __reset
02008a00 g     O .bss	00000004 edge_capture
02000020 g       *ABS*	00000000 __flash_exceptions_start
02002cb0 g     F .text	00000068 _fstat_r
02008a10 g     O .bss	00000004 errno
02008a1c g     O .bss	00000004 alt_argv
0200ef80 g       *ABS*	00000000 _gp
02005da0 g     O .rwdata	00000180 alt_fd_list
02004edc g     F .text	00000090 alt_find_dev
020011bc g     F .text	00000140 memcpy
02001e84 g     F .text	0000000c _cleanup_r
02004a10 g     F .text	00000078 alt_io_redirect
02005528 g       *ABS*	00000000 __DTOR_END__
020003bc g     F .text	00000014 puts
020041d4 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
020033dc g     F .text	000000a4 isatty
02008a0c g     O .bss	00000004 __malloc_top_pad
0200045c g     F .text	000004e4 __sfvwrite_r
02001a84 g     F .text	00000064 _sbrk_r
02002de8 g     F .text	0000006c _read_r
02006fa0 g     O .rwdata	00000004 alt_max_fd
02002b60 g     F .text	0000013c _fclose_r
02001e44 g     F .text	00000030 fflush
02008a08 g     O .bss	00000004 __malloc_max_sbrked_mem
02000000 g       *ABS*	00000000 __alt_mem_ddr_sdram
020035bc g     F .text	000000d4 lseek
02006f80 g     O .rwdata	00000004 _global_impure_ptr
02001488 g     F .text	000005fc _realloc_r
02008ce4 g       *ABS*	00000000 __bss_end
0200329c g     F .text	000000f0 alt_iic_isr_register
02004db8 g     F .text	00000104 alt_tick
02002130 g     F .text	00000018 __fp_lock_all
02003250 g     F .text	0000004c alt_ic_irq_enabled
02004d20 g     F .text	00000098 alt_alarm_stop
02008a14 g     O .bss	00000004 alt_irq_active
040080ec g     F .exceptions	000000cc alt_irq_handler
02005d78 g     O .rwdata	00000028 alt_dev_null
02004750 g     F .text	0000001c alt_dcache_flush_all
02006fb8 g       *ABS*	00000000 __ram_rwdata_end
02006f98 g     O .rwdata	00000008 alt_dev_list
02003a0c g     F .text	000000f0 write
02005570 g       *ABS*	00000000 __ram_rodata_end
02003014 g     F .text	000000b0 fstat
02008ce4 g       *ABS*	00000000 end
02003d10 g     F .text	000000c0 altera_avalon_jtag_uart_init
02005528 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
020043ec g     F .text	00000224 altera_avalon_jtag_uart_write
02002120 g     F .text	00000004 __sfp_lock_acquire
020010c4 g     F .text	000000f8 memchr
0200229c g     F .text	000002d0 _free_r
0200534c g     F .text	000001a0 __call_exitprocs
02006f88 g     O .rwdata	00000004 __malloc_sbrk_base
020001b8 g     F .text	0000003c _start
02008a24 g     O .bss	00000004 _alt_tick_rate
02008a28 g     O .bss	00000004 _alt_nticks
02003798 g     F .text	000000f4 read
02003b68 g     F .text	00000044 alt_sys_init
0200521c g     F .text	00000130 __register_exitproc
02004078 g     F .text	00000068 altera_avalon_jtag_uart_close
02002e54 g     F .text	00000028 __mulsi3
02005570 g       *ABS*	00000000 __ram_rwdata_start
02005528 g       *ABS*	00000000 __ram_rodata_start
02008a2c g     O .bss	00000028 __malloc_current_mallinfo
02003bac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
02005080 g     F .text	000000d4 alt_get_fd
02002afc g     F .text	00000064 _close_r
020051a0 g     F .text	0000007c memcmp
02003c6c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
02008ce4 g       *ABS*	00000000 __alt_stack_base
02003cbc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02001ae8 g     F .text	00000174 __swsetup_r
02002024 g     F .text	000000fc __sfp
02005970 g     O .rwdata	00000408 __malloc_av_
0200212c g     F .text	00000004 __sinit_lock_release
02002950 g     F .text	00000054 __sread
02004f6c g     F .text	00000114 alt_find_file
020047bc g     F .text	000000a0 alt_dev_llist_insert
02003708 g     F .text	00000020 __malloc_lock
0200390c g     F .text	000000b0 sbrk
02001c5c g     F .text	000001e8 _fflush_r
02008a00 g       *ABS*	00000000 __bss_start
02002874 g     F .text	000000dc memset
020002bc g     F .text	0000007c main
02008a20 g     O .bss	00000004 alt_envp
02008a04 g     O .bss	00000004 __malloc_max_total_mem
02003c0c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
02002a88 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
02002c9c g     F .text	00000014 fclose
02008b54 g     O .bss	00000190 _atexit0
02000940 g     F .text	00000784 _malloc_r
02006fa4 g     O .rwdata	00000004 alt_errno
0200256c g     F .text	000000a8 _fwalk
02002160 g     F .text	0000013c _malloc_trim_r
02005528 g       *ABS*	00000000 __CTOR_END__
02005528 g       *ABS*	00000000 __flash_rodata_start
02005528 g       *ABS*	00000000 __DTOR_LIST__
02003b34 g     F .text	00000034 alt_irq_init
0200388c g     F .text	00000080 alt_release_fd
02005154 g     F .text	00000014 atexit
02002a90 g     F .text	0000006c _write_r
02006f84 g     O .rwdata	00000004 _impure_ptr
02008a18 g     O .bss	00000004 alt_argc
020048b8 g     F .text	0000005c _do_dtors
04008020 g       .exceptions	00000000 alt_irq_entry
02002148 g     F .text	00000018 __fp_unlock_all
02006f90 g     O .rwdata	00000008 alt_fs_list
04008020 g       *ABS*	00000000 __ram_exceptions_start
020030c4 g     F .text	00000050 alt_ic_isr_register
02006fb8 g       *ABS*	00000000 _edata
02008ce4 g       *ABS*	00000000 _end
040081b8 g       *ABS*	00000000 __ram_exceptions_end
020040e0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
020031b0 g     F .text	000000a0 alt_ic_irq_disable
020029a4 g     F .text	00000088 __swrite
02006f8c g     O .rwdata	00000004 __malloc_trim_threshold
02004ebc g     F .text	00000020 altera_nios2_qsys_irq_init
02005168 g     F .text	00000038 exit
02002614 g     F .text	000000b8 _fwalk_reent
04000000 g       *ABS*	00000000 __alt_data_end
04008020 g     F .exceptions	00000000 alt_exception
02002124 g     F .text	00000004 __sfp_lock_release
04008000 g       *ABS*	00000000 __alt_mem_onchip_ram
020054ec g     F .text	0000003c _exit
02004610 g     F .text	00000140 alt_alarm_start
020026cc g     F .text	000001a8 __smakebuf_r
020003d0 g     F .text	0000008c strlen
02004bc8 g     F .text	00000158 open
02004914 g     F .text	0000001c alt_icache_flush_all
02006fa8 g     O .rwdata	00000004 alt_priority_mask
02003114 g     F .text	0000009c alt_ic_irq_enable
02006fb0 g     O .rwdata	00000008 alt_alarm_list
0200485c g     F .text	0000005c _do_ctors
02002ecc g     F .text	000000cc close
020034ec g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
02002128 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

02000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000004:	08406e14 	ori	at,at,440
    jmp r1
 2000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4008020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4008024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4008028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4008030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4008034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4008038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4008040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4008044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4008048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4008050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4008054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4008058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4008060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4008064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4008068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4008070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4008074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4008078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400807c:	10000326 	beq	r2,zero,400808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4008080:	20000226 	beq	r4,zero,400808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4008084:	40080ec0 	call	40080ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4008088:	00000306 	br	4008098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4008090:	e8bfff17 	ldw	r2,-4(ea)

04008094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4008094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4008098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40080a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40080a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40080a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40080ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40080b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40080b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40080b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40080bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40080c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40080c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40080c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40080cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40080d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40080d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40080d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40080dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40080e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40080e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40080e8:	ef80083a 	eret

040080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40080ec:	defff904 	addi	sp,sp,-28
 40080f0:	dfc00615 	stw	ra,24(sp)
 40080f4:	df000515 	stw	fp,20(sp)
 40080f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 40080fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4008100:	0005313a 	rdctl	r2,ipending
 4008104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4008108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400810c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4008110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4008114:	00800044 	movi	r2,1
 4008118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400811c:	e0fffb17 	ldw	r3,-20(fp)
 4008120:	e0bffc17 	ldw	r2,-16(fp)
 4008124:	1884703a 	and	r2,r3,r2
 4008128:	10001726 	beq	r2,zero,4008188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400812c:	00c08074 	movhi	r3,513
 4008130:	18e29504 	addi	r3,r3,-30124
 4008134:	e0bffd17 	ldw	r2,-12(fp)
 4008138:	100490fa 	slli	r2,r2,3
 400813c:	1885883a 	add	r2,r3,r2
 4008140:	10c00017 	ldw	r3,0(r2)
 4008144:	01008074 	movhi	r4,513
 4008148:	21229504 	addi	r4,r4,-30124
 400814c:	e0bffd17 	ldw	r2,-12(fp)
 4008150:	100490fa 	slli	r2,r2,3
 4008154:	2085883a 	add	r2,r4,r2
 4008158:	10800104 	addi	r2,r2,4
 400815c:	10800017 	ldw	r2,0(r2)
 4008160:	1009883a 	mov	r4,r2
 4008164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4008168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400816c:	0005313a 	rdctl	r2,ipending
 4008170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4008174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 4008178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 400817c:	e0bffb17 	ldw	r2,-20(fp)
 4008180:	103fe31e 	bne	r2,zero,4008110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 4008184:	00000706 	br	40081a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4008188:	e0bffc17 	ldw	r2,-16(fp)
 400818c:	1085883a 	add	r2,r2,r2
 4008190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4008194:	e0bffd17 	ldw	r2,-12(fp)
 4008198:	10800044 	addi	r2,r2,1
 400819c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40081a0:	003fde06 	br	400811c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 40081a4:	e037883a 	mov	sp,fp
 40081a8:	dfc00117 	ldw	ra,4(sp)
 40081ac:	df000017 	ldw	fp,0(sp)
 40081b0:	dec00204 	addi	sp,sp,8
 40081b4:	f800283a 	ret

Disassembly of section .text:

020001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 20001b8:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 20001bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 20001c0:	06808034 	movhi	gp,512
    ori gp, gp, %lo(_gp)
 20001c4:	d6bbe014 	ori	gp,gp,61312
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 20001c8:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 20001cc:	10a28014 	ori	r2,r2,35328

    movhi r3, %hi(__bss_end)
 20001d0:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
 20001d4:	18e33914 	ori	r3,r3,36068

    beq r2, r3, 1f
 20001d8:	10c00326 	beq	r2,r3,20001e8 <_start+0x30>

0:
    stw zero, (r2)
 20001dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 20001e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 20001e4:	10fffd36 	bltu	r2,r3,20001dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 20001e8:	20034ec0 	call	20034ec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 20001ec:	20036900 	call	2003690 <alt_main>

020001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 20001f0:	003fff06 	br	20001f0 <alt_after_alt_main>

020001f4 <handle_button_interrupts>:

  //declare a global variable to hold the edge capture value
  volatile int edge_capture;

  static void handle_button_interrupts(void *context)
  {
 20001f4:	defffd04 	addi	sp,sp,-12
 20001f8:	df000215 	stw	fp,8(sp)
 20001fc:	df000204 	addi	fp,sp,8
 2000200:	e13fff15 	stw	r4,-4(fp)
	  //cast the context pointer to an integer pointer
	  volatile int *edge_capture_ptr = (volatile int*) context;
 2000204:	e0bfff17 	ldw	r2,-4(fp)
 2000208:	e0bffe15 	stw	r2,-8(fp)


	  //read the edge capture register on the button PIO & Store value.
	  *edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE);
 200020c:	00800704 	movi	r2,28
 2000210:	10c00037 	ldwio	r3,0(r2)
 2000214:	e0bffe17 	ldw	r2,-8(fp)
 2000218:	10c00015 	stw	r3,0(r2)

	  //write to the edge capture register to reset it
	  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE, 0x0);
 200021c:	0007883a 	mov	r3,zero
 2000220:	00800704 	movi	r2,28
 2000224:	10c00035 	stwio	r3,0(r2)

	  //reset interrupt capability for the KEY PIO
//	  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY_BASE, 0x0);

	  if( *edge_capture_ptr == 0x1) //check if the first key was pressed
 2000228:	e0bffe17 	ldw	r2,-8(fp)
 200022c:	10800017 	ldw	r2,0(r2)
 2000230:	10800058 	cmpnei	r2,r2,1
 2000234:	1000051e 	bne	r2,zero,200024c <handle_button_interrupts+0x58>
		  IOWR(LED_BASE, 0, ~(IORD_ALTERA_AVALON_PIO_DATA(LED_BASE))); // write 1 to the leds
 2000238:	0005883a 	mov	r2,zero
 200023c:	10800037 	ldwio	r2,0(r2)
 2000240:	0086303a 	nor	r3,zero,r2
 2000244:	0005883a 	mov	r2,zero
 2000248:	10c00035 	stwio	r3,0(r2)
  }
 200024c:	e037883a 	mov	sp,fp
 2000250:	df000017 	ldw	fp,0(sp)
 2000254:	dec00104 	addi	sp,sp,4
 2000258:	f800283a 	ret

0200025c <init_button_pio>:


  //Initialize the button_pio
  static void init_button_pio()
  {
 200025c:	defffc04 	addi	sp,sp,-16
 2000260:	dfc00315 	stw	ra,12(sp)
 2000264:	df000215 	stw	fp,8(sp)
 2000268:	df000204 	addi	fp,sp,8
	  //recast the edge_capture pointer to match the alt_irq_register() function proto
	  void *edge_capture_ptr = (void*) &edge_capture;
 200026c:	d0a6a004 	addi	r2,gp,-25984
 2000270:	e0bfff15 	stw	r2,-4(fp)

	  //enable all 4 button interrupts
	  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY_BASE, 0x1);
 2000274:	00c00044 	movi	r3,1
 2000278:	00800604 	movi	r2,24
 200027c:	10c00035 	stwio	r3,0(r2)

	  //reset the edge capture register
	  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE, 0x0);
 2000280:	0007883a 	mov	r3,zero
 2000284:	00800704 	movi	r2,28
 2000288:	10c00035 	stwio	r3,0(r2)

	  //register the ISR
	  alt_ic_isr_register(KEY_IRQ_INTERRUPT_CONTROLLER_ID, KEY_IRQ, handle_button_interrupts, edge_capture_ptr, 0x0);
 200028c:	d8000015 	stw	zero,0(sp)
 2000290:	0009883a 	mov	r4,zero
 2000294:	01400084 	movi	r5,2
 2000298:	01808034 	movhi	r6,512
 200029c:	31807d04 	addi	r6,r6,500
 20002a0:	e1ffff17 	ldw	r7,-4(fp)
 20002a4:	20030c40 	call	20030c4 <alt_ic_isr_register>

  }
 20002a8:	e037883a 	mov	sp,fp
 20002ac:	dfc00117 	ldw	ra,4(sp)
 20002b0:	df000017 	ldw	fp,0(sp)
 20002b4:	dec00204 	addi	sp,sp,8
 20002b8:	f800283a 	ret

020002bc <main>:

int main()
{
 20002bc:	defffd04 	addi	sp,sp,-12
 20002c0:	dfc00215 	stw	ra,8(sp)
 20002c4:	df000115 	stw	fp,4(sp)
 20002c8:	df000104 	addi	fp,sp,4
	int  i = 50000000;
 20002cc:	0080bef4 	movhi	r2,763
 20002d0:	10bc2004 	addi	r2,r2,-3968
 20002d4:	e0bfff15 	stw	r2,-4(fp)
  printf("Hello from Nios!\n");
 20002d8:	01008034 	movhi	r4,512
 20002dc:	21154a04 	addi	r4,r4,21800
 20002e0:	20003bc0 	call	20003bc <puts>
  IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x0);
 20002e4:	0007883a 	mov	r3,zero
 20002e8:	0005883a 	mov	r2,zero
 20002ec:	10c00035 	stwio	r3,0(r2)

  init_button_pio();
 20002f0:	200025c0 	call	200025c <init_button_pio>

  while( i >= 0)
 20002f4:	00000806 	br	2000318 <main+0x5c>
  {
	  while(i >= 0)
	  {
		  i--;
 20002f8:	e0bfff17 	ldw	r2,-4(fp)
 20002fc:	10bfffc4 	addi	r2,r2,-1
 2000300:	e0bfff15 	stw	r2,-4(fp)

  init_button_pio();

  while( i >= 0)
  {
	  while(i >= 0)
 2000304:	e0bfff17 	ldw	r2,-4(fp)
 2000308:	103ffb0e 	bge	r2,zero,20002f8 <main+0x3c>
	  {
		  i--;
	  }
	  i = 50000000;
 200030c:	0080bef4 	movhi	r2,763
 2000310:	10bc2004 	addi	r2,r2,-3968
 2000314:	e0bfff15 	stw	r2,-4(fp)
  printf("Hello from Nios!\n");
  IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x0);

  init_button_pio();

  while( i >= 0)
 2000318:	e0bfff17 	ldw	r2,-4(fp)
 200031c:	103ff90e 	bge	r2,zero,2000304 <main+0x48>
		  i--;
	  }
	  i = 50000000;
  }

  return 0;
 2000320:	0005883a 	mov	r2,zero
}
 2000324:	e037883a 	mov	sp,fp
 2000328:	dfc00117 	ldw	ra,4(sp)
 200032c:	df000017 	ldw	fp,0(sp)
 2000330:	dec00204 	addi	sp,sp,8
 2000334:	f800283a 	ret

02000338 <_puts_r>:
 2000338:	defff604 	addi	sp,sp,-40
 200033c:	dc400815 	stw	r17,32(sp)
 2000340:	2023883a 	mov	r17,r4
 2000344:	2809883a 	mov	r4,r5
 2000348:	dc000715 	stw	r16,28(sp)
 200034c:	dfc00915 	stw	ra,36(sp)
 2000350:	2821883a 	mov	r16,r5
 2000354:	20003d00 	call	20003d0 <strlen>
 2000358:	10c00044 	addi	r3,r2,1
 200035c:	d8800115 	stw	r2,4(sp)
 2000360:	89400217 	ldw	r5,8(r17)
 2000364:	00808034 	movhi	r2,512
 2000368:	10954f04 	addi	r2,r2,21820
 200036c:	d8800215 	stw	r2,8(sp)
 2000370:	00800044 	movi	r2,1
 2000374:	d8800315 	stw	r2,12(sp)
 2000378:	8809883a 	mov	r4,r17
 200037c:	00800084 	movi	r2,2
 2000380:	d9800404 	addi	r6,sp,16
 2000384:	dc000015 	stw	r16,0(sp)
 2000388:	d8c00615 	stw	r3,24(sp)
 200038c:	dec00415 	stw	sp,16(sp)
 2000390:	d8800515 	stw	r2,20(sp)
 2000394:	200045c0 	call	200045c <__sfvwrite_r>
 2000398:	1000061e 	bne	r2,zero,20003b4 <_puts_r+0x7c>
 200039c:	00800284 	movi	r2,10
 20003a0:	dfc00917 	ldw	ra,36(sp)
 20003a4:	dc400817 	ldw	r17,32(sp)
 20003a8:	dc000717 	ldw	r16,28(sp)
 20003ac:	dec00a04 	addi	sp,sp,40
 20003b0:	f800283a 	ret
 20003b4:	00bfffc4 	movi	r2,-1
 20003b8:	003ff906 	br	20003a0 <_puts_r+0x68>

020003bc <puts>:
 20003bc:	00808034 	movhi	r2,512
 20003c0:	109be104 	addi	r2,r2,28548
 20003c4:	200b883a 	mov	r5,r4
 20003c8:	11000017 	ldw	r4,0(r2)
 20003cc:	20003381 	jmpi	2000338 <_puts_r>

020003d0 <strlen>:
 20003d0:	208000cc 	andi	r2,r4,3
 20003d4:	10001f1e 	bne	r2,zero,2000454 <strlen+0x84>
 20003d8:	20800017 	ldw	r2,0(r4)
 20003dc:	01ffbff4 	movhi	r7,65279
 20003e0:	39ffbfc4 	addi	r7,r7,-257
 20003e4:	01a02074 	movhi	r6,32897
 20003e8:	31a02004 	addi	r6,r6,-32640
 20003ec:	11c7883a 	add	r3,r2,r7
 20003f0:	0084303a 	nor	r2,zero,r2
 20003f4:	1886703a 	and	r3,r3,r2
 20003f8:	1986703a 	and	r3,r3,r6
 20003fc:	2005883a 	mov	r2,r4
 2000400:	1800101e 	bne	r3,zero,2000444 <strlen+0x74>
 2000404:	10800104 	addi	r2,r2,4
 2000408:	10c00017 	ldw	r3,0(r2)
 200040c:	19cb883a 	add	r5,r3,r7
 2000410:	00c6303a 	nor	r3,zero,r3
 2000414:	28c6703a 	and	r3,r5,r3
 2000418:	1986703a 	and	r3,r3,r6
 200041c:	1800091e 	bne	r3,zero,2000444 <strlen+0x74>
 2000420:	10800104 	addi	r2,r2,4
 2000424:	10c00017 	ldw	r3,0(r2)
 2000428:	19cb883a 	add	r5,r3,r7
 200042c:	00c6303a 	nor	r3,zero,r3
 2000430:	28c6703a 	and	r3,r5,r3
 2000434:	1986703a 	and	r3,r3,r6
 2000438:	183ff226 	beq	r3,zero,2000404 <strlen+0x34>
 200043c:	00000106 	br	2000444 <strlen+0x74>
 2000440:	10800044 	addi	r2,r2,1
 2000444:	10c00007 	ldb	r3,0(r2)
 2000448:	183ffd1e 	bne	r3,zero,2000440 <strlen+0x70>
 200044c:	1105c83a 	sub	r2,r2,r4
 2000450:	f800283a 	ret
 2000454:	2005883a 	mov	r2,r4
 2000458:	003ffa06 	br	2000444 <strlen+0x74>

0200045c <__sfvwrite_r>:
 200045c:	30800217 	ldw	r2,8(r6)
 2000460:	defff504 	addi	sp,sp,-44
 2000464:	dd400615 	stw	r21,24(sp)
 2000468:	dd000515 	stw	r20,20(sp)
 200046c:	dc000115 	stw	r16,4(sp)
 2000470:	dfc00a15 	stw	ra,40(sp)
 2000474:	df000915 	stw	fp,36(sp)
 2000478:	ddc00815 	stw	r23,32(sp)
 200047c:	dd800715 	stw	r22,28(sp)
 2000480:	dcc00415 	stw	r19,16(sp)
 2000484:	dc800315 	stw	r18,12(sp)
 2000488:	dc400215 	stw	r17,8(sp)
 200048c:	3029883a 	mov	r20,r6
 2000490:	202b883a 	mov	r21,r4
 2000494:	2821883a 	mov	r16,r5
 2000498:	10002126 	beq	r2,zero,2000520 <__sfvwrite_r+0xc4>
 200049c:	2880030b 	ldhu	r2,12(r5)
 20004a0:	10c0020c 	andi	r3,r2,8
 20004a4:	18ffffcc 	andi	r3,r3,65535
 20004a8:	18e0001c 	xori	r3,r3,32768
 20004ac:	18e00004 	addi	r3,r3,-32768
 20004b0:	18002826 	beq	r3,zero,2000554 <__sfvwrite_r+0xf8>
 20004b4:	28c00417 	ldw	r3,16(r5)
 20004b8:	18002626 	beq	r3,zero,2000554 <__sfvwrite_r+0xf8>
 20004bc:	10c0008c 	andi	r3,r2,2
 20004c0:	18ffffcc 	andi	r3,r3,65535
 20004c4:	18e0001c 	xori	r3,r3,32768
 20004c8:	18e00004 	addi	r3,r3,-32768
 20004cc:	a4400017 	ldw	r17,0(r20)
 20004d0:	18002b26 	beq	r3,zero,2000580 <__sfvwrite_r+0x124>
 20004d4:	0027883a 	mov	r19,zero
 20004d8:	0025883a 	mov	r18,zero
 20004dc:	05810004 	movi	r22,1024
 20004e0:	980d883a 	mov	r6,r19
 20004e4:	a809883a 	mov	r4,r21
 20004e8:	90004f26 	beq	r18,zero,2000628 <__sfvwrite_r+0x1cc>
 20004ec:	900f883a 	mov	r7,r18
 20004f0:	81400717 	ldw	r5,28(r16)
 20004f4:	b480012e 	bgeu	r22,r18,20004fc <__sfvwrite_r+0xa0>
 20004f8:	01c10004 	movi	r7,1024
 20004fc:	80800917 	ldw	r2,36(r16)
 2000500:	103ee83a 	callr	r2
 2000504:	0080540e 	bge	zero,r2,2000658 <__sfvwrite_r+0x1fc>
 2000508:	a0c00217 	ldw	r3,8(r20)
 200050c:	98a7883a 	add	r19,r19,r2
 2000510:	90a5c83a 	sub	r18,r18,r2
 2000514:	1885c83a 	sub	r2,r3,r2
 2000518:	a0800215 	stw	r2,8(r20)
 200051c:	103ff01e 	bne	r2,zero,20004e0 <__sfvwrite_r+0x84>
 2000520:	0005883a 	mov	r2,zero
 2000524:	dfc00a17 	ldw	ra,40(sp)
 2000528:	df000917 	ldw	fp,36(sp)
 200052c:	ddc00817 	ldw	r23,32(sp)
 2000530:	dd800717 	ldw	r22,28(sp)
 2000534:	dd400617 	ldw	r21,24(sp)
 2000538:	dd000517 	ldw	r20,20(sp)
 200053c:	dcc00417 	ldw	r19,16(sp)
 2000540:	dc800317 	ldw	r18,12(sp)
 2000544:	dc400217 	ldw	r17,8(sp)
 2000548:	dc000117 	ldw	r16,4(sp)
 200054c:	dec00b04 	addi	sp,sp,44
 2000550:	f800283a 	ret
 2000554:	a809883a 	mov	r4,r21
 2000558:	800b883a 	mov	r5,r16
 200055c:	2001ae80 	call	2001ae8 <__swsetup_r>
 2000560:	1000f01e 	bne	r2,zero,2000924 <__sfvwrite_r+0x4c8>
 2000564:	8080030b 	ldhu	r2,12(r16)
 2000568:	a4400017 	ldw	r17,0(r20)
 200056c:	10c0008c 	andi	r3,r2,2
 2000570:	18ffffcc 	andi	r3,r3,65535
 2000574:	18e0001c 	xori	r3,r3,32768
 2000578:	18e00004 	addi	r3,r3,-32768
 200057c:	183fd51e 	bne	r3,zero,20004d4 <__sfvwrite_r+0x78>
 2000580:	10c0004c 	andi	r3,r2,1
 2000584:	002d883a 	mov	r22,zero
 2000588:	1800381e 	bne	r3,zero,200066c <__sfvwrite_r+0x210>
 200058c:	0025883a 	mov	r18,zero
 2000590:	90002126 	beq	r18,zero,2000618 <__sfvwrite_r+0x1bc>
 2000594:	10c0800c 	andi	r3,r2,512
 2000598:	18ffffcc 	andi	r3,r3,65535
 200059c:	18e0001c 	xori	r3,r3,32768
 20005a0:	18e00004 	addi	r3,r3,-32768
 20005a4:	84c00217 	ldw	r19,8(r16)
 20005a8:	18006b26 	beq	r3,zero,2000758 <__sfvwrite_r+0x2fc>
 20005ac:	980f883a 	mov	r7,r19
 20005b0:	94c08636 	bltu	r18,r19,20007cc <__sfvwrite_r+0x370>
 20005b4:	10c1200c 	andi	r3,r2,1152
 20005b8:	18009f1e 	bne	r3,zero,2000838 <__sfvwrite_r+0x3dc>
 20005bc:	81000017 	ldw	r4,0(r16)
 20005c0:	982f883a 	mov	r23,r19
 20005c4:	9039883a 	mov	fp,r18
 20005c8:	9027883a 	mov	r19,r18
 20005cc:	380d883a 	mov	r6,r7
 20005d0:	b00b883a 	mov	r5,r22
 20005d4:	d9c00015 	stw	r7,0(sp)
 20005d8:	20012fc0 	call	20012fc <memmove>
 20005dc:	d9c00017 	ldw	r7,0(sp)
 20005e0:	81000217 	ldw	r4,8(r16)
 20005e4:	80800017 	ldw	r2,0(r16)
 20005e8:	25efc83a 	sub	r23,r4,r23
 20005ec:	11cf883a 	add	r7,r2,r7
 20005f0:	85c00215 	stw	r23,8(r16)
 20005f4:	81c00015 	stw	r7,0(r16)
 20005f8:	a0800217 	ldw	r2,8(r20)
 20005fc:	b72d883a 	add	r22,r22,fp
 2000600:	9725c83a 	sub	r18,r18,fp
 2000604:	14e7c83a 	sub	r19,r2,r19
 2000608:	a4c00215 	stw	r19,8(r20)
 200060c:	983fc426 	beq	r19,zero,2000520 <__sfvwrite_r+0xc4>
 2000610:	8080030b 	ldhu	r2,12(r16)
 2000614:	903fdf1e 	bne	r18,zero,2000594 <__sfvwrite_r+0x138>
 2000618:	8d800017 	ldw	r22,0(r17)
 200061c:	8c800117 	ldw	r18,4(r17)
 2000620:	8c400204 	addi	r17,r17,8
 2000624:	003fda06 	br	2000590 <__sfvwrite_r+0x134>
 2000628:	8cc00017 	ldw	r19,0(r17)
 200062c:	8c800117 	ldw	r18,4(r17)
 2000630:	8c400204 	addi	r17,r17,8
 2000634:	003faa06 	br	20004e0 <__sfvwrite_r+0x84>
 2000638:	20014880 	call	2001488 <_realloc_r>
 200063c:	102f883a 	mov	r23,r2
 2000640:	10009f1e 	bne	r2,zero,20008c0 <__sfvwrite_r+0x464>
 2000644:	81400417 	ldw	r5,16(r16)
 2000648:	a809883a 	mov	r4,r21
 200064c:	200229c0 	call	200229c <_free_r>
 2000650:	00800304 	movi	r2,12
 2000654:	a8800015 	stw	r2,0(r21)
 2000658:	80c0030b 	ldhu	r3,12(r16)
 200065c:	00bfffc4 	movi	r2,-1
 2000660:	18c01014 	ori	r3,r3,64
 2000664:	80c0030d 	sth	r3,12(r16)
 2000668:	003fae06 	br	2000524 <__sfvwrite_r+0xc8>
 200066c:	0007883a 	mov	r3,zero
 2000670:	0039883a 	mov	fp,zero
 2000674:	0025883a 	mov	r18,zero
 2000678:	90001e26 	beq	r18,zero,20006f4 <__sfvwrite_r+0x298>
 200067c:	18006526 	beq	r3,zero,2000814 <__sfvwrite_r+0x3b8>
 2000680:	b02f883a 	mov	r23,r22
 2000684:	9580012e 	bgeu	r18,r22,200068c <__sfvwrite_r+0x230>
 2000688:	902f883a 	mov	r23,r18
 200068c:	81000017 	ldw	r4,0(r16)
 2000690:	80800417 	ldw	r2,16(r16)
 2000694:	84c00217 	ldw	r19,8(r16)
 2000698:	81c00517 	ldw	r7,20(r16)
 200069c:	1100022e 	bgeu	r2,r4,20006a8 <__sfvwrite_r+0x24c>
 20006a0:	99e7883a 	add	r19,r19,r7
 20006a4:	9dc01816 	blt	r19,r23,2000708 <__sfvwrite_r+0x2ac>
 20006a8:	b9c03b16 	blt	r23,r7,2000798 <__sfvwrite_r+0x33c>
 20006ac:	80800917 	ldw	r2,36(r16)
 20006b0:	81400717 	ldw	r5,28(r16)
 20006b4:	a809883a 	mov	r4,r21
 20006b8:	d8c00015 	stw	r3,0(sp)
 20006bc:	e00d883a 	mov	r6,fp
 20006c0:	103ee83a 	callr	r2
 20006c4:	1027883a 	mov	r19,r2
 20006c8:	d8c00017 	ldw	r3,0(sp)
 20006cc:	00bfe20e 	bge	zero,r2,2000658 <__sfvwrite_r+0x1fc>
 20006d0:	b4edc83a 	sub	r22,r22,r19
 20006d4:	b0001a26 	beq	r22,zero,2000740 <__sfvwrite_r+0x2e4>
 20006d8:	a0800217 	ldw	r2,8(r20)
 20006dc:	e4f9883a 	add	fp,fp,r19
 20006e0:	94e5c83a 	sub	r18,r18,r19
 20006e4:	14e7c83a 	sub	r19,r2,r19
 20006e8:	a4c00215 	stw	r19,8(r20)
 20006ec:	983f8c26 	beq	r19,zero,2000520 <__sfvwrite_r+0xc4>
 20006f0:	903fe21e 	bne	r18,zero,200067c <__sfvwrite_r+0x220>
 20006f4:	8f000017 	ldw	fp,0(r17)
 20006f8:	8c800117 	ldw	r18,4(r17)
 20006fc:	0007883a 	mov	r3,zero
 2000700:	8c400204 	addi	r17,r17,8
 2000704:	003fdc06 	br	2000678 <__sfvwrite_r+0x21c>
 2000708:	e00b883a 	mov	r5,fp
 200070c:	980d883a 	mov	r6,r19
 2000710:	d8c00015 	stw	r3,0(sp)
 2000714:	20012fc0 	call	20012fc <memmove>
 2000718:	80800017 	ldw	r2,0(r16)
 200071c:	a809883a 	mov	r4,r21
 2000720:	800b883a 	mov	r5,r16
 2000724:	14c5883a 	add	r2,r2,r19
 2000728:	80800015 	stw	r2,0(r16)
 200072c:	2001c5c0 	call	2001c5c <_fflush_r>
 2000730:	d8c00017 	ldw	r3,0(sp)
 2000734:	103fc81e 	bne	r2,zero,2000658 <__sfvwrite_r+0x1fc>
 2000738:	b4edc83a 	sub	r22,r22,r19
 200073c:	b03fe61e 	bne	r22,zero,20006d8 <__sfvwrite_r+0x27c>
 2000740:	a809883a 	mov	r4,r21
 2000744:	800b883a 	mov	r5,r16
 2000748:	2001c5c0 	call	2001c5c <_fflush_r>
 200074c:	103fc21e 	bne	r2,zero,2000658 <__sfvwrite_r+0x1fc>
 2000750:	0007883a 	mov	r3,zero
 2000754:	003fe006 	br	20006d8 <__sfvwrite_r+0x27c>
 2000758:	81000017 	ldw	r4,0(r16)
 200075c:	80800417 	ldw	r2,16(r16)
 2000760:	1100022e 	bgeu	r2,r4,200076c <__sfvwrite_r+0x310>
 2000764:	9839883a 	mov	fp,r19
 2000768:	9c806036 	bltu	r19,r18,20008ec <__sfvwrite_r+0x490>
 200076c:	81c00517 	ldw	r7,20(r16)
 2000770:	91c01c36 	bltu	r18,r7,20007e4 <__sfvwrite_r+0x388>
 2000774:	80800917 	ldw	r2,36(r16)
 2000778:	81400717 	ldw	r5,28(r16)
 200077c:	a809883a 	mov	r4,r21
 2000780:	b00d883a 	mov	r6,r22
 2000784:	103ee83a 	callr	r2
 2000788:	1027883a 	mov	r19,r2
 200078c:	00bfb20e 	bge	zero,r2,2000658 <__sfvwrite_r+0x1fc>
 2000790:	1039883a 	mov	fp,r2
 2000794:	003f9806 	br	20005f8 <__sfvwrite_r+0x19c>
 2000798:	b80d883a 	mov	r6,r23
 200079c:	e00b883a 	mov	r5,fp
 20007a0:	d8c00015 	stw	r3,0(sp)
 20007a4:	20012fc0 	call	20012fc <memmove>
 20007a8:	80800217 	ldw	r2,8(r16)
 20007ac:	81000017 	ldw	r4,0(r16)
 20007b0:	b827883a 	mov	r19,r23
 20007b4:	15c5c83a 	sub	r2,r2,r23
 20007b8:	25ef883a 	add	r23,r4,r23
 20007bc:	80800215 	stw	r2,8(r16)
 20007c0:	85c00015 	stw	r23,0(r16)
 20007c4:	d8c00017 	ldw	r3,0(sp)
 20007c8:	003fc106 	br	20006d0 <__sfvwrite_r+0x274>
 20007cc:	81000017 	ldw	r4,0(r16)
 20007d0:	902f883a 	mov	r23,r18
 20007d4:	9039883a 	mov	fp,r18
 20007d8:	9027883a 	mov	r19,r18
 20007dc:	900f883a 	mov	r7,r18
 20007e0:	003f7a06 	br	20005cc <__sfvwrite_r+0x170>
 20007e4:	b00b883a 	mov	r5,r22
 20007e8:	900d883a 	mov	r6,r18
 20007ec:	20012fc0 	call	20012fc <memmove>
 20007f0:	80c00217 	ldw	r3,8(r16)
 20007f4:	80800017 	ldw	r2,0(r16)
 20007f8:	9027883a 	mov	r19,r18
 20007fc:	1c87c83a 	sub	r3,r3,r18
 2000800:	1485883a 	add	r2,r2,r18
 2000804:	80c00215 	stw	r3,8(r16)
 2000808:	80800015 	stw	r2,0(r16)
 200080c:	9039883a 	mov	fp,r18
 2000810:	003f7906 	br	20005f8 <__sfvwrite_r+0x19c>
 2000814:	e009883a 	mov	r4,fp
 2000818:	01400284 	movi	r5,10
 200081c:	900d883a 	mov	r6,r18
 2000820:	20010c40 	call	20010c4 <memchr>
 2000824:	10003c26 	beq	r2,zero,2000918 <__sfvwrite_r+0x4bc>
 2000828:	15800044 	addi	r22,r2,1
 200082c:	b72dc83a 	sub	r22,r22,fp
 2000830:	00c00044 	movi	r3,1
 2000834:	003f9206 	br	2000680 <__sfvwrite_r+0x224>
 2000838:	81000517 	ldw	r4,20(r16)
 200083c:	81400417 	ldw	r5,16(r16)
 2000840:	80c00017 	ldw	r3,0(r16)
 2000844:	210d883a 	add	r6,r4,r4
 2000848:	3109883a 	add	r4,r6,r4
 200084c:	2026d7fa 	srli	r19,r4,31
 2000850:	1979c83a 	sub	fp,r3,r5
 2000854:	e1800044 	addi	r6,fp,1
 2000858:	9909883a 	add	r4,r19,r4
 200085c:	2027d07a 	srai	r19,r4,1
 2000860:	3489883a 	add	r4,r6,r18
 2000864:	980d883a 	mov	r6,r19
 2000868:	9900022e 	bgeu	r19,r4,2000874 <__sfvwrite_r+0x418>
 200086c:	2027883a 	mov	r19,r4
 2000870:	200d883a 	mov	r6,r4
 2000874:	1081000c 	andi	r2,r2,1024
 2000878:	10bfffcc 	andi	r2,r2,65535
 200087c:	10a0001c 	xori	r2,r2,32768
 2000880:	10a00004 	addi	r2,r2,-32768
 2000884:	a809883a 	mov	r4,r21
 2000888:	103f6b26 	beq	r2,zero,2000638 <__sfvwrite_r+0x1dc>
 200088c:	300b883a 	mov	r5,r6
 2000890:	20009400 	call	2000940 <_malloc_r>
 2000894:	102f883a 	mov	r23,r2
 2000898:	103f6d26 	beq	r2,zero,2000650 <__sfvwrite_r+0x1f4>
 200089c:	81400417 	ldw	r5,16(r16)
 20008a0:	1009883a 	mov	r4,r2
 20008a4:	e00d883a 	mov	r6,fp
 20008a8:	20011bc0 	call	20011bc <memcpy>
 20008ac:	8080030b 	ldhu	r2,12(r16)
 20008b0:	00fedfc4 	movi	r3,-1153
 20008b4:	10c4703a 	and	r2,r2,r3
 20008b8:	10802014 	ori	r2,r2,128
 20008bc:	8080030d 	sth	r2,12(r16)
 20008c0:	bf09883a 	add	r4,r23,fp
 20008c4:	9f07c83a 	sub	r3,r19,fp
 20008c8:	85c00415 	stw	r23,16(r16)
 20008cc:	84c00515 	stw	r19,20(r16)
 20008d0:	81000015 	stw	r4,0(r16)
 20008d4:	902f883a 	mov	r23,r18
 20008d8:	80c00215 	stw	r3,8(r16)
 20008dc:	9039883a 	mov	fp,r18
 20008e0:	9027883a 	mov	r19,r18
 20008e4:	900f883a 	mov	r7,r18
 20008e8:	003f3806 	br	20005cc <__sfvwrite_r+0x170>
 20008ec:	b00b883a 	mov	r5,r22
 20008f0:	980d883a 	mov	r6,r19
 20008f4:	20012fc0 	call	20012fc <memmove>
 20008f8:	80800017 	ldw	r2,0(r16)
 20008fc:	a809883a 	mov	r4,r21
 2000900:	800b883a 	mov	r5,r16
 2000904:	14c5883a 	add	r2,r2,r19
 2000908:	80800015 	stw	r2,0(r16)
 200090c:	2001c5c0 	call	2001c5c <_fflush_r>
 2000910:	103f3926 	beq	r2,zero,20005f8 <__sfvwrite_r+0x19c>
 2000914:	003f5006 	br	2000658 <__sfvwrite_r+0x1fc>
 2000918:	95800044 	addi	r22,r18,1
 200091c:	00c00044 	movi	r3,1
 2000920:	003f5706 	br	2000680 <__sfvwrite_r+0x224>
 2000924:	80c0030b 	ldhu	r3,12(r16)
 2000928:	00bfffc4 	movi	r2,-1
 200092c:	18c01014 	ori	r3,r3,64
 2000930:	80c0030d 	sth	r3,12(r16)
 2000934:	00c00244 	movi	r3,9
 2000938:	a8c00015 	stw	r3,0(r21)
 200093c:	003ef906 	br	2000524 <__sfvwrite_r+0xc8>

02000940 <_malloc_r>:
 2000940:	defff604 	addi	sp,sp,-40
 2000944:	dc800215 	stw	r18,8(sp)
 2000948:	dfc00915 	stw	ra,36(sp)
 200094c:	df000815 	stw	fp,32(sp)
 2000950:	ddc00715 	stw	r23,28(sp)
 2000954:	dd800615 	stw	r22,24(sp)
 2000958:	dd400515 	stw	r21,20(sp)
 200095c:	dd000415 	stw	r20,16(sp)
 2000960:	dcc00315 	stw	r19,12(sp)
 2000964:	dc400115 	stw	r17,4(sp)
 2000968:	dc000015 	stw	r16,0(sp)
 200096c:	288002c4 	addi	r2,r5,11
 2000970:	00c00584 	movi	r3,22
 2000974:	2025883a 	mov	r18,r4
 2000978:	18802b2e 	bgeu	r3,r2,2000a28 <_malloc_r+0xe8>
 200097c:	047ffe04 	movi	r17,-8
 2000980:	1462703a 	and	r17,r2,r17
 2000984:	88002a16 	blt	r17,zero,2000a30 <_malloc_r+0xf0>
 2000988:	89402936 	bltu	r17,r5,2000a30 <_malloc_r+0xf0>
 200098c:	9009883a 	mov	r4,r18
 2000990:	20037080 	call	2003708 <__malloc_lock>
 2000994:	00807dc4 	movi	r2,503
 2000998:	14402936 	bltu	r2,r17,2000a40 <_malloc_r+0x100>
 200099c:	8808d0fa 	srli	r4,r17,3
 20009a0:	04c08034 	movhi	r19,512
 20009a4:	9cd65c04 	addi	r19,r19,22896
 20009a8:	2105883a 	add	r2,r4,r4
 20009ac:	1085883a 	add	r2,r2,r2
 20009b0:	1085883a 	add	r2,r2,r2
 20009b4:	9885883a 	add	r2,r19,r2
 20009b8:	14000317 	ldw	r16,12(r2)
 20009bc:	80815526 	beq	r16,r2,2000f14 <_malloc_r+0x5d4>
 20009c0:	81000117 	ldw	r4,4(r16)
 20009c4:	00bfff04 	movi	r2,-4
 20009c8:	80c00317 	ldw	r3,12(r16)
 20009cc:	2084703a 	and	r2,r4,r2
 20009d0:	8085883a 	add	r2,r16,r2
 20009d4:	11800117 	ldw	r6,4(r2)
 20009d8:	81400217 	ldw	r5,8(r16)
 20009dc:	9009883a 	mov	r4,r18
 20009e0:	31800054 	ori	r6,r6,1
 20009e4:	11800115 	stw	r6,4(r2)
 20009e8:	28c00315 	stw	r3,12(r5)
 20009ec:	19400215 	stw	r5,8(r3)
 20009f0:	20037280 	call	2003728 <__malloc_unlock>
 20009f4:	80800204 	addi	r2,r16,8
 20009f8:	dfc00917 	ldw	ra,36(sp)
 20009fc:	df000817 	ldw	fp,32(sp)
 2000a00:	ddc00717 	ldw	r23,28(sp)
 2000a04:	dd800617 	ldw	r22,24(sp)
 2000a08:	dd400517 	ldw	r21,20(sp)
 2000a0c:	dd000417 	ldw	r20,16(sp)
 2000a10:	dcc00317 	ldw	r19,12(sp)
 2000a14:	dc800217 	ldw	r18,8(sp)
 2000a18:	dc400117 	ldw	r17,4(sp)
 2000a1c:	dc000017 	ldw	r16,0(sp)
 2000a20:	dec00a04 	addi	sp,sp,40
 2000a24:	f800283a 	ret
 2000a28:	04400404 	movi	r17,16
 2000a2c:	897fd72e 	bgeu	r17,r5,200098c <_malloc_r+0x4c>
 2000a30:	00800304 	movi	r2,12
 2000a34:	90800015 	stw	r2,0(r18)
 2000a38:	0005883a 	mov	r2,zero
 2000a3c:	003fee06 	br	20009f8 <_malloc_r+0xb8>
 2000a40:	8808d27a 	srli	r4,r17,9
 2000a44:	20007126 	beq	r4,zero,2000c0c <_malloc_r+0x2cc>
 2000a48:	00800104 	movi	r2,4
 2000a4c:	1100eb36 	bltu	r2,r4,2000dfc <_malloc_r+0x4bc>
 2000a50:	8808d1ba 	srli	r4,r17,6
 2000a54:	21000e04 	addi	r4,r4,56
 2000a58:	210b883a 	add	r5,r4,r4
 2000a5c:	294b883a 	add	r5,r5,r5
 2000a60:	294b883a 	add	r5,r5,r5
 2000a64:	04c08034 	movhi	r19,512
 2000a68:	9cd65c04 	addi	r19,r19,22896
 2000a6c:	994b883a 	add	r5,r19,r5
 2000a70:	2c000317 	ldw	r16,12(r5)
 2000a74:	2c000e26 	beq	r5,r16,2000ab0 <_malloc_r+0x170>
 2000a78:	80c00117 	ldw	r3,4(r16)
 2000a7c:	01ffff04 	movi	r7,-4
 2000a80:	018003c4 	movi	r6,15
 2000a84:	19c6703a 	and	r3,r3,r7
 2000a88:	1c45c83a 	sub	r2,r3,r17
 2000a8c:	30800716 	blt	r6,r2,2000aac <_malloc_r+0x16c>
 2000a90:	1000610e 	bge	r2,zero,2000c18 <_malloc_r+0x2d8>
 2000a94:	84000317 	ldw	r16,12(r16)
 2000a98:	2c000526 	beq	r5,r16,2000ab0 <_malloc_r+0x170>
 2000a9c:	80c00117 	ldw	r3,4(r16)
 2000aa0:	19c6703a 	and	r3,r3,r7
 2000aa4:	1c45c83a 	sub	r2,r3,r17
 2000aa8:	30bff90e 	bge	r6,r2,2000a90 <_malloc_r+0x150>
 2000aac:	213fffc4 	addi	r4,r4,-1
 2000ab0:	21000044 	addi	r4,r4,1
 2000ab4:	9c000417 	ldw	r16,16(r19)
 2000ab8:	00c08034 	movhi	r3,512
 2000abc:	18d65c04 	addi	r3,r3,22896
 2000ac0:	1a400204 	addi	r9,r3,8
 2000ac4:	8240ff26 	beq	r16,r9,2000ec4 <_malloc_r+0x584>
 2000ac8:	81400117 	ldw	r5,4(r16)
 2000acc:	00bfff04 	movi	r2,-4
 2000ad0:	018003c4 	movi	r6,15
 2000ad4:	2884703a 	and	r2,r5,r2
 2000ad8:	144bc83a 	sub	r5,r2,r17
 2000adc:	3140ea16 	blt	r6,r5,2000e88 <_malloc_r+0x548>
 2000ae0:	1a400515 	stw	r9,20(r3)
 2000ae4:	1a400415 	stw	r9,16(r3)
 2000ae8:	2800570e 	bge	r5,zero,2000c48 <_malloc_r+0x308>
 2000aec:	01407fc4 	movi	r5,511
 2000af0:	2880ca36 	bltu	r5,r2,2000e1c <_malloc_r+0x4dc>
 2000af4:	1004d0fa 	srli	r2,r2,3
 2000af8:	02000044 	movi	r8,1
 2000afc:	19c00117 	ldw	r7,4(r3)
 2000b00:	108b883a 	add	r5,r2,r2
 2000b04:	294b883a 	add	r5,r5,r5
 2000b08:	1005d0ba 	srai	r2,r2,2
 2000b0c:	294b883a 	add	r5,r5,r5
 2000b10:	28cb883a 	add	r5,r5,r3
 2000b14:	29800217 	ldw	r6,8(r5)
 2000b18:	4084983a 	sll	r2,r8,r2
 2000b1c:	81400315 	stw	r5,12(r16)
 2000b20:	81800215 	stw	r6,8(r16)
 2000b24:	11c4b03a 	or	r2,r2,r7
 2000b28:	18800115 	stw	r2,4(r3)
 2000b2c:	2c000215 	stw	r16,8(r5)
 2000b30:	34000315 	stw	r16,12(r6)
 2000b34:	200bd0ba 	srai	r5,r4,2
 2000b38:	00c00044 	movi	r3,1
 2000b3c:	194a983a 	sll	r5,r3,r5
 2000b40:	11404936 	bltu	r2,r5,2000c68 <_malloc_r+0x328>
 2000b44:	1146703a 	and	r3,r2,r5
 2000b48:	18000a1e 	bne	r3,zero,2000b74 <_malloc_r+0x234>
 2000b4c:	00ffff04 	movi	r3,-4
 2000b50:	294b883a 	add	r5,r5,r5
 2000b54:	20c8703a 	and	r4,r4,r3
 2000b58:	1146703a 	and	r3,r2,r5
 2000b5c:	21000104 	addi	r4,r4,4
 2000b60:	1800041e 	bne	r3,zero,2000b74 <_malloc_r+0x234>
 2000b64:	294b883a 	add	r5,r5,r5
 2000b68:	1146703a 	and	r3,r2,r5
 2000b6c:	21000104 	addi	r4,r4,4
 2000b70:	183ffc26 	beq	r3,zero,2000b64 <_malloc_r+0x224>
 2000b74:	023fff04 	movi	r8,-4
 2000b78:	01c003c4 	movi	r7,15
 2000b7c:	2105883a 	add	r2,r4,r4
 2000b80:	1085883a 	add	r2,r2,r2
 2000b84:	1085883a 	add	r2,r2,r2
 2000b88:	9899883a 	add	r12,r19,r2
 2000b8c:	62800304 	addi	r10,r12,12
 2000b90:	2017883a 	mov	r11,r4
 2000b94:	54000017 	ldw	r16,0(r10)
 2000b98:	51bffd04 	addi	r6,r10,-12
 2000b9c:	8180041e 	bne	r16,r6,2000bb0 <_malloc_r+0x270>
 2000ba0:	0000ca06 	br	2000ecc <_malloc_r+0x58c>
 2000ba4:	10001c0e 	bge	r2,zero,2000c18 <_malloc_r+0x2d8>
 2000ba8:	84000317 	ldw	r16,12(r16)
 2000bac:	8180c726 	beq	r16,r6,2000ecc <_malloc_r+0x58c>
 2000bb0:	80c00117 	ldw	r3,4(r16)
 2000bb4:	1a06703a 	and	r3,r3,r8
 2000bb8:	1c45c83a 	sub	r2,r3,r17
 2000bbc:	38bff90e 	bge	r7,r2,2000ba4 <_malloc_r+0x264>
 2000bc0:	81000317 	ldw	r4,12(r16)
 2000bc4:	81400217 	ldw	r5,8(r16)
 2000bc8:	8447883a 	add	r3,r16,r17
 2000bcc:	8c400054 	ori	r17,r17,1
 2000bd0:	29000315 	stw	r4,12(r5)
 2000bd4:	21400215 	stw	r5,8(r4)
 2000bd8:	84400115 	stw	r17,4(r16)
 2000bdc:	1889883a 	add	r4,r3,r2
 2000be0:	11400054 	ori	r5,r2,1
 2000be4:	98c00515 	stw	r3,20(r19)
 2000be8:	98c00415 	stw	r3,16(r19)
 2000bec:	20800015 	stw	r2,0(r4)
 2000bf0:	1a400315 	stw	r9,12(r3)
 2000bf4:	1a400215 	stw	r9,8(r3)
 2000bf8:	19400115 	stw	r5,4(r3)
 2000bfc:	9009883a 	mov	r4,r18
 2000c00:	20037280 	call	2003728 <__malloc_unlock>
 2000c04:	80800204 	addi	r2,r16,8
 2000c08:	003f7b06 	br	20009f8 <_malloc_r+0xb8>
 2000c0c:	8808d0fa 	srli	r4,r17,3
 2000c10:	210b883a 	add	r5,r4,r4
 2000c14:	003f9106 	br	2000a5c <_malloc_r+0x11c>
 2000c18:	80c7883a 	add	r3,r16,r3
 2000c1c:	19400117 	ldw	r5,4(r3)
 2000c20:	80800317 	ldw	r2,12(r16)
 2000c24:	81000217 	ldw	r4,8(r16)
 2000c28:	29400054 	ori	r5,r5,1
 2000c2c:	19400115 	stw	r5,4(r3)
 2000c30:	20800315 	stw	r2,12(r4)
 2000c34:	11000215 	stw	r4,8(r2)
 2000c38:	9009883a 	mov	r4,r18
 2000c3c:	20037280 	call	2003728 <__malloc_unlock>
 2000c40:	80800204 	addi	r2,r16,8
 2000c44:	003f6c06 	br	20009f8 <_malloc_r+0xb8>
 2000c48:	8085883a 	add	r2,r16,r2
 2000c4c:	10c00117 	ldw	r3,4(r2)
 2000c50:	9009883a 	mov	r4,r18
 2000c54:	18c00054 	ori	r3,r3,1
 2000c58:	10c00115 	stw	r3,4(r2)
 2000c5c:	20037280 	call	2003728 <__malloc_unlock>
 2000c60:	80800204 	addi	r2,r16,8
 2000c64:	003f6406 	br	20009f8 <_malloc_r+0xb8>
 2000c68:	9c000217 	ldw	r16,8(r19)
 2000c6c:	00bfff04 	movi	r2,-4
 2000c70:	85400117 	ldw	r21,4(r16)
 2000c74:	a8aa703a 	and	r21,r21,r2
 2000c78:	ac400336 	bltu	r21,r17,2000c88 <_malloc_r+0x348>
 2000c7c:	ac45c83a 	sub	r2,r21,r17
 2000c80:	00c003c4 	movi	r3,15
 2000c84:	18805316 	blt	r3,r2,2000dd4 <_malloc_r+0x494>
 2000c88:	d5e6a317 	ldw	r23,-25972(gp)
 2000c8c:	d0e00217 	ldw	r3,-32760(gp)
 2000c90:	00bfffc4 	movi	r2,-1
 2000c94:	8579883a 	add	fp,r16,r21
 2000c98:	8def883a 	add	r23,r17,r23
 2000c9c:	1880d226 	beq	r3,r2,2000fe8 <_malloc_r+0x6a8>
 2000ca0:	bdc403c4 	addi	r23,r23,4111
 2000ca4:	00bc0004 	movi	r2,-4096
 2000ca8:	b8ae703a 	and	r23,r23,r2
 2000cac:	9009883a 	mov	r4,r18
 2000cb0:	b80b883a 	mov	r5,r23
 2000cb4:	2001a840 	call	2001a84 <_sbrk_r>
 2000cb8:	1029883a 	mov	r20,r2
 2000cbc:	00bfffc4 	movi	r2,-1
 2000cc0:	a080d126 	beq	r20,r2,2001008 <_malloc_r+0x6c8>
 2000cc4:	a7009f36 	bltu	r20,fp,2000f44 <_malloc_r+0x604>
 2000cc8:	05808074 	movhi	r22,513
 2000ccc:	b5a28b04 	addi	r22,r22,-30164
 2000cd0:	b0800017 	ldw	r2,0(r22)
 2000cd4:	b885883a 	add	r2,r23,r2
 2000cd8:	b0800015 	stw	r2,0(r22)
 2000cdc:	e500cf26 	beq	fp,r20,200101c <_malloc_r+0x6dc>
 2000ce0:	d1200217 	ldw	r4,-32760(gp)
 2000ce4:	00ffffc4 	movi	r3,-1
 2000ce8:	20c0e026 	beq	r4,r3,200106c <_malloc_r+0x72c>
 2000cec:	a739c83a 	sub	fp,r20,fp
 2000cf0:	1705883a 	add	r2,r2,fp
 2000cf4:	b0800015 	stw	r2,0(r22)
 2000cf8:	a08001cc 	andi	r2,r20,7
 2000cfc:	1000a526 	beq	r2,zero,2000f94 <_malloc_r+0x654>
 2000d00:	a0a9c83a 	sub	r20,r20,r2
 2000d04:	00c40204 	movi	r3,4104
 2000d08:	a5000204 	addi	r20,r20,8
 2000d0c:	1885c83a 	sub	r2,r3,r2
 2000d10:	a5c7883a 	add	r3,r20,r23
 2000d14:	18c3ffcc 	andi	r3,r3,4095
 2000d18:	10efc83a 	sub	r23,r2,r3
 2000d1c:	9009883a 	mov	r4,r18
 2000d20:	b80b883a 	mov	r5,r23
 2000d24:	2001a840 	call	2001a84 <_sbrk_r>
 2000d28:	00ffffc4 	movi	r3,-1
 2000d2c:	10c0cc26 	beq	r2,r3,2001060 <_malloc_r+0x720>
 2000d30:	1505c83a 	sub	r2,r2,r20
 2000d34:	b887883a 	add	r3,r23,r2
 2000d38:	18c00054 	ori	r3,r3,1
 2000d3c:	b0800017 	ldw	r2,0(r22)
 2000d40:	9d000215 	stw	r20,8(r19)
 2000d44:	a0c00115 	stw	r3,4(r20)
 2000d48:	b885883a 	add	r2,r23,r2
 2000d4c:	b0800015 	stw	r2,0(r22)
 2000d50:	84c00e26 	beq	r16,r19,2000d8c <_malloc_r+0x44c>
 2000d54:	00c003c4 	movi	r3,15
 2000d58:	1d40902e 	bgeu	r3,r21,2000f9c <_malloc_r+0x65c>
 2000d5c:	ad7ffd04 	addi	r21,r21,-12
 2000d60:	013ffe04 	movi	r4,-8
 2000d64:	a908703a 	and	r4,r21,r4
 2000d68:	810b883a 	add	r5,r16,r4
 2000d6c:	01800144 	movi	r6,5
 2000d70:	29800115 	stw	r6,4(r5)
 2000d74:	29800215 	stw	r6,8(r5)
 2000d78:	81400117 	ldw	r5,4(r16)
 2000d7c:	2940004c 	andi	r5,r5,1
 2000d80:	214ab03a 	or	r5,r4,r5
 2000d84:	81400115 	stw	r5,4(r16)
 2000d88:	1900ae36 	bltu	r3,r4,2001044 <_malloc_r+0x704>
 2000d8c:	d0e6a217 	ldw	r3,-25976(gp)
 2000d90:	1880012e 	bgeu	r3,r2,2000d98 <_malloc_r+0x458>
 2000d94:	d0a6a215 	stw	r2,-25976(gp)
 2000d98:	d0e6a117 	ldw	r3,-25980(gp)
 2000d9c:	9c000217 	ldw	r16,8(r19)
 2000da0:	1880012e 	bgeu	r3,r2,2000da8 <_malloc_r+0x468>
 2000da4:	d0a6a115 	stw	r2,-25980(gp)
 2000da8:	80c00117 	ldw	r3,4(r16)
 2000dac:	00bfff04 	movi	r2,-4
 2000db0:	1886703a 	and	r3,r3,r2
 2000db4:	1c45c83a 	sub	r2,r3,r17
 2000db8:	1c400236 	bltu	r3,r17,2000dc4 <_malloc_r+0x484>
 2000dbc:	00c003c4 	movi	r3,15
 2000dc0:	18800416 	blt	r3,r2,2000dd4 <_malloc_r+0x494>
 2000dc4:	9009883a 	mov	r4,r18
 2000dc8:	20037280 	call	2003728 <__malloc_unlock>
 2000dcc:	0005883a 	mov	r2,zero
 2000dd0:	003f0906 	br	20009f8 <_malloc_r+0xb8>
 2000dd4:	88c00054 	ori	r3,r17,1
 2000dd8:	10800054 	ori	r2,r2,1
 2000ddc:	80c00115 	stw	r3,4(r16)
 2000de0:	8463883a 	add	r17,r16,r17
 2000de4:	88800115 	stw	r2,4(r17)
 2000de8:	9009883a 	mov	r4,r18
 2000dec:	9c400215 	stw	r17,8(r19)
 2000df0:	20037280 	call	2003728 <__malloc_unlock>
 2000df4:	80800204 	addi	r2,r16,8
 2000df8:	003eff06 	br	20009f8 <_malloc_r+0xb8>
 2000dfc:	00800504 	movi	r2,20
 2000e00:	1100492e 	bgeu	r2,r4,2000f28 <_malloc_r+0x5e8>
 2000e04:	00801504 	movi	r2,84
 2000e08:	11005c36 	bltu	r2,r4,2000f7c <_malloc_r+0x63c>
 2000e0c:	8808d33a 	srli	r4,r17,12
 2000e10:	21001b84 	addi	r4,r4,110
 2000e14:	210b883a 	add	r5,r4,r4
 2000e18:	003f1006 	br	2000a5c <_malloc_r+0x11c>
 2000e1c:	1006d27a 	srli	r3,r2,9
 2000e20:	01400104 	movi	r5,4
 2000e24:	28c0432e 	bgeu	r5,r3,2000f34 <_malloc_r+0x5f4>
 2000e28:	01400504 	movi	r5,20
 2000e2c:	28c07036 	bltu	r5,r3,2000ff0 <_malloc_r+0x6b0>
 2000e30:	194016c4 	addi	r5,r3,91
 2000e34:	294d883a 	add	r6,r5,r5
 2000e38:	318d883a 	add	r6,r6,r6
 2000e3c:	318d883a 	add	r6,r6,r6
 2000e40:	998d883a 	add	r6,r19,r6
 2000e44:	30c00217 	ldw	r3,8(r6)
 2000e48:	01c08034 	movhi	r7,512
 2000e4c:	39d65c04 	addi	r7,r7,22896
 2000e50:	19805726 	beq	r3,r6,2000fb0 <_malloc_r+0x670>
 2000e54:	01ffff04 	movi	r7,-4
 2000e58:	19400117 	ldw	r5,4(r3)
 2000e5c:	29ca703a 	and	r5,r5,r7
 2000e60:	1140022e 	bgeu	r2,r5,2000e6c <_malloc_r+0x52c>
 2000e64:	18c00217 	ldw	r3,8(r3)
 2000e68:	30fffb1e 	bne	r6,r3,2000e58 <_malloc_r+0x518>
 2000e6c:	19400317 	ldw	r5,12(r3)
 2000e70:	98800117 	ldw	r2,4(r19)
 2000e74:	81400315 	stw	r5,12(r16)
 2000e78:	80c00215 	stw	r3,8(r16)
 2000e7c:	2c000215 	stw	r16,8(r5)
 2000e80:	1c000315 	stw	r16,12(r3)
 2000e84:	003f2b06 	br	2000b34 <_malloc_r+0x1f4>
 2000e88:	8445883a 	add	r2,r16,r17
 2000e8c:	8c400054 	ori	r17,r17,1
 2000e90:	18800515 	stw	r2,20(r3)
 2000e94:	18800415 	stw	r2,16(r3)
 2000e98:	29000054 	ori	r4,r5,1
 2000e9c:	1147883a 	add	r3,r2,r5
 2000ea0:	84400115 	stw	r17,4(r16)
 2000ea4:	11000115 	stw	r4,4(r2)
 2000ea8:	12400315 	stw	r9,12(r2)
 2000eac:	12400215 	stw	r9,8(r2)
 2000eb0:	19400015 	stw	r5,0(r3)
 2000eb4:	9009883a 	mov	r4,r18
 2000eb8:	20037280 	call	2003728 <__malloc_unlock>
 2000ebc:	80800204 	addi	r2,r16,8
 2000ec0:	003ecd06 	br	20009f8 <_malloc_r+0xb8>
 2000ec4:	18800117 	ldw	r2,4(r3)
 2000ec8:	003f1a06 	br	2000b34 <_malloc_r+0x1f4>
 2000ecc:	5ac00044 	addi	r11,r11,1
 2000ed0:	588000cc 	andi	r2,r11,3
 2000ed4:	52800204 	addi	r10,r10,8
 2000ed8:	103f2e1e 	bne	r2,zero,2000b94 <_malloc_r+0x254>
 2000edc:	20c000cc 	andi	r3,r4,3
 2000ee0:	60bffe04 	addi	r2,r12,-8
 2000ee4:	18006f26 	beq	r3,zero,20010a4 <_malloc_r+0x764>
 2000ee8:	63000017 	ldw	r12,0(r12)
 2000eec:	213fffc4 	addi	r4,r4,-1
 2000ef0:	60bffa26 	beq	r12,r2,2000edc <_malloc_r+0x59c>
 2000ef4:	98800117 	ldw	r2,4(r19)
 2000ef8:	294b883a 	add	r5,r5,r5
 2000efc:	117f5a36 	bltu	r2,r5,2000c68 <_malloc_r+0x328>
 2000f00:	283f5926 	beq	r5,zero,2000c68 <_malloc_r+0x328>
 2000f04:	1146703a 	and	r3,r2,r5
 2000f08:	18001626 	beq	r3,zero,2000f64 <_malloc_r+0x624>
 2000f0c:	5809883a 	mov	r4,r11
 2000f10:	003f1a06 	br	2000b7c <_malloc_r+0x23c>
 2000f14:	80800204 	addi	r2,r16,8
 2000f18:	84000517 	ldw	r16,20(r16)
 2000f1c:	143ea81e 	bne	r2,r16,20009c0 <_malloc_r+0x80>
 2000f20:	21000084 	addi	r4,r4,2
 2000f24:	003ee306 	br	2000ab4 <_malloc_r+0x174>
 2000f28:	210016c4 	addi	r4,r4,91
 2000f2c:	210b883a 	add	r5,r4,r4
 2000f30:	003eca06 	br	2000a5c <_malloc_r+0x11c>
 2000f34:	100ad1ba 	srli	r5,r2,6
 2000f38:	29400e04 	addi	r5,r5,56
 2000f3c:	294d883a 	add	r6,r5,r5
 2000f40:	003fbd06 	br	2000e38 <_malloc_r+0x4f8>
 2000f44:	84ff6026 	beq	r16,r19,2000cc8 <_malloc_r+0x388>
 2000f48:	00808034 	movhi	r2,512
 2000f4c:	10965c04 	addi	r2,r2,22896
 2000f50:	14000217 	ldw	r16,8(r2)
 2000f54:	00bfff04 	movi	r2,-4
 2000f58:	80c00117 	ldw	r3,4(r16)
 2000f5c:	1886703a 	and	r3,r3,r2
 2000f60:	003f9406 	br	2000db4 <_malloc_r+0x474>
 2000f64:	294b883a 	add	r5,r5,r5
 2000f68:	1146703a 	and	r3,r2,r5
 2000f6c:	5ac00104 	addi	r11,r11,4
 2000f70:	183ffc26 	beq	r3,zero,2000f64 <_malloc_r+0x624>
 2000f74:	5809883a 	mov	r4,r11
 2000f78:	003f0006 	br	2000b7c <_malloc_r+0x23c>
 2000f7c:	00805504 	movi	r2,340
 2000f80:	11001336 	bltu	r2,r4,2000fd0 <_malloc_r+0x690>
 2000f84:	8808d3fa 	srli	r4,r17,15
 2000f88:	21001dc4 	addi	r4,r4,119
 2000f8c:	210b883a 	add	r5,r4,r4
 2000f90:	003eb206 	br	2000a5c <_malloc_r+0x11c>
 2000f94:	00840004 	movi	r2,4096
 2000f98:	003f5d06 	br	2000d10 <_malloc_r+0x3d0>
 2000f9c:	00800044 	movi	r2,1
 2000fa0:	a0800115 	stw	r2,4(r20)
 2000fa4:	a021883a 	mov	r16,r20
 2000fa8:	0007883a 	mov	r3,zero
 2000fac:	003f8106 	br	2000db4 <_malloc_r+0x474>
 2000fb0:	280bd0ba 	srai	r5,r5,2
 2000fb4:	01800044 	movi	r6,1
 2000fb8:	38800117 	ldw	r2,4(r7)
 2000fbc:	314c983a 	sll	r6,r6,r5
 2000fc0:	180b883a 	mov	r5,r3
 2000fc4:	3084b03a 	or	r2,r6,r2
 2000fc8:	38800115 	stw	r2,4(r7)
 2000fcc:	003fa906 	br	2000e74 <_malloc_r+0x534>
 2000fd0:	00815504 	movi	r2,1364
 2000fd4:	11001836 	bltu	r2,r4,2001038 <_malloc_r+0x6f8>
 2000fd8:	8808d4ba 	srli	r4,r17,18
 2000fdc:	21001f04 	addi	r4,r4,124
 2000fe0:	210b883a 	add	r5,r4,r4
 2000fe4:	003e9d06 	br	2000a5c <_malloc_r+0x11c>
 2000fe8:	bdc00404 	addi	r23,r23,16
 2000fec:	003f2f06 	br	2000cac <_malloc_r+0x36c>
 2000ff0:	01401504 	movi	r5,84
 2000ff4:	28c01f36 	bltu	r5,r3,2001074 <_malloc_r+0x734>
 2000ff8:	100ad33a 	srli	r5,r2,12
 2000ffc:	29401b84 	addi	r5,r5,110
 2001000:	294d883a 	add	r6,r5,r5
 2001004:	003f8c06 	br	2000e38 <_malloc_r+0x4f8>
 2001008:	9c000217 	ldw	r16,8(r19)
 200100c:	00bfff04 	movi	r2,-4
 2001010:	80c00117 	ldw	r3,4(r16)
 2001014:	1886703a 	and	r3,r3,r2
 2001018:	003f6606 	br	2000db4 <_malloc_r+0x474>
 200101c:	e0c3ffcc 	andi	r3,fp,4095
 2001020:	183f2f1e 	bne	r3,zero,2000ce0 <_malloc_r+0x3a0>
 2001024:	98c00217 	ldw	r3,8(r19)
 2001028:	bd49883a 	add	r4,r23,r21
 200102c:	21000054 	ori	r4,r4,1
 2001030:	19000115 	stw	r4,4(r3)
 2001034:	003f5506 	br	2000d8c <_malloc_r+0x44c>
 2001038:	01403f04 	movi	r5,252
 200103c:	01001f84 	movi	r4,126
 2001040:	003e8606 	br	2000a5c <_malloc_r+0x11c>
 2001044:	9009883a 	mov	r4,r18
 2001048:	81400204 	addi	r5,r16,8
 200104c:	200229c0 	call	200229c <_free_r>
 2001050:	00808074 	movhi	r2,513
 2001054:	10a28b04 	addi	r2,r2,-30164
 2001058:	10800017 	ldw	r2,0(r2)
 200105c:	003f4b06 	br	2000d8c <_malloc_r+0x44c>
 2001060:	00c00044 	movi	r3,1
 2001064:	002f883a 	mov	r23,zero
 2001068:	003f3406 	br	2000d3c <_malloc_r+0x3fc>
 200106c:	d5200215 	stw	r20,-32760(gp)
 2001070:	003f2106 	br	2000cf8 <_malloc_r+0x3b8>
 2001074:	01405504 	movi	r5,340
 2001078:	28c00436 	bltu	r5,r3,200108c <_malloc_r+0x74c>
 200107c:	100ad3fa 	srli	r5,r2,15
 2001080:	29401dc4 	addi	r5,r5,119
 2001084:	294d883a 	add	r6,r5,r5
 2001088:	003f6b06 	br	2000e38 <_malloc_r+0x4f8>
 200108c:	01415504 	movi	r5,1364
 2001090:	28c00936 	bltu	r5,r3,20010b8 <_malloc_r+0x778>
 2001094:	100ad4ba 	srli	r5,r2,18
 2001098:	29401f04 	addi	r5,r5,124
 200109c:	294d883a 	add	r6,r5,r5
 20010a0:	003f6506 	br	2000e38 <_malloc_r+0x4f8>
 20010a4:	98800117 	ldw	r2,4(r19)
 20010a8:	0146303a 	nor	r3,zero,r5
 20010ac:	1884703a 	and	r2,r3,r2
 20010b0:	98800115 	stw	r2,4(r19)
 20010b4:	003f9006 	br	2000ef8 <_malloc_r+0x5b8>
 20010b8:	01803f04 	movi	r6,252
 20010bc:	01401f84 	movi	r5,126
 20010c0:	003f5d06 	br	2000e38 <_malloc_r+0x4f8>

020010c4 <memchr>:
 20010c4:	008000c4 	movi	r2,3
 20010c8:	29403fcc 	andi	r5,r5,255
 20010cc:	1180282e 	bgeu	r2,r6,2001170 <memchr+0xac>
 20010d0:	2086703a 	and	r3,r4,r2
 20010d4:	1800351e 	bne	r3,zero,20011ac <memchr+0xe8>
 20010d8:	2816923a 	slli	r11,r5,8
 20010dc:	2093883a 	add	r9,r4,r2
 20010e0:	22000084 	addi	r8,r4,2
 20010e4:	5957883a 	add	r11,r11,r5
 20010e8:	5816923a 	slli	r11,r11,8
 20010ec:	20c00044 	addi	r3,r4,1
 20010f0:	037fbff4 	movhi	r13,65279
 20010f4:	6b7fbfc4 	addi	r13,r13,-257
 20010f8:	5957883a 	add	r11,r11,r5
 20010fc:	5816923a 	slli	r11,r11,8
 2001100:	03202074 	movhi	r12,32897
 2001104:	63202004 	addi	r12,r12,-32640
 2001108:	101d883a 	mov	r14,r2
 200110c:	5957883a 	add	r11,r11,r5
 2001110:	21c00017 	ldw	r7,0(r4)
 2001114:	31bfff04 	addi	r6,r6,-4
 2001118:	1805883a 	mov	r2,r3
 200111c:	3acef03a 	xor	r7,r7,r11
 2001120:	3b55883a 	add	r10,r7,r13
 2001124:	01ce303a 	nor	r7,zero,r7
 2001128:	51ce703a 	and	r7,r10,r7
 200112c:	3b0e703a 	and	r7,r7,r12
 2001130:	38000a26 	beq	r7,zero,200115c <memchr+0x98>
 2001134:	21c00003 	ldbu	r7,0(r4)
 2001138:	39401e26 	beq	r7,r5,20011b4 <memchr+0xf0>
 200113c:	19c00003 	ldbu	r7,0(r3)
 2001140:	39401926 	beq	r7,r5,20011a8 <memchr+0xe4>
 2001144:	41c00003 	ldbu	r7,0(r8)
 2001148:	4005883a 	mov	r2,r8
 200114c:	39401626 	beq	r7,r5,20011a8 <memchr+0xe4>
 2001150:	49c00003 	ldbu	r7,0(r9)
 2001154:	4805883a 	mov	r2,r9
 2001158:	39401326 	beq	r7,r5,20011a8 <memchr+0xe4>
 200115c:	21000104 	addi	r4,r4,4
 2001160:	4a400104 	addi	r9,r9,4
 2001164:	42000104 	addi	r8,r8,4
 2001168:	18c00104 	addi	r3,r3,4
 200116c:	71bfe836 	bltu	r14,r6,2001110 <memchr+0x4c>
 2001170:	2005883a 	mov	r2,r4
 2001174:	30000a26 	beq	r6,zero,20011a0 <memchr+0xdc>
 2001178:	10c00003 	ldbu	r3,0(r2)
 200117c:	19400a26 	beq	r3,r5,20011a8 <memchr+0xe4>
 2001180:	10c00044 	addi	r3,r2,1
 2001184:	118d883a 	add	r6,r2,r6
 2001188:	00000306 	br	2001198 <memchr+0xd4>
 200118c:	11000003 	ldbu	r4,0(r2)
 2001190:	18c00044 	addi	r3,r3,1
 2001194:	21400426 	beq	r4,r5,20011a8 <memchr+0xe4>
 2001198:	1805883a 	mov	r2,r3
 200119c:	19bffb1e 	bne	r3,r6,200118c <memchr+0xc8>
 20011a0:	0005883a 	mov	r2,zero
 20011a4:	f800283a 	ret
 20011a8:	f800283a 	ret
 20011ac:	2005883a 	mov	r2,r4
 20011b0:	003ff106 	br	2001178 <memchr+0xb4>
 20011b4:	2005883a 	mov	r2,r4
 20011b8:	f800283a 	ret

020011bc <memcpy>:
 20011bc:	defffb04 	addi	sp,sp,-20
 20011c0:	dc000015 	stw	r16,0(sp)
 20011c4:	dfc00415 	stw	ra,16(sp)
 20011c8:	dcc00315 	stw	r19,12(sp)
 20011cc:	dc800215 	stw	r18,8(sp)
 20011d0:	dc400115 	stw	r17,4(sp)
 20011d4:	00c003c4 	movi	r3,15
 20011d8:	2021883a 	mov	r16,r4
 20011dc:	3005883a 	mov	r2,r6
 20011e0:	1980032e 	bgeu	r3,r6,20011f0 <memcpy+0x34>
 20011e4:	2906b03a 	or	r3,r5,r4
 20011e8:	18c000cc 	andi	r3,r3,3
 20011ec:	18001026 	beq	r3,zero,2001230 <memcpy+0x74>
 20011f0:	8007883a 	mov	r3,r16
 20011f4:	288f883a 	add	r7,r5,r2
 20011f8:	10000526 	beq	r2,zero,2001210 <memcpy+0x54>
 20011fc:	29800003 	ldbu	r6,0(r5)
 2001200:	18c00044 	addi	r3,r3,1
 2001204:	29400044 	addi	r5,r5,1
 2001208:	19bfffc5 	stb	r6,-1(r3)
 200120c:	29fffb1e 	bne	r5,r7,20011fc <memcpy+0x40>
 2001210:	8005883a 	mov	r2,r16
 2001214:	dfc00417 	ldw	ra,16(sp)
 2001218:	dcc00317 	ldw	r19,12(sp)
 200121c:	dc800217 	ldw	r18,8(sp)
 2001220:	dc400117 	ldw	r17,4(sp)
 2001224:	dc000017 	ldw	r16,0(sp)
 2001228:	dec00504 	addi	sp,sp,20
 200122c:	f800283a 	ret
 2001230:	32bffc04 	addi	r10,r6,-16
 2001234:	5014d13a 	srli	r10,r10,4
 2001238:	20800404 	addi	r2,r4,16
 200123c:	2007883a 	mov	r3,r4
 2001240:	5008913a 	slli	r4,r10,4
 2001244:	280f883a 	mov	r7,r5
 2001248:	1105883a 	add	r2,r2,r4
 200124c:	3a000017 	ldw	r8,0(r7)
 2001250:	18c00404 	addi	r3,r3,16
 2001254:	39c00404 	addi	r7,r7,16
 2001258:	1a3ffc15 	stw	r8,-16(r3)
 200125c:	3a3ffd17 	ldw	r8,-12(r7)
 2001260:	1a3ffd15 	stw	r8,-12(r3)
 2001264:	3a3ffe17 	ldw	r8,-8(r7)
 2001268:	1a3ffe15 	stw	r8,-8(r3)
 200126c:	3a3fff17 	ldw	r8,-4(r7)
 2001270:	1a3fff15 	stw	r8,-4(r3)
 2001274:	18bff51e 	bne	r3,r2,200124c <memcpy+0x90>
 2001278:	52800044 	addi	r10,r10,1
 200127c:	5014913a 	slli	r10,r10,4
 2001280:	308003cc 	andi	r2,r6,15
 2001284:	010000c4 	movi	r4,3
 2001288:	8287883a 	add	r3,r16,r10
 200128c:	2a95883a 	add	r10,r5,r10
 2001290:	2080182e 	bgeu	r4,r2,20012f4 <memcpy+0x138>
 2001294:	147fff04 	addi	r17,r2,-4
 2001298:	8808d0ba 	srli	r4,r17,2
 200129c:	1a400104 	addi	r9,r3,4
 20012a0:	180d883a 	mov	r6,r3
 20012a4:	2105883a 	add	r2,r4,r4
 20012a8:	1085883a 	add	r2,r2,r2
 20012ac:	4893883a 	add	r9,r9,r2
 20012b0:	500f883a 	mov	r7,r10
 20012b4:	3a000017 	ldw	r8,0(r7)
 20012b8:	31800104 	addi	r6,r6,4
 20012bc:	39c00104 	addi	r7,r7,4
 20012c0:	323fff15 	stw	r8,-4(r6)
 20012c4:	327ffb1e 	bne	r6,r9,20012b4 <memcpy+0xf8>
 20012c8:	20800044 	addi	r2,r4,1
 20012cc:	1085883a 	add	r2,r2,r2
 20012d0:	1085883a 	add	r2,r2,r2
 20012d4:	017fff04 	movi	r5,-4
 20012d8:	18a5883a 	add	r18,r3,r2
 20012dc:	50a7883a 	add	r19,r10,r2
 20012e0:	2002e540 	call	2002e54 <__mulsi3>
 20012e4:	1445883a 	add	r2,r2,r17
 20012e8:	980b883a 	mov	r5,r19
 20012ec:	9007883a 	mov	r3,r18
 20012f0:	003fc006 	br	20011f4 <memcpy+0x38>
 20012f4:	500b883a 	mov	r5,r10
 20012f8:	003fbe06 	br	20011f4 <memcpy+0x38>

020012fc <memmove>:
 20012fc:	defffb04 	addi	sp,sp,-20
 2001300:	dc000015 	stw	r16,0(sp)
 2001304:	dfc00415 	stw	ra,16(sp)
 2001308:	dcc00315 	stw	r19,12(sp)
 200130c:	dc800215 	stw	r18,8(sp)
 2001310:	dc400115 	stw	r17,4(sp)
 2001314:	2021883a 	mov	r16,r4
 2001318:	300f883a 	mov	r7,r6
 200131c:	2900122e 	bgeu	r5,r4,2001368 <memmove+0x6c>
 2001320:	2987883a 	add	r3,r5,r6
 2001324:	20c0102e 	bgeu	r4,r3,2001368 <memmove+0x6c>
 2001328:	218b883a 	add	r5,r4,r6
 200132c:	1989c83a 	sub	r4,r3,r6
 2001330:	30000526 	beq	r6,zero,2001348 <memmove+0x4c>
 2001334:	18ffffc4 	addi	r3,r3,-1
 2001338:	18800003 	ldbu	r2,0(r3)
 200133c:	297fffc4 	addi	r5,r5,-1
 2001340:	28800005 	stb	r2,0(r5)
 2001344:	193ffb1e 	bne	r3,r4,2001334 <memmove+0x38>
 2001348:	8005883a 	mov	r2,r16
 200134c:	dfc00417 	ldw	ra,16(sp)
 2001350:	dcc00317 	ldw	r19,12(sp)
 2001354:	dc800217 	ldw	r18,8(sp)
 2001358:	dc400117 	ldw	r17,4(sp)
 200135c:	dc000017 	ldw	r16,0(sp)
 2001360:	dec00504 	addi	sp,sp,20
 2001364:	f800283a 	ret
 2001368:	008003c4 	movi	r2,15
 200136c:	1180422e 	bgeu	r2,r6,2001478 <memmove+0x17c>
 2001370:	2c04b03a 	or	r2,r5,r16
 2001374:	108000cc 	andi	r2,r2,3
 2001378:	10003f1e 	bne	r2,zero,2001478 <memmove+0x17c>
 200137c:	32bffc04 	addi	r10,r6,-16
 2001380:	5014d13a 	srli	r10,r10,4
 2001384:	81000404 	addi	r4,r16,16
 2001388:	8007883a 	mov	r3,r16
 200138c:	5004913a 	slli	r2,r10,4
 2001390:	280f883a 	mov	r7,r5
 2001394:	2089883a 	add	r4,r4,r2
 2001398:	38800017 	ldw	r2,0(r7)
 200139c:	18c00404 	addi	r3,r3,16
 20013a0:	39c00404 	addi	r7,r7,16
 20013a4:	18bffc15 	stw	r2,-16(r3)
 20013a8:	38bffd17 	ldw	r2,-12(r7)
 20013ac:	18bffd15 	stw	r2,-12(r3)
 20013b0:	38bffe17 	ldw	r2,-8(r7)
 20013b4:	18bffe15 	stw	r2,-8(r3)
 20013b8:	38bfff17 	ldw	r2,-4(r7)
 20013bc:	18bfff15 	stw	r2,-4(r3)
 20013c0:	193ff51e 	bne	r3,r4,2001398 <memmove+0x9c>
 20013c4:	52800044 	addi	r10,r10,1
 20013c8:	5014913a 	slli	r10,r10,4
 20013cc:	31c003cc 	andi	r7,r6,15
 20013d0:	008000c4 	movi	r2,3
 20013d4:	8287883a 	add	r3,r16,r10
 20013d8:	2a95883a 	add	r10,r5,r10
 20013dc:	11c0282e 	bgeu	r2,r7,2001480 <memmove+0x184>
 20013e0:	3c7fff04 	addi	r17,r7,-4
 20013e4:	8808d0ba 	srli	r4,r17,2
 20013e8:	1a400104 	addi	r9,r3,4
 20013ec:	180d883a 	mov	r6,r3
 20013f0:	2105883a 	add	r2,r4,r4
 20013f4:	1085883a 	add	r2,r2,r2
 20013f8:	4893883a 	add	r9,r9,r2
 20013fc:	5005883a 	mov	r2,r10
 2001400:	12000017 	ldw	r8,0(r2)
 2001404:	31800104 	addi	r6,r6,4
 2001408:	10800104 	addi	r2,r2,4
 200140c:	323fff15 	stw	r8,-4(r6)
 2001410:	327ffb1e 	bne	r6,r9,2001400 <memmove+0x104>
 2001414:	20800044 	addi	r2,r4,1
 2001418:	1085883a 	add	r2,r2,r2
 200141c:	1085883a 	add	r2,r2,r2
 2001420:	017fff04 	movi	r5,-4
 2001424:	18a5883a 	add	r18,r3,r2
 2001428:	50a7883a 	add	r19,r10,r2
 200142c:	2002e540 	call	2002e54 <__mulsi3>
 2001430:	144f883a 	add	r7,r2,r17
 2001434:	980b883a 	mov	r5,r19
 2001438:	9007883a 	mov	r3,r18
 200143c:	383fc226 	beq	r7,zero,2001348 <memmove+0x4c>
 2001440:	19cf883a 	add	r7,r3,r7
 2001444:	29800003 	ldbu	r6,0(r5)
 2001448:	18c00044 	addi	r3,r3,1
 200144c:	29400044 	addi	r5,r5,1
 2001450:	19bfffc5 	stb	r6,-1(r3)
 2001454:	19fffb1e 	bne	r3,r7,2001444 <memmove+0x148>
 2001458:	8005883a 	mov	r2,r16
 200145c:	dfc00417 	ldw	ra,16(sp)
 2001460:	dcc00317 	ldw	r19,12(sp)
 2001464:	dc800217 	ldw	r18,8(sp)
 2001468:	dc400117 	ldw	r17,4(sp)
 200146c:	dc000017 	ldw	r16,0(sp)
 2001470:	dec00504 	addi	sp,sp,20
 2001474:	f800283a 	ret
 2001478:	8007883a 	mov	r3,r16
 200147c:	003fef06 	br	200143c <memmove+0x140>
 2001480:	500b883a 	mov	r5,r10
 2001484:	003fed06 	br	200143c <memmove+0x140>

02001488 <_realloc_r>:
 2001488:	defff504 	addi	sp,sp,-44
 200148c:	dd400615 	stw	r21,24(sp)
 2001490:	dc800315 	stw	r18,12(sp)
 2001494:	dc000115 	stw	r16,4(sp)
 2001498:	dfc00a15 	stw	ra,40(sp)
 200149c:	df000915 	stw	fp,36(sp)
 20014a0:	ddc00815 	stw	r23,32(sp)
 20014a4:	dd800715 	stw	r22,28(sp)
 20014a8:	dd000515 	stw	r20,20(sp)
 20014ac:	dcc00415 	stw	r19,16(sp)
 20014b0:	dc400215 	stw	r17,8(sp)
 20014b4:	2821883a 	mov	r16,r5
 20014b8:	202b883a 	mov	r21,r4
 20014bc:	3025883a 	mov	r18,r6
 20014c0:	28009626 	beq	r5,zero,200171c <_realloc_r+0x294>
 20014c4:	20037080 	call	2003708 <__malloc_lock>
 20014c8:	80bfff17 	ldw	r2,-4(r16)
 20014cc:	04ffff04 	movi	r19,-4
 20014d0:	90c002c4 	addi	r3,r18,11
 20014d4:	01000584 	movi	r4,22
 20014d8:	85bffe04 	addi	r22,r16,-8
 20014dc:	14e6703a 	and	r19,r2,r19
 20014e0:	20c0372e 	bgeu	r4,r3,20015c0 <_realloc_r+0x138>
 20014e4:	047ffe04 	movi	r17,-8
 20014e8:	1c62703a 	and	r17,r3,r17
 20014ec:	8807883a 	mov	r3,r17
 20014f0:	88005a16 	blt	r17,zero,200165c <_realloc_r+0x1d4>
 20014f4:	8c805936 	bltu	r17,r18,200165c <_realloc_r+0x1d4>
 20014f8:	98c0340e 	bge	r19,r3,20015cc <_realloc_r+0x144>
 20014fc:	07008034 	movhi	fp,512
 2001500:	e7165c04 	addi	fp,fp,22896
 2001504:	e1400217 	ldw	r5,8(fp)
 2001508:	b4c9883a 	add	r4,r22,r19
 200150c:	29009026 	beq	r5,r4,2001750 <_realloc_r+0x2c8>
 2001510:	21800117 	ldw	r6,4(r4)
 2001514:	01ffff84 	movi	r7,-2
 2001518:	31ce703a 	and	r7,r6,r7
 200151c:	21cf883a 	add	r7,r4,r7
 2001520:	39c00117 	ldw	r7,4(r7)
 2001524:	39c0004c 	andi	r7,r7,1
 2001528:	38004326 	beq	r7,zero,2001638 <_realloc_r+0x1b0>
 200152c:	000d883a 	mov	r6,zero
 2001530:	0009883a 	mov	r4,zero
 2001534:	1080004c 	andi	r2,r2,1
 2001538:	10005a1e 	bne	r2,zero,20016a4 <_realloc_r+0x21c>
 200153c:	85fffe17 	ldw	r23,-8(r16)
 2001540:	00bfff04 	movi	r2,-4
 2001544:	b5efc83a 	sub	r23,r22,r23
 2001548:	b9c00117 	ldw	r7,4(r23)
 200154c:	388e703a 	and	r7,r7,r2
 2001550:	3ccf883a 	add	r7,r7,r19
 2001554:	20005226 	beq	r4,zero,20016a0 <_realloc_r+0x218>
 2001558:	31e9883a 	add	r20,r6,r7
 200155c:	2140c726 	beq	r4,r5,200187c <_realloc_r+0x3f4>
 2001560:	a0c04f16 	blt	r20,r3,20016a0 <_realloc_r+0x218>
 2001564:	20800317 	ldw	r2,12(r4)
 2001568:	20c00217 	ldw	r3,8(r4)
 200156c:	99bfff04 	addi	r6,r19,-4
 2001570:	01000904 	movi	r4,36
 2001574:	18800315 	stw	r2,12(r3)
 2001578:	10c00215 	stw	r3,8(r2)
 200157c:	b8c00217 	ldw	r3,8(r23)
 2001580:	b8800317 	ldw	r2,12(r23)
 2001584:	bc800204 	addi	r18,r23,8
 2001588:	18800315 	stw	r2,12(r3)
 200158c:	10c00215 	stw	r3,8(r2)
 2001590:	2180ed36 	bltu	r4,r6,2001948 <_realloc_r+0x4c0>
 2001594:	008004c4 	movi	r2,19
 2001598:	11809b2e 	bgeu	r2,r6,2001808 <_realloc_r+0x380>
 200159c:	80800017 	ldw	r2,0(r16)
 20015a0:	b8800215 	stw	r2,8(r23)
 20015a4:	80800117 	ldw	r2,4(r16)
 20015a8:	b8800315 	stw	r2,12(r23)
 20015ac:	008006c4 	movi	r2,27
 20015b0:	1180f936 	bltu	r2,r6,2001998 <_realloc_r+0x510>
 20015b4:	b8800404 	addi	r2,r23,16
 20015b8:	80c00204 	addi	r3,r16,8
 20015bc:	00009406 	br	2001810 <_realloc_r+0x388>
 20015c0:	00c00404 	movi	r3,16
 20015c4:	1823883a 	mov	r17,r3
 20015c8:	003fca06 	br	20014f4 <_realloc_r+0x6c>
 20015cc:	9829883a 	mov	r20,r19
 20015d0:	a447c83a 	sub	r3,r20,r17
 20015d4:	010003c4 	movi	r4,15
 20015d8:	1080004c 	andi	r2,r2,1
 20015dc:	20c02336 	bltu	r4,r3,200166c <_realloc_r+0x1e4>
 20015e0:	1504b03a 	or	r2,r2,r20
 20015e4:	b0800115 	stw	r2,4(r22)
 20015e8:	b52d883a 	add	r22,r22,r20
 20015ec:	b0800117 	ldw	r2,4(r22)
 20015f0:	10800054 	ori	r2,r2,1
 20015f4:	b0800115 	stw	r2,4(r22)
 20015f8:	a809883a 	mov	r4,r21
 20015fc:	20037280 	call	2003728 <__malloc_unlock>
 2001600:	8025883a 	mov	r18,r16
 2001604:	9005883a 	mov	r2,r18
 2001608:	dfc00a17 	ldw	ra,40(sp)
 200160c:	df000917 	ldw	fp,36(sp)
 2001610:	ddc00817 	ldw	r23,32(sp)
 2001614:	dd800717 	ldw	r22,28(sp)
 2001618:	dd400617 	ldw	r21,24(sp)
 200161c:	dd000517 	ldw	r20,20(sp)
 2001620:	dcc00417 	ldw	r19,16(sp)
 2001624:	dc800317 	ldw	r18,12(sp)
 2001628:	dc400217 	ldw	r17,8(sp)
 200162c:	dc000117 	ldw	r16,4(sp)
 2001630:	dec00b04 	addi	sp,sp,44
 2001634:	f800283a 	ret
 2001638:	01ffff04 	movi	r7,-4
 200163c:	31cc703a 	and	r6,r6,r7
 2001640:	34e9883a 	add	r20,r6,r19
 2001644:	a0ffbb16 	blt	r20,r3,2001534 <_realloc_r+0xac>
 2001648:	20c00317 	ldw	r3,12(r4)
 200164c:	21000217 	ldw	r4,8(r4)
 2001650:	20c00315 	stw	r3,12(r4)
 2001654:	19000215 	stw	r4,8(r3)
 2001658:	003fdd06 	br	20015d0 <_realloc_r+0x148>
 200165c:	00800304 	movi	r2,12
 2001660:	a8800015 	stw	r2,0(r21)
 2001664:	0025883a 	mov	r18,zero
 2001668:	003fe606 	br	2001604 <_realloc_r+0x17c>
 200166c:	1444b03a 	or	r2,r2,r17
 2001670:	b0800115 	stw	r2,4(r22)
 2001674:	b44b883a 	add	r5,r22,r17
 2001678:	18800054 	ori	r2,r3,1
 200167c:	28800115 	stw	r2,4(r5)
 2001680:	28c7883a 	add	r3,r5,r3
 2001684:	18800117 	ldw	r2,4(r3)
 2001688:	a809883a 	mov	r4,r21
 200168c:	29400204 	addi	r5,r5,8
 2001690:	10800054 	ori	r2,r2,1
 2001694:	18800115 	stw	r2,4(r3)
 2001698:	200229c0 	call	200229c <_free_r>
 200169c:	003fd606 	br	20015f8 <_realloc_r+0x170>
 20016a0:	38c0330e 	bge	r7,r3,2001770 <_realloc_r+0x2e8>
 20016a4:	900b883a 	mov	r5,r18
 20016a8:	a809883a 	mov	r4,r21
 20016ac:	20009400 	call	2000940 <_malloc_r>
 20016b0:	1025883a 	mov	r18,r2
 20016b4:	10001626 	beq	r2,zero,2001710 <_realloc_r+0x288>
 20016b8:	80bfff17 	ldw	r2,-4(r16)
 20016bc:	00ffff84 	movi	r3,-2
 20016c0:	913ffe04 	addi	r4,r18,-8
 20016c4:	10c6703a 	and	r3,r2,r3
 20016c8:	b0c7883a 	add	r3,r22,r3
 20016cc:	20c09926 	beq	r4,r3,2001934 <_realloc_r+0x4ac>
 20016d0:	99bfff04 	addi	r6,r19,-4
 20016d4:	00800904 	movi	r2,36
 20016d8:	11806436 	bltu	r2,r6,200186c <_realloc_r+0x3e4>
 20016dc:	00c004c4 	movi	r3,19
 20016e0:	19804036 	bltu	r3,r6,20017e4 <_realloc_r+0x35c>
 20016e4:	9005883a 	mov	r2,r18
 20016e8:	8007883a 	mov	r3,r16
 20016ec:	19000017 	ldw	r4,0(r3)
 20016f0:	11000015 	stw	r4,0(r2)
 20016f4:	19000117 	ldw	r4,4(r3)
 20016f8:	11000115 	stw	r4,4(r2)
 20016fc:	18c00217 	ldw	r3,8(r3)
 2001700:	10c00215 	stw	r3,8(r2)
 2001704:	a809883a 	mov	r4,r21
 2001708:	800b883a 	mov	r5,r16
 200170c:	200229c0 	call	200229c <_free_r>
 2001710:	a809883a 	mov	r4,r21
 2001714:	20037280 	call	2003728 <__malloc_unlock>
 2001718:	003fba06 	br	2001604 <_realloc_r+0x17c>
 200171c:	300b883a 	mov	r5,r6
 2001720:	dfc00a17 	ldw	ra,40(sp)
 2001724:	df000917 	ldw	fp,36(sp)
 2001728:	ddc00817 	ldw	r23,32(sp)
 200172c:	dd800717 	ldw	r22,28(sp)
 2001730:	dd400617 	ldw	r21,24(sp)
 2001734:	dd000517 	ldw	r20,20(sp)
 2001738:	dcc00417 	ldw	r19,16(sp)
 200173c:	dc800317 	ldw	r18,12(sp)
 2001740:	dc400217 	ldw	r17,8(sp)
 2001744:	dc000117 	ldw	r16,4(sp)
 2001748:	dec00b04 	addi	sp,sp,44
 200174c:	20009401 	jmpi	2000940 <_malloc_r>
 2001750:	29800117 	ldw	r6,4(r5)
 2001754:	013fff04 	movi	r4,-4
 2001758:	89c00404 	addi	r7,r17,16
 200175c:	310c703a 	and	r6,r6,r4
 2001760:	34c9883a 	add	r4,r6,r19
 2001764:	21c0340e 	bge	r4,r7,2001838 <_realloc_r+0x3b0>
 2001768:	2809883a 	mov	r4,r5
 200176c:	003f7106 	br	2001534 <_realloc_r+0xac>
 2001770:	b8800317 	ldw	r2,12(r23)
 2001774:	b8c00217 	ldw	r3,8(r23)
 2001778:	99bfff04 	addi	r6,r19,-4
 200177c:	01000904 	movi	r4,36
 2001780:	18800315 	stw	r2,12(r3)
 2001784:	10c00215 	stw	r3,8(r2)
 2001788:	bc800204 	addi	r18,r23,8
 200178c:	21807836 	bltu	r4,r6,2001970 <_realloc_r+0x4e8>
 2001790:	008004c4 	movi	r2,19
 2001794:	1180732e 	bgeu	r2,r6,2001964 <_realloc_r+0x4dc>
 2001798:	80800017 	ldw	r2,0(r16)
 200179c:	b8800215 	stw	r2,8(r23)
 20017a0:	80800117 	ldw	r2,4(r16)
 20017a4:	b8800315 	stw	r2,12(r23)
 20017a8:	008006c4 	movi	r2,27
 20017ac:	11808936 	bltu	r2,r6,20019d4 <_realloc_r+0x54c>
 20017b0:	b8800404 	addi	r2,r23,16
 20017b4:	80c00204 	addi	r3,r16,8
 20017b8:	19000017 	ldw	r4,0(r3)
 20017bc:	9021883a 	mov	r16,r18
 20017c0:	3829883a 	mov	r20,r7
 20017c4:	11000015 	stw	r4,0(r2)
 20017c8:	19000117 	ldw	r4,4(r3)
 20017cc:	b82d883a 	mov	r22,r23
 20017d0:	11000115 	stw	r4,4(r2)
 20017d4:	18c00217 	ldw	r3,8(r3)
 20017d8:	10c00215 	stw	r3,8(r2)
 20017dc:	b8800117 	ldw	r2,4(r23)
 20017e0:	003f7b06 	br	20015d0 <_realloc_r+0x148>
 20017e4:	80c00017 	ldw	r3,0(r16)
 20017e8:	90c00015 	stw	r3,0(r18)
 20017ec:	80c00117 	ldw	r3,4(r16)
 20017f0:	90c00115 	stw	r3,4(r18)
 20017f4:	00c006c4 	movi	r3,27
 20017f8:	19804636 	bltu	r3,r6,2001914 <_realloc_r+0x48c>
 20017fc:	90800204 	addi	r2,r18,8
 2001800:	80c00204 	addi	r3,r16,8
 2001804:	003fb906 	br	20016ec <_realloc_r+0x264>
 2001808:	9005883a 	mov	r2,r18
 200180c:	8007883a 	mov	r3,r16
 2001810:	19000017 	ldw	r4,0(r3)
 2001814:	9021883a 	mov	r16,r18
 2001818:	b82d883a 	mov	r22,r23
 200181c:	11000015 	stw	r4,0(r2)
 2001820:	19000117 	ldw	r4,4(r3)
 2001824:	11000115 	stw	r4,4(r2)
 2001828:	18c00217 	ldw	r3,8(r3)
 200182c:	10c00215 	stw	r3,8(r2)
 2001830:	b8800117 	ldw	r2,4(r23)
 2001834:	003f6606 	br	20015d0 <_realloc_r+0x148>
 2001838:	2445c83a 	sub	r2,r4,r17
 200183c:	b46d883a 	add	r22,r22,r17
 2001840:	10800054 	ori	r2,r2,1
 2001844:	b0800115 	stw	r2,4(r22)
 2001848:	80bfff17 	ldw	r2,-4(r16)
 200184c:	a809883a 	mov	r4,r21
 2001850:	e5800215 	stw	r22,8(fp)
 2001854:	1080004c 	andi	r2,r2,1
 2001858:	88a2b03a 	or	r17,r17,r2
 200185c:	847fff15 	stw	r17,-4(r16)
 2001860:	20037280 	call	2003728 <__malloc_unlock>
 2001864:	8025883a 	mov	r18,r16
 2001868:	003f6606 	br	2001604 <_realloc_r+0x17c>
 200186c:	9009883a 	mov	r4,r18
 2001870:	800b883a 	mov	r5,r16
 2001874:	20012fc0 	call	20012fc <memmove>
 2001878:	003fa206 	br	2001704 <_realloc_r+0x27c>
 200187c:	88800404 	addi	r2,r17,16
 2001880:	a0bf8716 	blt	r20,r2,20016a0 <_realloc_r+0x218>
 2001884:	b8800317 	ldw	r2,12(r23)
 2001888:	b8c00217 	ldw	r3,8(r23)
 200188c:	99bfff04 	addi	r6,r19,-4
 2001890:	01000904 	movi	r4,36
 2001894:	18800315 	stw	r2,12(r3)
 2001898:	10c00215 	stw	r3,8(r2)
 200189c:	bc800204 	addi	r18,r23,8
 20018a0:	21806536 	bltu	r4,r6,2001a38 <_realloc_r+0x5b0>
 20018a4:	008004c4 	movi	r2,19
 20018a8:	1180592e 	bgeu	r2,r6,2001a10 <_realloc_r+0x588>
 20018ac:	80800017 	ldw	r2,0(r16)
 20018b0:	b8800215 	stw	r2,8(r23)
 20018b4:	80800117 	ldw	r2,4(r16)
 20018b8:	b8800315 	stw	r2,12(r23)
 20018bc:	008006c4 	movi	r2,27
 20018c0:	11806136 	bltu	r2,r6,2001a48 <_realloc_r+0x5c0>
 20018c4:	b8800404 	addi	r2,r23,16
 20018c8:	80c00204 	addi	r3,r16,8
 20018cc:	19000017 	ldw	r4,0(r3)
 20018d0:	11000015 	stw	r4,0(r2)
 20018d4:	19000117 	ldw	r4,4(r3)
 20018d8:	11000115 	stw	r4,4(r2)
 20018dc:	18c00217 	ldw	r3,8(r3)
 20018e0:	10c00215 	stw	r3,8(r2)
 20018e4:	a447c83a 	sub	r3,r20,r17
 20018e8:	bc45883a 	add	r2,r23,r17
 20018ec:	18c00054 	ori	r3,r3,1
 20018f0:	10c00115 	stw	r3,4(r2)
 20018f4:	b8c00117 	ldw	r3,4(r23)
 20018f8:	e0800215 	stw	r2,8(fp)
 20018fc:	a809883a 	mov	r4,r21
 2001900:	1880004c 	andi	r2,r3,1
 2001904:	88a2b03a 	or	r17,r17,r2
 2001908:	bc400115 	stw	r17,4(r23)
 200190c:	20037280 	call	2003728 <__malloc_unlock>
 2001910:	003f3c06 	br	2001604 <_realloc_r+0x17c>
 2001914:	80c00217 	ldw	r3,8(r16)
 2001918:	90c00215 	stw	r3,8(r18)
 200191c:	80c00317 	ldw	r3,12(r16)
 2001920:	90c00315 	stw	r3,12(r18)
 2001924:	30802426 	beq	r6,r2,20019b8 <_realloc_r+0x530>
 2001928:	90800404 	addi	r2,r18,16
 200192c:	80c00404 	addi	r3,r16,16
 2001930:	003f6e06 	br	20016ec <_realloc_r+0x264>
 2001934:	953fff17 	ldw	r20,-4(r18)
 2001938:	00ffff04 	movi	r3,-4
 200193c:	a0e8703a 	and	r20,r20,r3
 2001940:	a4e9883a 	add	r20,r20,r19
 2001944:	003f2206 	br	20015d0 <_realloc_r+0x148>
 2001948:	800b883a 	mov	r5,r16
 200194c:	9009883a 	mov	r4,r18
 2001950:	20012fc0 	call	20012fc <memmove>
 2001954:	9021883a 	mov	r16,r18
 2001958:	b8800117 	ldw	r2,4(r23)
 200195c:	b82d883a 	mov	r22,r23
 2001960:	003f1b06 	br	20015d0 <_realloc_r+0x148>
 2001964:	9005883a 	mov	r2,r18
 2001968:	8007883a 	mov	r3,r16
 200196c:	003f9206 	br	20017b8 <_realloc_r+0x330>
 2001970:	800b883a 	mov	r5,r16
 2001974:	9009883a 	mov	r4,r18
 2001978:	d9c00015 	stw	r7,0(sp)
 200197c:	20012fc0 	call	20012fc <memmove>
 2001980:	d9c00017 	ldw	r7,0(sp)
 2001984:	9021883a 	mov	r16,r18
 2001988:	b8800117 	ldw	r2,4(r23)
 200198c:	3829883a 	mov	r20,r7
 2001990:	b82d883a 	mov	r22,r23
 2001994:	003f0e06 	br	20015d0 <_realloc_r+0x148>
 2001998:	80800217 	ldw	r2,8(r16)
 200199c:	b8800415 	stw	r2,16(r23)
 20019a0:	80800317 	ldw	r2,12(r16)
 20019a4:	b8800515 	stw	r2,20(r23)
 20019a8:	31001226 	beq	r6,r4,20019f4 <_realloc_r+0x56c>
 20019ac:	b8800604 	addi	r2,r23,24
 20019b0:	80c00404 	addi	r3,r16,16
 20019b4:	003f9606 	br	2001810 <_realloc_r+0x388>
 20019b8:	81000417 	ldw	r4,16(r16)
 20019bc:	90800604 	addi	r2,r18,24
 20019c0:	80c00604 	addi	r3,r16,24
 20019c4:	91000415 	stw	r4,16(r18)
 20019c8:	81000517 	ldw	r4,20(r16)
 20019cc:	91000515 	stw	r4,20(r18)
 20019d0:	003f4606 	br	20016ec <_realloc_r+0x264>
 20019d4:	80800217 	ldw	r2,8(r16)
 20019d8:	b8800415 	stw	r2,16(r23)
 20019dc:	80800317 	ldw	r2,12(r16)
 20019e0:	b8800515 	stw	r2,20(r23)
 20019e4:	31000d26 	beq	r6,r4,2001a1c <_realloc_r+0x594>
 20019e8:	b8800604 	addi	r2,r23,24
 20019ec:	80c00404 	addi	r3,r16,16
 20019f0:	003f7106 	br	20017b8 <_realloc_r+0x330>
 20019f4:	81000417 	ldw	r4,16(r16)
 20019f8:	b8800804 	addi	r2,r23,32
 20019fc:	80c00604 	addi	r3,r16,24
 2001a00:	b9000615 	stw	r4,24(r23)
 2001a04:	81000517 	ldw	r4,20(r16)
 2001a08:	b9000715 	stw	r4,28(r23)
 2001a0c:	003f8006 	br	2001810 <_realloc_r+0x388>
 2001a10:	9005883a 	mov	r2,r18
 2001a14:	8007883a 	mov	r3,r16
 2001a18:	003fac06 	br	20018cc <_realloc_r+0x444>
 2001a1c:	81000417 	ldw	r4,16(r16)
 2001a20:	b8800804 	addi	r2,r23,32
 2001a24:	80c00604 	addi	r3,r16,24
 2001a28:	b9000615 	stw	r4,24(r23)
 2001a2c:	81000517 	ldw	r4,20(r16)
 2001a30:	b9000715 	stw	r4,28(r23)
 2001a34:	003f6006 	br	20017b8 <_realloc_r+0x330>
 2001a38:	9009883a 	mov	r4,r18
 2001a3c:	800b883a 	mov	r5,r16
 2001a40:	20012fc0 	call	20012fc <memmove>
 2001a44:	003fa706 	br	20018e4 <_realloc_r+0x45c>
 2001a48:	80800217 	ldw	r2,8(r16)
 2001a4c:	b8800415 	stw	r2,16(r23)
 2001a50:	80800317 	ldw	r2,12(r16)
 2001a54:	b8800515 	stw	r2,20(r23)
 2001a58:	31000326 	beq	r6,r4,2001a68 <_realloc_r+0x5e0>
 2001a5c:	b8800604 	addi	r2,r23,24
 2001a60:	80c00404 	addi	r3,r16,16
 2001a64:	003f9906 	br	20018cc <_realloc_r+0x444>
 2001a68:	81000417 	ldw	r4,16(r16)
 2001a6c:	b8800804 	addi	r2,r23,32
 2001a70:	80c00604 	addi	r3,r16,24
 2001a74:	b9000615 	stw	r4,24(r23)
 2001a78:	81000517 	ldw	r4,20(r16)
 2001a7c:	b9000715 	stw	r4,28(r23)
 2001a80:	003f9206 	br	20018cc <_realloc_r+0x444>

02001a84 <_sbrk_r>:
 2001a84:	defffd04 	addi	sp,sp,-12
 2001a88:	dc400115 	stw	r17,4(sp)
 2001a8c:	dc000015 	stw	r16,0(sp)
 2001a90:	2023883a 	mov	r17,r4
 2001a94:	04008074 	movhi	r16,513
 2001a98:	84228404 	addi	r16,r16,-30192
 2001a9c:	2809883a 	mov	r4,r5
 2001aa0:	dfc00215 	stw	ra,8(sp)
 2001aa4:	80000015 	stw	zero,0(r16)
 2001aa8:	200390c0 	call	200390c <sbrk>
 2001aac:	00ffffc4 	movi	r3,-1
 2001ab0:	10c00526 	beq	r2,r3,2001ac8 <_sbrk_r+0x44>
 2001ab4:	dfc00217 	ldw	ra,8(sp)
 2001ab8:	dc400117 	ldw	r17,4(sp)
 2001abc:	dc000017 	ldw	r16,0(sp)
 2001ac0:	dec00304 	addi	sp,sp,12
 2001ac4:	f800283a 	ret
 2001ac8:	80c00017 	ldw	r3,0(r16)
 2001acc:	183ff926 	beq	r3,zero,2001ab4 <_sbrk_r+0x30>
 2001ad0:	88c00015 	stw	r3,0(r17)
 2001ad4:	dfc00217 	ldw	ra,8(sp)
 2001ad8:	dc400117 	ldw	r17,4(sp)
 2001adc:	dc000017 	ldw	r16,0(sp)
 2001ae0:	dec00304 	addi	sp,sp,12
 2001ae4:	f800283a 	ret

02001ae8 <__swsetup_r>:
 2001ae8:	00808034 	movhi	r2,512
 2001aec:	109be104 	addi	r2,r2,28548
 2001af0:	10800017 	ldw	r2,0(r2)
 2001af4:	defffd04 	addi	sp,sp,-12
 2001af8:	dc400115 	stw	r17,4(sp)
 2001afc:	dc000015 	stw	r16,0(sp)
 2001b00:	dfc00215 	stw	ra,8(sp)
 2001b04:	2023883a 	mov	r17,r4
 2001b08:	2821883a 	mov	r16,r5
 2001b0c:	10000226 	beq	r2,zero,2001b18 <__swsetup_r+0x30>
 2001b10:	10c00e17 	ldw	r3,56(r2)
 2001b14:	18003d26 	beq	r3,zero,2001c0c <__swsetup_r+0x124>
 2001b18:	8080030b 	ldhu	r2,12(r16)
 2001b1c:	10c0020c 	andi	r3,r2,8
 2001b20:	18ffffcc 	andi	r3,r3,65535
 2001b24:	18e0001c 	xori	r3,r3,32768
 2001b28:	18e00004 	addi	r3,r3,-32768
 2001b2c:	18001226 	beq	r3,zero,2001b78 <__swsetup_r+0x90>
 2001b30:	80c00417 	ldw	r3,16(r16)
 2001b34:	18001f26 	beq	r3,zero,2001bb4 <__swsetup_r+0xcc>
 2001b38:	1100004c 	andi	r4,r2,1
 2001b3c:	2000261e 	bne	r4,zero,2001bd8 <__swsetup_r+0xf0>
 2001b40:	1080008c 	andi	r2,r2,2
 2001b44:	10bfffcc 	andi	r2,r2,65535
 2001b48:	10a0001c 	xori	r2,r2,32768
 2001b4c:	10a00004 	addi	r2,r2,-32768
 2001b50:	1000311e 	bne	r2,zero,2001c18 <__swsetup_r+0x130>
 2001b54:	80800517 	ldw	r2,20(r16)
 2001b58:	80800215 	stw	r2,8(r16)
 2001b5c:	18002326 	beq	r3,zero,2001bec <__swsetup_r+0x104>
 2001b60:	0005883a 	mov	r2,zero
 2001b64:	dfc00217 	ldw	ra,8(sp)
 2001b68:	dc400117 	ldw	r17,4(sp)
 2001b6c:	dc000017 	ldw	r16,0(sp)
 2001b70:	dec00304 	addi	sp,sp,12
 2001b74:	f800283a 	ret
 2001b78:	10c0040c 	andi	r3,r2,16
 2001b7c:	18ffffcc 	andi	r3,r3,65535
 2001b80:	18e0001c 	xori	r3,r3,32768
 2001b84:	18e00004 	addi	r3,r3,-32768
 2001b88:	18001e26 	beq	r3,zero,2001c04 <__swsetup_r+0x11c>
 2001b8c:	10c0010c 	andi	r3,r2,4
 2001b90:	18ffffcc 	andi	r3,r3,65535
 2001b94:	18e0001c 	xori	r3,r3,32768
 2001b98:	18e00004 	addi	r3,r3,-32768
 2001b9c:	1800211e 	bne	r3,zero,2001c24 <__swsetup_r+0x13c>
 2001ba0:	80c00417 	ldw	r3,16(r16)
 2001ba4:	11400214 	ori	r5,r2,8
 2001ba8:	8140030d 	sth	r5,12(r16)
 2001bac:	2805883a 	mov	r2,r5
 2001bb0:	183fe11e 	bne	r3,zero,2001b38 <__swsetup_r+0x50>
 2001bb4:	1140a00c 	andi	r5,r2,640
 2001bb8:	01008004 	movi	r4,512
 2001bbc:	293fde26 	beq	r5,r4,2001b38 <__swsetup_r+0x50>
 2001bc0:	8809883a 	mov	r4,r17
 2001bc4:	800b883a 	mov	r5,r16
 2001bc8:	20026cc0 	call	20026cc <__smakebuf_r>
 2001bcc:	8080030b 	ldhu	r2,12(r16)
 2001bd0:	80c00417 	ldw	r3,16(r16)
 2001bd4:	003fd806 	br	2001b38 <__swsetup_r+0x50>
 2001bd8:	80800517 	ldw	r2,20(r16)
 2001bdc:	80000215 	stw	zero,8(r16)
 2001be0:	0085c83a 	sub	r2,zero,r2
 2001be4:	80800615 	stw	r2,24(r16)
 2001be8:	183fdd1e 	bne	r3,zero,2001b60 <__swsetup_r+0x78>
 2001bec:	8080030b 	ldhu	r2,12(r16)
 2001bf0:	1080200c 	andi	r2,r2,128
 2001bf4:	10bfffcc 	andi	r2,r2,65535
 2001bf8:	10a0001c 	xori	r2,r2,32768
 2001bfc:	10a00004 	addi	r2,r2,-32768
 2001c00:	103fd826 	beq	r2,zero,2001b64 <__swsetup_r+0x7c>
 2001c04:	00bfffc4 	movi	r2,-1
 2001c08:	003fd606 	br	2001b64 <__swsetup_r+0x7c>
 2001c0c:	1009883a 	mov	r4,r2
 2001c10:	2001f180 	call	2001f18 <__sinit>
 2001c14:	003fc006 	br	2001b18 <__swsetup_r+0x30>
 2001c18:	0005883a 	mov	r2,zero
 2001c1c:	80800215 	stw	r2,8(r16)
 2001c20:	003fce06 	br	2001b5c <__swsetup_r+0x74>
 2001c24:	81400c17 	ldw	r5,48(r16)
 2001c28:	28000626 	beq	r5,zero,2001c44 <__swsetup_r+0x15c>
 2001c2c:	80c01004 	addi	r3,r16,64
 2001c30:	28c00326 	beq	r5,r3,2001c40 <__swsetup_r+0x158>
 2001c34:	8809883a 	mov	r4,r17
 2001c38:	200229c0 	call	200229c <_free_r>
 2001c3c:	8080030b 	ldhu	r2,12(r16)
 2001c40:	80000c15 	stw	zero,48(r16)
 2001c44:	80c00417 	ldw	r3,16(r16)
 2001c48:	013ff6c4 	movi	r4,-37
 2001c4c:	2084703a 	and	r2,r4,r2
 2001c50:	80000115 	stw	zero,4(r16)
 2001c54:	80c00015 	stw	r3,0(r16)
 2001c58:	003fd206 	br	2001ba4 <__swsetup_r+0xbc>

02001c5c <_fflush_r>:
 2001c5c:	defffb04 	addi	sp,sp,-20
 2001c60:	dcc00315 	stw	r19,12(sp)
 2001c64:	dc400115 	stw	r17,4(sp)
 2001c68:	dfc00415 	stw	ra,16(sp)
 2001c6c:	dc800215 	stw	r18,8(sp)
 2001c70:	dc000015 	stw	r16,0(sp)
 2001c74:	2027883a 	mov	r19,r4
 2001c78:	2823883a 	mov	r17,r5
 2001c7c:	20000226 	beq	r4,zero,2001c88 <_fflush_r+0x2c>
 2001c80:	20800e17 	ldw	r2,56(r4)
 2001c84:	10005726 	beq	r2,zero,2001de4 <_fflush_r+0x188>
 2001c88:	8880030b 	ldhu	r2,12(r17)
 2001c8c:	10c0020c 	andi	r3,r2,8
 2001c90:	18ffffcc 	andi	r3,r3,65535
 2001c94:	18e0001c 	xori	r3,r3,32768
 2001c98:	18e00004 	addi	r3,r3,-32768
 2001c9c:	1800311e 	bne	r3,zero,2001d64 <_fflush_r+0x108>
 2001ca0:	89000117 	ldw	r4,4(r17)
 2001ca4:	10c20014 	ori	r3,r2,2048
 2001ca8:	88c0030d 	sth	r3,12(r17)
 2001cac:	180b883a 	mov	r5,r3
 2001cb0:	0100520e 	bge	zero,r4,2001dfc <_fflush_r+0x1a0>
 2001cb4:	88c00a17 	ldw	r3,40(r17)
 2001cb8:	18002226 	beq	r3,zero,2001d44 <_fflush_r+0xe8>
 2001cbc:	1084000c 	andi	r2,r2,4096
 2001cc0:	10bfffcc 	andi	r2,r2,65535
 2001cc4:	10a0001c 	xori	r2,r2,32768
 2001cc8:	10a00004 	addi	r2,r2,-32768
 2001ccc:	10004e26 	beq	r2,zero,2001e08 <_fflush_r+0x1ac>
 2001cd0:	8c001417 	ldw	r16,80(r17)
 2001cd4:	2940010c 	andi	r5,r5,4
 2001cd8:	297fffcc 	andi	r5,r5,65535
 2001cdc:	2960001c 	xori	r5,r5,32768
 2001ce0:	29600004 	addi	r5,r5,-32768
 2001ce4:	28000626 	beq	r5,zero,2001d00 <_fflush_r+0xa4>
 2001ce8:	89000117 	ldw	r4,4(r17)
 2001cec:	88800c17 	ldw	r2,48(r17)
 2001cf0:	8121c83a 	sub	r16,r16,r4
 2001cf4:	10000226 	beq	r2,zero,2001d00 <_fflush_r+0xa4>
 2001cf8:	88800f17 	ldw	r2,60(r17)
 2001cfc:	80a1c83a 	sub	r16,r16,r2
 2001d00:	89400717 	ldw	r5,28(r17)
 2001d04:	9809883a 	mov	r4,r19
 2001d08:	800d883a 	mov	r6,r16
 2001d0c:	000f883a 	mov	r7,zero
 2001d10:	183ee83a 	callr	r3
 2001d14:	8080281e 	bne	r16,r2,2001db8 <_fflush_r+0x15c>
 2001d18:	8880030b 	ldhu	r2,12(r17)
 2001d1c:	88c00417 	ldw	r3,16(r17)
 2001d20:	88000115 	stw	zero,4(r17)
 2001d24:	113dffcc 	andi	r4,r2,63487
 2001d28:	1084000c 	andi	r2,r2,4096
 2001d2c:	10bfffcc 	andi	r2,r2,65535
 2001d30:	10a0001c 	xori	r2,r2,32768
 2001d34:	8900030d 	sth	r4,12(r17)
 2001d38:	88c00015 	stw	r3,0(r17)
 2001d3c:	10a00004 	addi	r2,r2,-32768
 2001d40:	10002c1e 	bne	r2,zero,2001df4 <_fflush_r+0x198>
 2001d44:	0005883a 	mov	r2,zero
 2001d48:	dfc00417 	ldw	ra,16(sp)
 2001d4c:	dcc00317 	ldw	r19,12(sp)
 2001d50:	dc800217 	ldw	r18,8(sp)
 2001d54:	dc400117 	ldw	r17,4(sp)
 2001d58:	dc000017 	ldw	r16,0(sp)
 2001d5c:	dec00504 	addi	sp,sp,20
 2001d60:	f800283a 	ret
 2001d64:	8c800417 	ldw	r18,16(r17)
 2001d68:	903ff626 	beq	r18,zero,2001d44 <_fflush_r+0xe8>
 2001d6c:	8c000017 	ldw	r16,0(r17)
 2001d70:	108000cc 	andi	r2,r2,3
 2001d74:	8c800015 	stw	r18,0(r17)
 2001d78:	84a1c83a 	sub	r16,r16,r18
 2001d7c:	10001b1e 	bne	r2,zero,2001dec <_fflush_r+0x190>
 2001d80:	88800517 	ldw	r2,20(r17)
 2001d84:	88800215 	stw	r2,8(r17)
 2001d88:	04000316 	blt	zero,r16,2001d98 <_fflush_r+0x13c>
 2001d8c:	003fed06 	br	2001d44 <_fflush_r+0xe8>
 2001d90:	90a5883a 	add	r18,r18,r2
 2001d94:	043feb0e 	bge	zero,r16,2001d44 <_fflush_r+0xe8>
 2001d98:	88800917 	ldw	r2,36(r17)
 2001d9c:	89400717 	ldw	r5,28(r17)
 2001da0:	800f883a 	mov	r7,r16
 2001da4:	900d883a 	mov	r6,r18
 2001da8:	9809883a 	mov	r4,r19
 2001dac:	103ee83a 	callr	r2
 2001db0:	80a1c83a 	sub	r16,r16,r2
 2001db4:	00bff616 	blt	zero,r2,2001d90 <_fflush_r+0x134>
 2001db8:	88c0030b 	ldhu	r3,12(r17)
 2001dbc:	00bfffc4 	movi	r2,-1
 2001dc0:	18c01014 	ori	r3,r3,64
 2001dc4:	88c0030d 	sth	r3,12(r17)
 2001dc8:	dfc00417 	ldw	ra,16(sp)
 2001dcc:	dcc00317 	ldw	r19,12(sp)
 2001dd0:	dc800217 	ldw	r18,8(sp)
 2001dd4:	dc400117 	ldw	r17,4(sp)
 2001dd8:	dc000017 	ldw	r16,0(sp)
 2001ddc:	dec00504 	addi	sp,sp,20
 2001de0:	f800283a 	ret
 2001de4:	2001f180 	call	2001f18 <__sinit>
 2001de8:	003fa706 	br	2001c88 <_fflush_r+0x2c>
 2001dec:	0005883a 	mov	r2,zero
 2001df0:	003fe406 	br	2001d84 <_fflush_r+0x128>
 2001df4:	8c001415 	stw	r16,80(r17)
 2001df8:	003fd206 	br	2001d44 <_fflush_r+0xe8>
 2001dfc:	88c00f17 	ldw	r3,60(r17)
 2001e00:	00ffac16 	blt	zero,r3,2001cb4 <_fflush_r+0x58>
 2001e04:	003fcf06 	br	2001d44 <_fflush_r+0xe8>
 2001e08:	89400717 	ldw	r5,28(r17)
 2001e0c:	9809883a 	mov	r4,r19
 2001e10:	000d883a 	mov	r6,zero
 2001e14:	01c00044 	movi	r7,1
 2001e18:	183ee83a 	callr	r3
 2001e1c:	1021883a 	mov	r16,r2
 2001e20:	00bfffc4 	movi	r2,-1
 2001e24:	80800326 	beq	r16,r2,2001e34 <_fflush_r+0x1d8>
 2001e28:	8940030b 	ldhu	r5,12(r17)
 2001e2c:	88c00a17 	ldw	r3,40(r17)
 2001e30:	003fa806 	br	2001cd4 <_fflush_r+0x78>
 2001e34:	98c00017 	ldw	r3,0(r19)
 2001e38:	00800744 	movi	r2,29
 2001e3c:	18bfde1e 	bne	r3,r2,2001db8 <_fflush_r+0x15c>
 2001e40:	003fc006 	br	2001d44 <_fflush_r+0xe8>

02001e44 <fflush>:
 2001e44:	200b883a 	mov	r5,r4
 2001e48:	20000426 	beq	r4,zero,2001e5c <fflush+0x18>
 2001e4c:	00808034 	movhi	r2,512
 2001e50:	109be104 	addi	r2,r2,28548
 2001e54:	11000017 	ldw	r4,0(r2)
 2001e58:	2001c5c1 	jmpi	2001c5c <_fflush_r>
 2001e5c:	00808034 	movhi	r2,512
 2001e60:	109be004 	addi	r2,r2,28544
 2001e64:	11000017 	ldw	r4,0(r2)
 2001e68:	01408034 	movhi	r5,512
 2001e6c:	29471704 	addi	r5,r5,7260
 2001e70:	20026141 	jmpi	2002614 <_fwalk_reent>

02001e74 <__fp_lock>:
 2001e74:	0005883a 	mov	r2,zero
 2001e78:	f800283a 	ret

02001e7c <__fp_unlock>:
 2001e7c:	0005883a 	mov	r2,zero
 2001e80:	f800283a 	ret

02001e84 <_cleanup_r>:
 2001e84:	01408034 	movhi	r5,512
 2001e88:	294b2704 	addi	r5,r5,11420
 2001e8c:	200256c1 	jmpi	200256c <_fwalk>

02001e90 <__sfmoreglue>:
 2001e90:	defffc04 	addi	sp,sp,-16
 2001e94:	dc800215 	stw	r18,8(sp)
 2001e98:	2825883a 	mov	r18,r5
 2001e9c:	dc000015 	stw	r16,0(sp)
 2001ea0:	01401704 	movi	r5,92
 2001ea4:	2021883a 	mov	r16,r4
 2001ea8:	9009883a 	mov	r4,r18
 2001eac:	dfc00315 	stw	ra,12(sp)
 2001eb0:	dc400115 	stw	r17,4(sp)
 2001eb4:	2002e540 	call	2002e54 <__mulsi3>
 2001eb8:	8009883a 	mov	r4,r16
 2001ebc:	11400304 	addi	r5,r2,12
 2001ec0:	1023883a 	mov	r17,r2
 2001ec4:	20009400 	call	2000940 <_malloc_r>
 2001ec8:	1021883a 	mov	r16,r2
 2001ecc:	10000726 	beq	r2,zero,2001eec <__sfmoreglue+0x5c>
 2001ed0:	11000304 	addi	r4,r2,12
 2001ed4:	10000015 	stw	zero,0(r2)
 2001ed8:	14800115 	stw	r18,4(r2)
 2001edc:	11000215 	stw	r4,8(r2)
 2001ee0:	000b883a 	mov	r5,zero
 2001ee4:	880d883a 	mov	r6,r17
 2001ee8:	20028740 	call	2002874 <memset>
 2001eec:	8005883a 	mov	r2,r16
 2001ef0:	dfc00317 	ldw	ra,12(sp)
 2001ef4:	dc800217 	ldw	r18,8(sp)
 2001ef8:	dc400117 	ldw	r17,4(sp)
 2001efc:	dc000017 	ldw	r16,0(sp)
 2001f00:	dec00404 	addi	sp,sp,16
 2001f04:	f800283a 	ret

02001f08 <_cleanup>:
 2001f08:	00808034 	movhi	r2,512
 2001f0c:	109be004 	addi	r2,r2,28544
 2001f10:	11000017 	ldw	r4,0(r2)
 2001f14:	2001e841 	jmpi	2001e84 <_cleanup_r>

02001f18 <__sinit>:
 2001f18:	20800e17 	ldw	r2,56(r4)
 2001f1c:	1000401e 	bne	r2,zero,2002020 <__sinit+0x108>
 2001f20:	21400117 	ldw	r5,4(r4)
 2001f24:	01808034 	movhi	r6,512
 2001f28:	3187a104 	addi	r6,r6,7812
 2001f2c:	20c00217 	ldw	r3,8(r4)
 2001f30:	21800f15 	stw	r6,60(r4)
 2001f34:	2080bb04 	addi	r2,r4,748
 2001f38:	02400044 	movi	r9,1
 2001f3c:	018000c4 	movi	r6,3
 2001f40:	2180b915 	stw	r6,740(r4)
 2001f44:	2080ba15 	stw	r2,744(r4)
 2001f48:	22400e15 	stw	r9,56(r4)
 2001f4c:	20800317 	ldw	r2,12(r4)
 2001f50:	2000b815 	stw	zero,736(r4)
 2001f54:	02008034 	movhi	r8,512
 2001f58:	420a5404 	addi	r8,r8,10576
 2001f5c:	01c08034 	movhi	r7,512
 2001f60:	39ca6904 	addi	r7,r7,10660
 2001f64:	01808034 	movhi	r6,512
 2001f68:	318a8b04 	addi	r6,r6,10796
 2001f6c:	01008034 	movhi	r4,512
 2001f70:	210aa204 	addi	r4,r4,10888
 2001f74:	02800104 	movi	r10,4
 2001f78:	28000015 	stw	zero,0(r5)
 2001f7c:	28000115 	stw	zero,4(r5)
 2001f80:	28000215 	stw	zero,8(r5)
 2001f84:	2a80030d 	sth	r10,12(r5)
 2001f88:	2800038d 	sth	zero,14(r5)
 2001f8c:	28000415 	stw	zero,16(r5)
 2001f90:	28000515 	stw	zero,20(r5)
 2001f94:	28000615 	stw	zero,24(r5)
 2001f98:	29400715 	stw	r5,28(r5)
 2001f9c:	2a000815 	stw	r8,32(r5)
 2001fa0:	29c00915 	stw	r7,36(r5)
 2001fa4:	29800a15 	stw	r6,40(r5)
 2001fa8:	29000b15 	stw	r4,44(r5)
 2001fac:	01400284 	movi	r5,10
 2001fb0:	18000015 	stw	zero,0(r3)
 2001fb4:	18000115 	stw	zero,4(r3)
 2001fb8:	18000215 	stw	zero,8(r3)
 2001fbc:	1940030d 	sth	r5,12(r3)
 2001fc0:	1a40038d 	sth	r9,14(r3)
 2001fc4:	18000415 	stw	zero,16(r3)
 2001fc8:	18000515 	stw	zero,20(r3)
 2001fcc:	18000615 	stw	zero,24(r3)
 2001fd0:	18c00715 	stw	r3,28(r3)
 2001fd4:	1a000815 	stw	r8,32(r3)
 2001fd8:	19c00915 	stw	r7,36(r3)
 2001fdc:	19800a15 	stw	r6,40(r3)
 2001fe0:	19000b15 	stw	r4,44(r3)
 2001fe4:	00c00484 	movi	r3,18
 2001fe8:	10c0030d 	sth	r3,12(r2)
 2001fec:	00c00084 	movi	r3,2
 2001ff0:	10000015 	stw	zero,0(r2)
 2001ff4:	10000115 	stw	zero,4(r2)
 2001ff8:	10000215 	stw	zero,8(r2)
 2001ffc:	10c0038d 	sth	r3,14(r2)
 2002000:	10000415 	stw	zero,16(r2)
 2002004:	10000515 	stw	zero,20(r2)
 2002008:	10000615 	stw	zero,24(r2)
 200200c:	10800715 	stw	r2,28(r2)
 2002010:	12000815 	stw	r8,32(r2)
 2002014:	11c00915 	stw	r7,36(r2)
 2002018:	11800a15 	stw	r6,40(r2)
 200201c:	11000b15 	stw	r4,44(r2)
 2002020:	f800283a 	ret

02002024 <__sfp>:
 2002024:	defffc04 	addi	sp,sp,-16
 2002028:	00808034 	movhi	r2,512
 200202c:	109be004 	addi	r2,r2,28544
 2002030:	dc400115 	stw	r17,4(sp)
 2002034:	14400017 	ldw	r17,0(r2)
 2002038:	dc800215 	stw	r18,8(sp)
 200203c:	dfc00315 	stw	ra,12(sp)
 2002040:	88800e17 	ldw	r2,56(r17)
 2002044:	dc000015 	stw	r16,0(sp)
 2002048:	2025883a 	mov	r18,r4
 200204c:	10002826 	beq	r2,zero,20020f0 <__sfp+0xcc>
 2002050:	8c40b804 	addi	r17,r17,736
 2002054:	043fffc4 	movi	r16,-1
 2002058:	89400117 	ldw	r5,4(r17)
 200205c:	88800217 	ldw	r2,8(r17)
 2002060:	297fffc4 	addi	r5,r5,-1
 2002064:	28000a16 	blt	r5,zero,2002090 <__sfp+0x6c>
 2002068:	10c0030f 	ldh	r3,12(r2)
 200206c:	18000c26 	beq	r3,zero,20020a0 <__sfp+0x7c>
 2002070:	10c01a04 	addi	r3,r2,104
 2002074:	00000206 	br	2002080 <__sfp+0x5c>
 2002078:	19bfe90f 	ldh	r6,-92(r3)
 200207c:	30000826 	beq	r6,zero,20020a0 <__sfp+0x7c>
 2002080:	297fffc4 	addi	r5,r5,-1
 2002084:	18bffd04 	addi	r2,r3,-12
 2002088:	18c01704 	addi	r3,r3,92
 200208c:	2c3ffa1e 	bne	r5,r16,2002078 <__sfp+0x54>
 2002090:	88800017 	ldw	r2,0(r17)
 2002094:	10001926 	beq	r2,zero,20020fc <__sfp+0xd8>
 2002098:	1023883a 	mov	r17,r2
 200209c:	003fee06 	br	2002058 <__sfp+0x34>
 20020a0:	00ffffc4 	movi	r3,-1
 20020a4:	10c0038d 	sth	r3,14(r2)
 20020a8:	00c00044 	movi	r3,1
 20020ac:	10c0030d 	sth	r3,12(r2)
 20020b0:	10000015 	stw	zero,0(r2)
 20020b4:	10000215 	stw	zero,8(r2)
 20020b8:	10000115 	stw	zero,4(r2)
 20020bc:	10000415 	stw	zero,16(r2)
 20020c0:	10000515 	stw	zero,20(r2)
 20020c4:	10000615 	stw	zero,24(r2)
 20020c8:	10000c15 	stw	zero,48(r2)
 20020cc:	10000d15 	stw	zero,52(r2)
 20020d0:	10001115 	stw	zero,68(r2)
 20020d4:	10001215 	stw	zero,72(r2)
 20020d8:	dfc00317 	ldw	ra,12(sp)
 20020dc:	dc800217 	ldw	r18,8(sp)
 20020e0:	dc400117 	ldw	r17,4(sp)
 20020e4:	dc000017 	ldw	r16,0(sp)
 20020e8:	dec00404 	addi	sp,sp,16
 20020ec:	f800283a 	ret
 20020f0:	8809883a 	mov	r4,r17
 20020f4:	2001f180 	call	2001f18 <__sinit>
 20020f8:	003fd506 	br	2002050 <__sfp+0x2c>
 20020fc:	9009883a 	mov	r4,r18
 2002100:	01400104 	movi	r5,4
 2002104:	2001e900 	call	2001e90 <__sfmoreglue>
 2002108:	88800015 	stw	r2,0(r17)
 200210c:	103fe21e 	bne	r2,zero,2002098 <__sfp+0x74>
 2002110:	00800304 	movi	r2,12
 2002114:	90800015 	stw	r2,0(r18)
 2002118:	0005883a 	mov	r2,zero
 200211c:	003fee06 	br	20020d8 <__sfp+0xb4>

02002120 <__sfp_lock_acquire>:
 2002120:	f800283a 	ret

02002124 <__sfp_lock_release>:
 2002124:	f800283a 	ret

02002128 <__sinit_lock_acquire>:
 2002128:	f800283a 	ret

0200212c <__sinit_lock_release>:
 200212c:	f800283a 	ret

02002130 <__fp_lock_all>:
 2002130:	00808034 	movhi	r2,512
 2002134:	109be104 	addi	r2,r2,28548
 2002138:	11000017 	ldw	r4,0(r2)
 200213c:	01408034 	movhi	r5,512
 2002140:	29479d04 	addi	r5,r5,7796
 2002144:	200256c1 	jmpi	200256c <_fwalk>

02002148 <__fp_unlock_all>:
 2002148:	00808034 	movhi	r2,512
 200214c:	109be104 	addi	r2,r2,28548
 2002150:	11000017 	ldw	r4,0(r2)
 2002154:	01408034 	movhi	r5,512
 2002158:	29479f04 	addi	r5,r5,7804
 200215c:	200256c1 	jmpi	200256c <_fwalk>

02002160 <_malloc_trim_r>:
 2002160:	defffb04 	addi	sp,sp,-20
 2002164:	dcc00315 	stw	r19,12(sp)
 2002168:	dc800215 	stw	r18,8(sp)
 200216c:	dc400115 	stw	r17,4(sp)
 2002170:	dc000015 	stw	r16,0(sp)
 2002174:	2827883a 	mov	r19,r5
 2002178:	dfc00415 	stw	ra,16(sp)
 200217c:	04408034 	movhi	r17,512
 2002180:	8c565c04 	addi	r17,r17,22896
 2002184:	2021883a 	mov	r16,r4
 2002188:	20037080 	call	2003708 <__malloc_lock>
 200218c:	88800217 	ldw	r2,8(r17)
 2002190:	14800117 	ldw	r18,4(r2)
 2002194:	00bfff04 	movi	r2,-4
 2002198:	90a4703a 	and	r18,r18,r2
 200219c:	9083fbc4 	addi	r2,r18,4079
 20021a0:	14e7c83a 	sub	r19,r2,r19
 20021a4:	9826d33a 	srli	r19,r19,12
 20021a8:	0083ffc4 	movi	r2,4095
 20021ac:	9cffffc4 	addi	r19,r19,-1
 20021b0:	9826933a 	slli	r19,r19,12
 20021b4:	14c0060e 	bge	r2,r19,20021d0 <_malloc_trim_r+0x70>
 20021b8:	8009883a 	mov	r4,r16
 20021bc:	000b883a 	mov	r5,zero
 20021c0:	2001a840 	call	2001a84 <_sbrk_r>
 20021c4:	88c00217 	ldw	r3,8(r17)
 20021c8:	1c87883a 	add	r3,r3,r18
 20021cc:	10c00a26 	beq	r2,r3,20021f8 <_malloc_trim_r+0x98>
 20021d0:	8009883a 	mov	r4,r16
 20021d4:	20037280 	call	2003728 <__malloc_unlock>
 20021d8:	0005883a 	mov	r2,zero
 20021dc:	dfc00417 	ldw	ra,16(sp)
 20021e0:	dcc00317 	ldw	r19,12(sp)
 20021e4:	dc800217 	ldw	r18,8(sp)
 20021e8:	dc400117 	ldw	r17,4(sp)
 20021ec:	dc000017 	ldw	r16,0(sp)
 20021f0:	dec00504 	addi	sp,sp,20
 20021f4:	f800283a 	ret
 20021f8:	8009883a 	mov	r4,r16
 20021fc:	04cbc83a 	sub	r5,zero,r19
 2002200:	2001a840 	call	2001a84 <_sbrk_r>
 2002204:	00ffffc4 	movi	r3,-1
 2002208:	10c01326 	beq	r2,r3,2002258 <_malloc_trim_r+0xf8>
 200220c:	00808074 	movhi	r2,513
 2002210:	10a28b04 	addi	r2,r2,-30164
 2002214:	11000017 	ldw	r4,0(r2)
 2002218:	88c00217 	ldw	r3,8(r17)
 200221c:	94e5c83a 	sub	r18,r18,r19
 2002220:	94800054 	ori	r18,r18,1
 2002224:	24e7c83a 	sub	r19,r4,r19
 2002228:	1c800115 	stw	r18,4(r3)
 200222c:	8009883a 	mov	r4,r16
 2002230:	14c00015 	stw	r19,0(r2)
 2002234:	20037280 	call	2003728 <__malloc_unlock>
 2002238:	00800044 	movi	r2,1
 200223c:	dfc00417 	ldw	ra,16(sp)
 2002240:	dcc00317 	ldw	r19,12(sp)
 2002244:	dc800217 	ldw	r18,8(sp)
 2002248:	dc400117 	ldw	r17,4(sp)
 200224c:	dc000017 	ldw	r16,0(sp)
 2002250:	dec00504 	addi	sp,sp,20
 2002254:	f800283a 	ret
 2002258:	8009883a 	mov	r4,r16
 200225c:	000b883a 	mov	r5,zero
 2002260:	2001a840 	call	2001a84 <_sbrk_r>
 2002264:	88c00217 	ldw	r3,8(r17)
 2002268:	014003c4 	movi	r5,15
 200226c:	10c9c83a 	sub	r4,r2,r3
 2002270:	293fd70e 	bge	r5,r4,20021d0 <_malloc_trim_r+0x70>
 2002274:	01408034 	movhi	r5,512
 2002278:	295be204 	addi	r5,r5,28552
 200227c:	29400017 	ldw	r5,0(r5)
 2002280:	21000054 	ori	r4,r4,1
 2002284:	19000115 	stw	r4,4(r3)
 2002288:	1145c83a 	sub	r2,r2,r5
 200228c:	01408074 	movhi	r5,513
 2002290:	29628b04 	addi	r5,r5,-30164
 2002294:	28800015 	stw	r2,0(r5)
 2002298:	003fcd06 	br	20021d0 <_malloc_trim_r+0x70>

0200229c <_free_r>:
 200229c:	defffd04 	addi	sp,sp,-12
 20022a0:	dc400115 	stw	r17,4(sp)
 20022a4:	dc000015 	stw	r16,0(sp)
 20022a8:	dfc00215 	stw	ra,8(sp)
 20022ac:	2821883a 	mov	r16,r5
 20022b0:	2023883a 	mov	r17,r4
 20022b4:	28004b26 	beq	r5,zero,20023e4 <_free_r+0x148>
 20022b8:	20037080 	call	2003708 <__malloc_lock>
 20022bc:	823fff17 	ldw	r8,-4(r16)
 20022c0:	00bfff84 	movi	r2,-2
 20022c4:	81bffe04 	addi	r6,r16,-8
 20022c8:	4084703a 	and	r2,r8,r2
 20022cc:	3087883a 	add	r3,r6,r2
 20022d0:	01408034 	movhi	r5,512
 20022d4:	29565c04 	addi	r5,r5,22896
 20022d8:	1a400117 	ldw	r9,4(r3)
 20022dc:	29000217 	ldw	r4,8(r5)
 20022e0:	01ffff04 	movi	r7,-4
 20022e4:	49ce703a 	and	r7,r9,r7
 20022e8:	20c06526 	beq	r4,r3,2002480 <_free_r+0x1e4>
 20022ec:	19c00115 	stw	r7,4(r3)
 20022f0:	4200004c 	andi	r8,r8,1
 20022f4:	40003026 	beq	r8,zero,20023b8 <_free_r+0x11c>
 20022f8:	0009883a 	mov	r4,zero
 20022fc:	19d1883a 	add	r8,r3,r7
 2002300:	42000117 	ldw	r8,4(r8)
 2002304:	4200004c 	andi	r8,r8,1
 2002308:	4000061e 	bne	r8,zero,2002324 <_free_r+0x88>
 200230c:	11c5883a 	add	r2,r2,r7
 2002310:	19c00217 	ldw	r7,8(r3)
 2002314:	20004e26 	beq	r4,zero,2002450 <_free_r+0x1b4>
 2002318:	18c00317 	ldw	r3,12(r3)
 200231c:	38c00315 	stw	r3,12(r7)
 2002320:	19c00215 	stw	r7,8(r3)
 2002324:	11c00054 	ori	r7,r2,1
 2002328:	3087883a 	add	r3,r6,r2
 200232c:	31c00115 	stw	r7,4(r6)
 2002330:	18800015 	stw	r2,0(r3)
 2002334:	20001a1e 	bne	r4,zero,20023a0 <_free_r+0x104>
 2002338:	00c07fc4 	movi	r3,511
 200233c:	18802e2e 	bgeu	r3,r2,20023f8 <_free_r+0x15c>
 2002340:	1006d27a 	srli	r3,r2,9
 2002344:	01000104 	movi	r4,4
 2002348:	20c06636 	bltu	r4,r3,20024e4 <_free_r+0x248>
 200234c:	1008d1ba 	srli	r4,r2,6
 2002350:	21000e04 	addi	r4,r4,56
 2002354:	210f883a 	add	r7,r4,r4
 2002358:	39cf883a 	add	r7,r7,r7
 200235c:	39cf883a 	add	r7,r7,r7
 2002360:	29cf883a 	add	r7,r5,r7
 2002364:	38c00217 	ldw	r3,8(r7)
 2002368:	01408034 	movhi	r5,512
 200236c:	29565c04 	addi	r5,r5,22896
 2002370:	19c06126 	beq	r3,r7,20024f8 <_free_r+0x25c>
 2002374:	013fff04 	movi	r4,-4
 2002378:	19400117 	ldw	r5,4(r3)
 200237c:	290a703a 	and	r5,r5,r4
 2002380:	1140022e 	bgeu	r2,r5,200238c <_free_r+0xf0>
 2002384:	18c00217 	ldw	r3,8(r3)
 2002388:	38fffb1e 	bne	r7,r3,2002378 <_free_r+0xdc>
 200238c:	18800317 	ldw	r2,12(r3)
 2002390:	30800315 	stw	r2,12(r6)
 2002394:	30c00215 	stw	r3,8(r6)
 2002398:	11800215 	stw	r6,8(r2)
 200239c:	19800315 	stw	r6,12(r3)
 20023a0:	8809883a 	mov	r4,r17
 20023a4:	dfc00217 	ldw	ra,8(sp)
 20023a8:	dc400117 	ldw	r17,4(sp)
 20023ac:	dc000017 	ldw	r16,0(sp)
 20023b0:	dec00304 	addi	sp,sp,12
 20023b4:	20037281 	jmpi	2003728 <__malloc_unlock>
 20023b8:	813ffe17 	ldw	r4,-8(r16)
 20023bc:	2a400204 	addi	r9,r5,8
 20023c0:	310dc83a 	sub	r6,r6,r4
 20023c4:	32000217 	ldw	r8,8(r6)
 20023c8:	1105883a 	add	r2,r2,r4
 20023cc:	42404326 	beq	r8,r9,20024dc <_free_r+0x240>
 20023d0:	32400317 	ldw	r9,12(r6)
 20023d4:	0009883a 	mov	r4,zero
 20023d8:	42400315 	stw	r9,12(r8)
 20023dc:	4a000215 	stw	r8,8(r9)
 20023e0:	003fc606 	br	20022fc <_free_r+0x60>
 20023e4:	dfc00217 	ldw	ra,8(sp)
 20023e8:	dc400117 	ldw	r17,4(sp)
 20023ec:	dc000017 	ldw	r16,0(sp)
 20023f0:	dec00304 	addi	sp,sp,12
 20023f4:	f800283a 	ret
 20023f8:	1004d0fa 	srli	r2,r2,3
 20023fc:	02000044 	movi	r8,1
 2002400:	29c00117 	ldw	r7,4(r5)
 2002404:	1087883a 	add	r3,r2,r2
 2002408:	18c7883a 	add	r3,r3,r3
 200240c:	1005d0ba 	srai	r2,r2,2
 2002410:	18c7883a 	add	r3,r3,r3
 2002414:	28c7883a 	add	r3,r5,r3
 2002418:	19000217 	ldw	r4,8(r3)
 200241c:	4084983a 	sll	r2,r8,r2
 2002420:	30c00315 	stw	r3,12(r6)
 2002424:	31000215 	stw	r4,8(r6)
 2002428:	11c4b03a 	or	r2,r2,r7
 200242c:	21800315 	stw	r6,12(r4)
 2002430:	8809883a 	mov	r4,r17
 2002434:	28800115 	stw	r2,4(r5)
 2002438:	19800215 	stw	r6,8(r3)
 200243c:	dfc00217 	ldw	ra,8(sp)
 2002440:	dc400117 	ldw	r17,4(sp)
 2002444:	dc000017 	ldw	r16,0(sp)
 2002448:	dec00304 	addi	sp,sp,12
 200244c:	20037281 	jmpi	2003728 <__malloc_unlock>
 2002450:	02008034 	movhi	r8,512
 2002454:	42165e04 	addi	r8,r8,22904
 2002458:	3a3faf1e 	bne	r7,r8,2002318 <_free_r+0x7c>
 200245c:	29800515 	stw	r6,20(r5)
 2002460:	29800415 	stw	r6,16(r5)
 2002464:	11000054 	ori	r4,r2,1
 2002468:	3087883a 	add	r3,r6,r2
 200246c:	31c00315 	stw	r7,12(r6)
 2002470:	31c00215 	stw	r7,8(r6)
 2002474:	31000115 	stw	r4,4(r6)
 2002478:	18800015 	stw	r2,0(r3)
 200247c:	003fc806 	br	20023a0 <_free_r+0x104>
 2002480:	4200004c 	andi	r8,r8,1
 2002484:	3885883a 	add	r2,r7,r2
 2002488:	4000071e 	bne	r8,zero,20024a8 <_free_r+0x20c>
 200248c:	81fffe17 	ldw	r7,-8(r16)
 2002490:	31cdc83a 	sub	r6,r6,r7
 2002494:	30c00317 	ldw	r3,12(r6)
 2002498:	31000217 	ldw	r4,8(r6)
 200249c:	11c5883a 	add	r2,r2,r7
 20024a0:	20c00315 	stw	r3,12(r4)
 20024a4:	19000215 	stw	r4,8(r3)
 20024a8:	00c08034 	movhi	r3,512
 20024ac:	18dbe304 	addi	r3,r3,28556
 20024b0:	18c00017 	ldw	r3,0(r3)
 20024b4:	11000054 	ori	r4,r2,1
 20024b8:	31000115 	stw	r4,4(r6)
 20024bc:	29800215 	stw	r6,8(r5)
 20024c0:	10ffb736 	bltu	r2,r3,20023a0 <_free_r+0x104>
 20024c4:	00808074 	movhi	r2,513
 20024c8:	10a28304 	addi	r2,r2,-30196
 20024cc:	11400017 	ldw	r5,0(r2)
 20024d0:	8809883a 	mov	r4,r17
 20024d4:	20021600 	call	2002160 <_malloc_trim_r>
 20024d8:	003fb106 	br	20023a0 <_free_r+0x104>
 20024dc:	01000044 	movi	r4,1
 20024e0:	003f8606 	br	20022fc <_free_r+0x60>
 20024e4:	01000504 	movi	r4,20
 20024e8:	20c00b36 	bltu	r4,r3,2002518 <_free_r+0x27c>
 20024ec:	190016c4 	addi	r4,r3,91
 20024f0:	210f883a 	add	r7,r4,r4
 20024f4:	003f9806 	br	2002358 <_free_r+0xbc>
 20024f8:	2009d0ba 	srai	r4,r4,2
 20024fc:	00800044 	movi	r2,1
 2002500:	29c00117 	ldw	r7,4(r5)
 2002504:	1108983a 	sll	r4,r2,r4
 2002508:	1805883a 	mov	r2,r3
 200250c:	21c8b03a 	or	r4,r4,r7
 2002510:	29000115 	stw	r4,4(r5)
 2002514:	003f9e06 	br	2002390 <_free_r+0xf4>
 2002518:	01001504 	movi	r4,84
 200251c:	20c00436 	bltu	r4,r3,2002530 <_free_r+0x294>
 2002520:	1008d33a 	srli	r4,r2,12
 2002524:	21001b84 	addi	r4,r4,110
 2002528:	210f883a 	add	r7,r4,r4
 200252c:	003f8a06 	br	2002358 <_free_r+0xbc>
 2002530:	01005504 	movi	r4,340
 2002534:	20c00436 	bltu	r4,r3,2002548 <_free_r+0x2ac>
 2002538:	1008d3fa 	srli	r4,r2,15
 200253c:	21001dc4 	addi	r4,r4,119
 2002540:	210f883a 	add	r7,r4,r4
 2002544:	003f8406 	br	2002358 <_free_r+0xbc>
 2002548:	01015504 	movi	r4,1364
 200254c:	20c00436 	bltu	r4,r3,2002560 <_free_r+0x2c4>
 2002550:	1008d4ba 	srli	r4,r2,18
 2002554:	21001f04 	addi	r4,r4,124
 2002558:	210f883a 	add	r7,r4,r4
 200255c:	003f7e06 	br	2002358 <_free_r+0xbc>
 2002560:	01c03f04 	movi	r7,252
 2002564:	01001f84 	movi	r4,126
 2002568:	003f7b06 	br	2002358 <_free_r+0xbc>

0200256c <_fwalk>:
 200256c:	defff904 	addi	sp,sp,-28
 2002570:	dcc00315 	stw	r19,12(sp)
 2002574:	24c0b804 	addi	r19,r4,736
 2002578:	dd400515 	stw	r21,20(sp)
 200257c:	dd000415 	stw	r20,16(sp)
 2002580:	dfc00615 	stw	ra,24(sp)
 2002584:	dc800215 	stw	r18,8(sp)
 2002588:	dc400115 	stw	r17,4(sp)
 200258c:	dc000015 	stw	r16,0(sp)
 2002590:	282b883a 	mov	r21,r5
 2002594:	0029883a 	mov	r20,zero
 2002598:	20021200 	call	2002120 <__sfp_lock_acquire>
 200259c:	98001226 	beq	r19,zero,20025e8 <_fwalk+0x7c>
 20025a0:	04bfffc4 	movi	r18,-1
 20025a4:	9c400117 	ldw	r17,4(r19)
 20025a8:	9c000217 	ldw	r16,8(r19)
 20025ac:	8c7fffc4 	addi	r17,r17,-1
 20025b0:	88000b16 	blt	r17,zero,20025e0 <_fwalk+0x74>
 20025b4:	84000304 	addi	r16,r16,12
 20025b8:	80c0000f 	ldh	r3,0(r16)
 20025bc:	8c7fffc4 	addi	r17,r17,-1
 20025c0:	813ffd04 	addi	r4,r16,-12
 20025c4:	18000426 	beq	r3,zero,20025d8 <_fwalk+0x6c>
 20025c8:	80c0008f 	ldh	r3,2(r16)
 20025cc:	1c800226 	beq	r3,r18,20025d8 <_fwalk+0x6c>
 20025d0:	a83ee83a 	callr	r21
 20025d4:	a0a8b03a 	or	r20,r20,r2
 20025d8:	84001704 	addi	r16,r16,92
 20025dc:	8cbff61e 	bne	r17,r18,20025b8 <_fwalk+0x4c>
 20025e0:	9cc00017 	ldw	r19,0(r19)
 20025e4:	983fef1e 	bne	r19,zero,20025a4 <_fwalk+0x38>
 20025e8:	20021240 	call	2002124 <__sfp_lock_release>
 20025ec:	a005883a 	mov	r2,r20
 20025f0:	dfc00617 	ldw	ra,24(sp)
 20025f4:	dd400517 	ldw	r21,20(sp)
 20025f8:	dd000417 	ldw	r20,16(sp)
 20025fc:	dcc00317 	ldw	r19,12(sp)
 2002600:	dc800217 	ldw	r18,8(sp)
 2002604:	dc400117 	ldw	r17,4(sp)
 2002608:	dc000017 	ldw	r16,0(sp)
 200260c:	dec00704 	addi	sp,sp,28
 2002610:	f800283a 	ret

02002614 <_fwalk_reent>:
 2002614:	defff804 	addi	sp,sp,-32
 2002618:	dcc00315 	stw	r19,12(sp)
 200261c:	24c0b804 	addi	r19,r4,736
 2002620:	dd800615 	stw	r22,24(sp)
 2002624:	dd400515 	stw	r21,20(sp)
 2002628:	dd000415 	stw	r20,16(sp)
 200262c:	dfc00715 	stw	ra,28(sp)
 2002630:	dc800215 	stw	r18,8(sp)
 2002634:	dc400115 	stw	r17,4(sp)
 2002638:	dc000015 	stw	r16,0(sp)
 200263c:	2029883a 	mov	r20,r4
 2002640:	282b883a 	mov	r21,r5
 2002644:	002d883a 	mov	r22,zero
 2002648:	20021200 	call	2002120 <__sfp_lock_acquire>
 200264c:	98001326 	beq	r19,zero,200269c <_fwalk_reent+0x88>
 2002650:	04bfffc4 	movi	r18,-1
 2002654:	9c400117 	ldw	r17,4(r19)
 2002658:	9c000217 	ldw	r16,8(r19)
 200265c:	8c7fffc4 	addi	r17,r17,-1
 2002660:	88000c16 	blt	r17,zero,2002694 <_fwalk_reent+0x80>
 2002664:	84000304 	addi	r16,r16,12
 2002668:	80c0000f 	ldh	r3,0(r16)
 200266c:	8c7fffc4 	addi	r17,r17,-1
 2002670:	817ffd04 	addi	r5,r16,-12
 2002674:	18000526 	beq	r3,zero,200268c <_fwalk_reent+0x78>
 2002678:	80c0008f 	ldh	r3,2(r16)
 200267c:	a009883a 	mov	r4,r20
 2002680:	1c800226 	beq	r3,r18,200268c <_fwalk_reent+0x78>
 2002684:	a83ee83a 	callr	r21
 2002688:	b0acb03a 	or	r22,r22,r2
 200268c:	84001704 	addi	r16,r16,92
 2002690:	8cbff51e 	bne	r17,r18,2002668 <_fwalk_reent+0x54>
 2002694:	9cc00017 	ldw	r19,0(r19)
 2002698:	983fee1e 	bne	r19,zero,2002654 <_fwalk_reent+0x40>
 200269c:	20021240 	call	2002124 <__sfp_lock_release>
 20026a0:	b005883a 	mov	r2,r22
 20026a4:	dfc00717 	ldw	ra,28(sp)
 20026a8:	dd800617 	ldw	r22,24(sp)
 20026ac:	dd400517 	ldw	r21,20(sp)
 20026b0:	dd000417 	ldw	r20,16(sp)
 20026b4:	dcc00317 	ldw	r19,12(sp)
 20026b8:	dc800217 	ldw	r18,8(sp)
 20026bc:	dc400117 	ldw	r17,4(sp)
 20026c0:	dc000017 	ldw	r16,0(sp)
 20026c4:	dec00804 	addi	sp,sp,32
 20026c8:	f800283a 	ret

020026cc <__smakebuf_r>:
 20026cc:	2880030b 	ldhu	r2,12(r5)
 20026d0:	deffed04 	addi	sp,sp,-76
 20026d4:	dc401015 	stw	r17,64(sp)
 20026d8:	10c0008c 	andi	r3,r2,2
 20026dc:	18ffffcc 	andi	r3,r3,65535
 20026e0:	18e0001c 	xori	r3,r3,32768
 20026e4:	dc000f15 	stw	r16,60(sp)
 20026e8:	dfc01215 	stw	ra,72(sp)
 20026ec:	dc801115 	stw	r18,68(sp)
 20026f0:	18e00004 	addi	r3,r3,-32768
 20026f4:	2821883a 	mov	r16,r5
 20026f8:	2023883a 	mov	r17,r4
 20026fc:	1800381e 	bne	r3,zero,20027e0 <__smakebuf_r+0x114>
 2002700:	2940038f 	ldh	r5,14(r5)
 2002704:	28002d16 	blt	r5,zero,20027bc <__smakebuf_r+0xf0>
 2002708:	d80d883a 	mov	r6,sp
 200270c:	2002cb00 	call	2002cb0 <_fstat_r>
 2002710:	10002916 	blt	r2,zero,20027b8 <__smakebuf_r+0xec>
 2002714:	d8800117 	ldw	r2,4(sp)
 2002718:	00e00014 	movui	r3,32768
 200271c:	10bc000c 	andi	r2,r2,61440
 2002720:	10c03c26 	beq	r2,r3,2002814 <__smakebuf_r+0x148>
 2002724:	80c0030b 	ldhu	r3,12(r16)
 2002728:	18c20014 	ori	r3,r3,2048
 200272c:	80c0030d 	sth	r3,12(r16)
 2002730:	00c80004 	movi	r3,8192
 2002734:	10c00c1e 	bne	r2,r3,2002768 <__smakebuf_r+0x9c>
 2002738:	8140038f 	ldh	r5,14(r16)
 200273c:	8809883a 	mov	r4,r17
 2002740:	2002d180 	call	2002d18 <_isatty_r>
 2002744:	10000826 	beq	r2,zero,2002768 <__smakebuf_r+0x9c>
 2002748:	80c0030b 	ldhu	r3,12(r16)
 200274c:	808010c4 	addi	r2,r16,67
 2002750:	80800015 	stw	r2,0(r16)
 2002754:	18c00054 	ori	r3,r3,1
 2002758:	80800415 	stw	r2,16(r16)
 200275c:	00800044 	movi	r2,1
 2002760:	80c0030d 	sth	r3,12(r16)
 2002764:	80800515 	stw	r2,20(r16)
 2002768:	04810004 	movi	r18,1024
 200276c:	8809883a 	mov	r4,r17
 2002770:	900b883a 	mov	r5,r18
 2002774:	20009400 	call	2000940 <_malloc_r>
 2002778:	10003026 	beq	r2,zero,200283c <__smakebuf_r+0x170>
 200277c:	80c0030b 	ldhu	r3,12(r16)
 2002780:	01008034 	movhi	r4,512
 2002784:	2107a104 	addi	r4,r4,7812
 2002788:	89000f15 	stw	r4,60(r17)
 200278c:	18c02014 	ori	r3,r3,128
 2002790:	80c0030d 	sth	r3,12(r16)
 2002794:	80800015 	stw	r2,0(r16)
 2002798:	80800415 	stw	r2,16(r16)
 200279c:	84800515 	stw	r18,20(r16)
 20027a0:	dfc01217 	ldw	ra,72(sp)
 20027a4:	dc801117 	ldw	r18,68(sp)
 20027a8:	dc401017 	ldw	r17,64(sp)
 20027ac:	dc000f17 	ldw	r16,60(sp)
 20027b0:	dec01304 	addi	sp,sp,76
 20027b4:	f800283a 	ret
 20027b8:	8080030b 	ldhu	r2,12(r16)
 20027bc:	10c0200c 	andi	r3,r2,128
 20027c0:	18ffffcc 	andi	r3,r3,65535
 20027c4:	18e0001c 	xori	r3,r3,32768
 20027c8:	18e00004 	addi	r3,r3,-32768
 20027cc:	18000f1e 	bne	r3,zero,200280c <__smakebuf_r+0x140>
 20027d0:	04810004 	movi	r18,1024
 20027d4:	10820014 	ori	r2,r2,2048
 20027d8:	8080030d 	sth	r2,12(r16)
 20027dc:	003fe306 	br	200276c <__smakebuf_r+0xa0>
 20027e0:	288010c4 	addi	r2,r5,67
 20027e4:	28800015 	stw	r2,0(r5)
 20027e8:	28800415 	stw	r2,16(r5)
 20027ec:	00800044 	movi	r2,1
 20027f0:	28800515 	stw	r2,20(r5)
 20027f4:	dfc01217 	ldw	ra,72(sp)
 20027f8:	dc801117 	ldw	r18,68(sp)
 20027fc:	dc401017 	ldw	r17,64(sp)
 2002800:	dc000f17 	ldw	r16,60(sp)
 2002804:	dec01304 	addi	sp,sp,76
 2002808:	f800283a 	ret
 200280c:	04801004 	movi	r18,64
 2002810:	003ff006 	br	20027d4 <__smakebuf_r+0x108>
 2002814:	81000a17 	ldw	r4,40(r16)
 2002818:	00c08034 	movhi	r3,512
 200281c:	18ca8b04 	addi	r3,r3,10796
 2002820:	20ffc01e 	bne	r4,r3,2002724 <__smakebuf_r+0x58>
 2002824:	8080030b 	ldhu	r2,12(r16)
 2002828:	00c10004 	movi	r3,1024
 200282c:	80c01315 	stw	r3,76(r16)
 2002830:	10c4b03a 	or	r2,r2,r3
 2002834:	8080030d 	sth	r2,12(r16)
 2002838:	003fcb06 	br	2002768 <__smakebuf_r+0x9c>
 200283c:	8080030b 	ldhu	r2,12(r16)
 2002840:	10c0800c 	andi	r3,r2,512
 2002844:	18ffffcc 	andi	r3,r3,65535
 2002848:	18e0001c 	xori	r3,r3,32768
 200284c:	18e00004 	addi	r3,r3,-32768
 2002850:	183fd31e 	bne	r3,zero,20027a0 <__smakebuf_r+0xd4>
 2002854:	10800094 	ori	r2,r2,2
 2002858:	80c010c4 	addi	r3,r16,67
 200285c:	8080030d 	sth	r2,12(r16)
 2002860:	00800044 	movi	r2,1
 2002864:	80c00015 	stw	r3,0(r16)
 2002868:	80c00415 	stw	r3,16(r16)
 200286c:	80800515 	stw	r2,20(r16)
 2002870:	003fcb06 	br	20027a0 <__smakebuf_r+0xd4>

02002874 <memset>:
 2002874:	00c000c4 	movi	r3,3
 2002878:	2005883a 	mov	r2,r4
 200287c:	29403fcc 	andi	r5,r5,255
 2002880:	19802d2e 	bgeu	r3,r6,2002938 <memset+0xc4>
 2002884:	20c6703a 	and	r3,r4,r3
 2002888:	18002e1e 	bne	r3,zero,2002944 <memset+0xd0>
 200288c:	2806923a 	slli	r3,r5,8
 2002890:	010003c4 	movi	r4,15
 2002894:	3011883a 	mov	r8,r6
 2002898:	1946b03a 	or	r3,r3,r5
 200289c:	180e943a 	slli	r7,r3,16
 20028a0:	38ceb03a 	or	r7,r7,r3
 20028a4:	1007883a 	mov	r3,r2
 20028a8:	21800f2e 	bgeu	r4,r6,20028e8 <memset+0x74>
 20028ac:	19c00015 	stw	r7,0(r3)
 20028b0:	19c00115 	stw	r7,4(r3)
 20028b4:	19c00215 	stw	r7,8(r3)
 20028b8:	19c00315 	stw	r7,12(r3)
 20028bc:	423ffc04 	addi	r8,r8,-16
 20028c0:	18c00404 	addi	r3,r3,16
 20028c4:	223ff936 	bltu	r4,r8,20028ac <memset+0x38>
 20028c8:	30fffc04 	addi	r3,r6,-16
 20028cc:	1806d13a 	srli	r3,r3,4
 20028d0:	318003cc 	andi	r6,r6,15
 20028d4:	010000c4 	movi	r4,3
 20028d8:	18c00044 	addi	r3,r3,1
 20028dc:	1806913a 	slli	r3,r3,4
 20028e0:	10c7883a 	add	r3,r2,r3
 20028e4:	21800e2e 	bgeu	r4,r6,2002920 <memset+0xac>
 20028e8:	1813883a 	mov	r9,r3
 20028ec:	3011883a 	mov	r8,r6
 20028f0:	010000c4 	movi	r4,3
 20028f4:	49c00015 	stw	r7,0(r9)
 20028f8:	423fff04 	addi	r8,r8,-4
 20028fc:	4a400104 	addi	r9,r9,4
 2002900:	223ffc36 	bltu	r4,r8,20028f4 <memset+0x80>
 2002904:	313fff04 	addi	r4,r6,-4
 2002908:	2008d0ba 	srli	r4,r4,2
 200290c:	318000cc 	andi	r6,r6,3
 2002910:	21000044 	addi	r4,r4,1
 2002914:	2109883a 	add	r4,r4,r4
 2002918:	2109883a 	add	r4,r4,r4
 200291c:	1907883a 	add	r3,r3,r4
 2002920:	30000a26 	beq	r6,zero,200294c <memset+0xd8>
 2002924:	198d883a 	add	r6,r3,r6
 2002928:	19400005 	stb	r5,0(r3)
 200292c:	18c00044 	addi	r3,r3,1
 2002930:	19bffd1e 	bne	r3,r6,2002928 <memset+0xb4>
 2002934:	f800283a 	ret
 2002938:	2007883a 	mov	r3,r4
 200293c:	303ff91e 	bne	r6,zero,2002924 <memset+0xb0>
 2002940:	00000206 	br	200294c <memset+0xd8>
 2002944:	2007883a 	mov	r3,r4
 2002948:	003ff606 	br	2002924 <memset+0xb0>
 200294c:	f800283a 	ret

02002950 <__sread>:
 2002950:	defffe04 	addi	sp,sp,-8
 2002954:	dc000015 	stw	r16,0(sp)
 2002958:	2821883a 	mov	r16,r5
 200295c:	2940038f 	ldh	r5,14(r5)
 2002960:	dfc00115 	stw	ra,4(sp)
 2002964:	2002de80 	call	2002de8 <_read_r>
 2002968:	10000716 	blt	r2,zero,2002988 <__sread+0x38>
 200296c:	80c01417 	ldw	r3,80(r16)
 2002970:	1887883a 	add	r3,r3,r2
 2002974:	80c01415 	stw	r3,80(r16)
 2002978:	dfc00117 	ldw	ra,4(sp)
 200297c:	dc000017 	ldw	r16,0(sp)
 2002980:	dec00204 	addi	sp,sp,8
 2002984:	f800283a 	ret
 2002988:	80c0030b 	ldhu	r3,12(r16)
 200298c:	18fbffcc 	andi	r3,r3,61439
 2002990:	80c0030d 	sth	r3,12(r16)
 2002994:	dfc00117 	ldw	ra,4(sp)
 2002998:	dc000017 	ldw	r16,0(sp)
 200299c:	dec00204 	addi	sp,sp,8
 20029a0:	f800283a 	ret

020029a4 <__swrite>:
 20029a4:	2880030b 	ldhu	r2,12(r5)
 20029a8:	defffb04 	addi	sp,sp,-20
 20029ac:	dcc00315 	stw	r19,12(sp)
 20029b0:	10c0400c 	andi	r3,r2,256
 20029b4:	18ffffcc 	andi	r3,r3,65535
 20029b8:	18e0001c 	xori	r3,r3,32768
 20029bc:	dc800215 	stw	r18,8(sp)
 20029c0:	dc400115 	stw	r17,4(sp)
 20029c4:	dc000015 	stw	r16,0(sp)
 20029c8:	dfc00415 	stw	ra,16(sp)
 20029cc:	18e00004 	addi	r3,r3,-32768
 20029d0:	2821883a 	mov	r16,r5
 20029d4:	2027883a 	mov	r19,r4
 20029d8:	3025883a 	mov	r18,r6
 20029dc:	3823883a 	mov	r17,r7
 20029e0:	18000526 	beq	r3,zero,20029f8 <__swrite+0x54>
 20029e4:	2940038f 	ldh	r5,14(r5)
 20029e8:	000d883a 	mov	r6,zero
 20029ec:	01c00084 	movi	r7,2
 20029f0:	2002d7c0 	call	2002d7c <_lseek_r>
 20029f4:	8080030b 	ldhu	r2,12(r16)
 20029f8:	8140038f 	ldh	r5,14(r16)
 20029fc:	10bbffcc 	andi	r2,r2,61439
 2002a00:	9809883a 	mov	r4,r19
 2002a04:	900d883a 	mov	r6,r18
 2002a08:	880f883a 	mov	r7,r17
 2002a0c:	8080030d 	sth	r2,12(r16)
 2002a10:	dfc00417 	ldw	ra,16(sp)
 2002a14:	dcc00317 	ldw	r19,12(sp)
 2002a18:	dc800217 	ldw	r18,8(sp)
 2002a1c:	dc400117 	ldw	r17,4(sp)
 2002a20:	dc000017 	ldw	r16,0(sp)
 2002a24:	dec00504 	addi	sp,sp,20
 2002a28:	2002a901 	jmpi	2002a90 <_write_r>

02002a2c <__sseek>:
 2002a2c:	defffe04 	addi	sp,sp,-8
 2002a30:	dc000015 	stw	r16,0(sp)
 2002a34:	2821883a 	mov	r16,r5
 2002a38:	2940038f 	ldh	r5,14(r5)
 2002a3c:	dfc00115 	stw	ra,4(sp)
 2002a40:	2002d7c0 	call	2002d7c <_lseek_r>
 2002a44:	00ffffc4 	movi	r3,-1
 2002a48:	10c00826 	beq	r2,r3,2002a6c <__sseek+0x40>
 2002a4c:	80c0030b 	ldhu	r3,12(r16)
 2002a50:	80801415 	stw	r2,80(r16)
 2002a54:	18c40014 	ori	r3,r3,4096
 2002a58:	80c0030d 	sth	r3,12(r16)
 2002a5c:	dfc00117 	ldw	ra,4(sp)
 2002a60:	dc000017 	ldw	r16,0(sp)
 2002a64:	dec00204 	addi	sp,sp,8
 2002a68:	f800283a 	ret
 2002a6c:	80c0030b 	ldhu	r3,12(r16)
 2002a70:	18fbffcc 	andi	r3,r3,61439
 2002a74:	80c0030d 	sth	r3,12(r16)
 2002a78:	dfc00117 	ldw	ra,4(sp)
 2002a7c:	dc000017 	ldw	r16,0(sp)
 2002a80:	dec00204 	addi	sp,sp,8
 2002a84:	f800283a 	ret

02002a88 <__sclose>:
 2002a88:	2940038f 	ldh	r5,14(r5)
 2002a8c:	2002afc1 	jmpi	2002afc <_close_r>

02002a90 <_write_r>:
 2002a90:	defffd04 	addi	sp,sp,-12
 2002a94:	dc400115 	stw	r17,4(sp)
 2002a98:	dc000015 	stw	r16,0(sp)
 2002a9c:	2023883a 	mov	r17,r4
 2002aa0:	04008074 	movhi	r16,513
 2002aa4:	84228404 	addi	r16,r16,-30192
 2002aa8:	2809883a 	mov	r4,r5
 2002aac:	300b883a 	mov	r5,r6
 2002ab0:	380d883a 	mov	r6,r7
 2002ab4:	dfc00215 	stw	ra,8(sp)
 2002ab8:	80000015 	stw	zero,0(r16)
 2002abc:	2003a0c0 	call	2003a0c <write>
 2002ac0:	00ffffc4 	movi	r3,-1
 2002ac4:	10c00526 	beq	r2,r3,2002adc <_write_r+0x4c>
 2002ac8:	dfc00217 	ldw	ra,8(sp)
 2002acc:	dc400117 	ldw	r17,4(sp)
 2002ad0:	dc000017 	ldw	r16,0(sp)
 2002ad4:	dec00304 	addi	sp,sp,12
 2002ad8:	f800283a 	ret
 2002adc:	80c00017 	ldw	r3,0(r16)
 2002ae0:	183ff926 	beq	r3,zero,2002ac8 <_write_r+0x38>
 2002ae4:	88c00015 	stw	r3,0(r17)
 2002ae8:	dfc00217 	ldw	ra,8(sp)
 2002aec:	dc400117 	ldw	r17,4(sp)
 2002af0:	dc000017 	ldw	r16,0(sp)
 2002af4:	dec00304 	addi	sp,sp,12
 2002af8:	f800283a 	ret

02002afc <_close_r>:
 2002afc:	defffd04 	addi	sp,sp,-12
 2002b00:	dc400115 	stw	r17,4(sp)
 2002b04:	dc000015 	stw	r16,0(sp)
 2002b08:	2023883a 	mov	r17,r4
 2002b0c:	04008074 	movhi	r16,513
 2002b10:	84228404 	addi	r16,r16,-30192
 2002b14:	2809883a 	mov	r4,r5
 2002b18:	dfc00215 	stw	ra,8(sp)
 2002b1c:	80000015 	stw	zero,0(r16)
 2002b20:	2002ecc0 	call	2002ecc <close>
 2002b24:	00ffffc4 	movi	r3,-1
 2002b28:	10c00526 	beq	r2,r3,2002b40 <_close_r+0x44>
 2002b2c:	dfc00217 	ldw	ra,8(sp)
 2002b30:	dc400117 	ldw	r17,4(sp)
 2002b34:	dc000017 	ldw	r16,0(sp)
 2002b38:	dec00304 	addi	sp,sp,12
 2002b3c:	f800283a 	ret
 2002b40:	80c00017 	ldw	r3,0(r16)
 2002b44:	183ff926 	beq	r3,zero,2002b2c <_close_r+0x30>
 2002b48:	88c00015 	stw	r3,0(r17)
 2002b4c:	dfc00217 	ldw	ra,8(sp)
 2002b50:	dc400117 	ldw	r17,4(sp)
 2002b54:	dc000017 	ldw	r16,0(sp)
 2002b58:	dec00304 	addi	sp,sp,12
 2002b5c:	f800283a 	ret

02002b60 <_fclose_r>:
 2002b60:	defffc04 	addi	sp,sp,-16
 2002b64:	dc400115 	stw	r17,4(sp)
 2002b68:	dc000015 	stw	r16,0(sp)
 2002b6c:	dfc00315 	stw	ra,12(sp)
 2002b70:	dc800215 	stw	r18,8(sp)
 2002b74:	2821883a 	mov	r16,r5
 2002b78:	2023883a 	mov	r17,r4
 2002b7c:	28003426 	beq	r5,zero,2002c50 <_fclose_r+0xf0>
 2002b80:	20021200 	call	2002120 <__sfp_lock_acquire>
 2002b84:	88000226 	beq	r17,zero,2002b90 <_fclose_r+0x30>
 2002b88:	88800e17 	ldw	r2,56(r17)
 2002b8c:	10003826 	beq	r2,zero,2002c70 <_fclose_r+0x110>
 2002b90:	8080030f 	ldh	r2,12(r16)
 2002b94:	10002526 	beq	r2,zero,2002c2c <_fclose_r+0xcc>
 2002b98:	8809883a 	mov	r4,r17
 2002b9c:	800b883a 	mov	r5,r16
 2002ba0:	2001c5c0 	call	2001c5c <_fflush_r>
 2002ba4:	1025883a 	mov	r18,r2
 2002ba8:	80800b17 	ldw	r2,44(r16)
 2002bac:	10000426 	beq	r2,zero,2002bc0 <_fclose_r+0x60>
 2002bb0:	81400717 	ldw	r5,28(r16)
 2002bb4:	8809883a 	mov	r4,r17
 2002bb8:	103ee83a 	callr	r2
 2002bbc:	10003516 	blt	r2,zero,2002c94 <_fclose_r+0x134>
 2002bc0:	8080030b 	ldhu	r2,12(r16)
 2002bc4:	1080200c 	andi	r2,r2,128
 2002bc8:	10bfffcc 	andi	r2,r2,65535
 2002bcc:	10a0001c 	xori	r2,r2,32768
 2002bd0:	10a00004 	addi	r2,r2,-32768
 2002bd4:	10002b1e 	bne	r2,zero,2002c84 <_fclose_r+0x124>
 2002bd8:	81400c17 	ldw	r5,48(r16)
 2002bdc:	28000526 	beq	r5,zero,2002bf4 <_fclose_r+0x94>
 2002be0:	80801004 	addi	r2,r16,64
 2002be4:	28800226 	beq	r5,r2,2002bf0 <_fclose_r+0x90>
 2002be8:	8809883a 	mov	r4,r17
 2002bec:	200229c0 	call	200229c <_free_r>
 2002bf0:	80000c15 	stw	zero,48(r16)
 2002bf4:	81401117 	ldw	r5,68(r16)
 2002bf8:	28000326 	beq	r5,zero,2002c08 <_fclose_r+0xa8>
 2002bfc:	8809883a 	mov	r4,r17
 2002c00:	200229c0 	call	200229c <_free_r>
 2002c04:	80001115 	stw	zero,68(r16)
 2002c08:	8000030d 	sth	zero,12(r16)
 2002c0c:	20021240 	call	2002124 <__sfp_lock_release>
 2002c10:	9005883a 	mov	r2,r18
 2002c14:	dfc00317 	ldw	ra,12(sp)
 2002c18:	dc800217 	ldw	r18,8(sp)
 2002c1c:	dc400117 	ldw	r17,4(sp)
 2002c20:	dc000017 	ldw	r16,0(sp)
 2002c24:	dec00404 	addi	sp,sp,16
 2002c28:	f800283a 	ret
 2002c2c:	20021240 	call	2002124 <__sfp_lock_release>
 2002c30:	0025883a 	mov	r18,zero
 2002c34:	9005883a 	mov	r2,r18
 2002c38:	dfc00317 	ldw	ra,12(sp)
 2002c3c:	dc800217 	ldw	r18,8(sp)
 2002c40:	dc400117 	ldw	r17,4(sp)
 2002c44:	dc000017 	ldw	r16,0(sp)
 2002c48:	dec00404 	addi	sp,sp,16
 2002c4c:	f800283a 	ret
 2002c50:	0025883a 	mov	r18,zero
 2002c54:	9005883a 	mov	r2,r18
 2002c58:	dfc00317 	ldw	ra,12(sp)
 2002c5c:	dc800217 	ldw	r18,8(sp)
 2002c60:	dc400117 	ldw	r17,4(sp)
 2002c64:	dc000017 	ldw	r16,0(sp)
 2002c68:	dec00404 	addi	sp,sp,16
 2002c6c:	f800283a 	ret
 2002c70:	8809883a 	mov	r4,r17
 2002c74:	2001f180 	call	2001f18 <__sinit>
 2002c78:	8080030f 	ldh	r2,12(r16)
 2002c7c:	103fc61e 	bne	r2,zero,2002b98 <_fclose_r+0x38>
 2002c80:	003fea06 	br	2002c2c <_fclose_r+0xcc>
 2002c84:	81400417 	ldw	r5,16(r16)
 2002c88:	8809883a 	mov	r4,r17
 2002c8c:	200229c0 	call	200229c <_free_r>
 2002c90:	003fd106 	br	2002bd8 <_fclose_r+0x78>
 2002c94:	04bfffc4 	movi	r18,-1
 2002c98:	003fc906 	br	2002bc0 <_fclose_r+0x60>

02002c9c <fclose>:
 2002c9c:	00808034 	movhi	r2,512
 2002ca0:	109be104 	addi	r2,r2,28548
 2002ca4:	200b883a 	mov	r5,r4
 2002ca8:	11000017 	ldw	r4,0(r2)
 2002cac:	2002b601 	jmpi	2002b60 <_fclose_r>

02002cb0 <_fstat_r>:
 2002cb0:	defffd04 	addi	sp,sp,-12
 2002cb4:	dc400115 	stw	r17,4(sp)
 2002cb8:	dc000015 	stw	r16,0(sp)
 2002cbc:	2023883a 	mov	r17,r4
 2002cc0:	04008074 	movhi	r16,513
 2002cc4:	84228404 	addi	r16,r16,-30192
 2002cc8:	2809883a 	mov	r4,r5
 2002ccc:	300b883a 	mov	r5,r6
 2002cd0:	dfc00215 	stw	ra,8(sp)
 2002cd4:	80000015 	stw	zero,0(r16)
 2002cd8:	20030140 	call	2003014 <fstat>
 2002cdc:	00ffffc4 	movi	r3,-1
 2002ce0:	10c00526 	beq	r2,r3,2002cf8 <_fstat_r+0x48>
 2002ce4:	dfc00217 	ldw	ra,8(sp)
 2002ce8:	dc400117 	ldw	r17,4(sp)
 2002cec:	dc000017 	ldw	r16,0(sp)
 2002cf0:	dec00304 	addi	sp,sp,12
 2002cf4:	f800283a 	ret
 2002cf8:	80c00017 	ldw	r3,0(r16)
 2002cfc:	183ff926 	beq	r3,zero,2002ce4 <_fstat_r+0x34>
 2002d00:	88c00015 	stw	r3,0(r17)
 2002d04:	dfc00217 	ldw	ra,8(sp)
 2002d08:	dc400117 	ldw	r17,4(sp)
 2002d0c:	dc000017 	ldw	r16,0(sp)
 2002d10:	dec00304 	addi	sp,sp,12
 2002d14:	f800283a 	ret

02002d18 <_isatty_r>:
 2002d18:	defffd04 	addi	sp,sp,-12
 2002d1c:	dc400115 	stw	r17,4(sp)
 2002d20:	dc000015 	stw	r16,0(sp)
 2002d24:	2023883a 	mov	r17,r4
 2002d28:	04008074 	movhi	r16,513
 2002d2c:	84228404 	addi	r16,r16,-30192
 2002d30:	2809883a 	mov	r4,r5
 2002d34:	dfc00215 	stw	ra,8(sp)
 2002d38:	80000015 	stw	zero,0(r16)
 2002d3c:	20033dc0 	call	20033dc <isatty>
 2002d40:	00ffffc4 	movi	r3,-1
 2002d44:	10c00526 	beq	r2,r3,2002d5c <_isatty_r+0x44>
 2002d48:	dfc00217 	ldw	ra,8(sp)
 2002d4c:	dc400117 	ldw	r17,4(sp)
 2002d50:	dc000017 	ldw	r16,0(sp)
 2002d54:	dec00304 	addi	sp,sp,12
 2002d58:	f800283a 	ret
 2002d5c:	80c00017 	ldw	r3,0(r16)
 2002d60:	183ff926 	beq	r3,zero,2002d48 <_isatty_r+0x30>
 2002d64:	88c00015 	stw	r3,0(r17)
 2002d68:	dfc00217 	ldw	ra,8(sp)
 2002d6c:	dc400117 	ldw	r17,4(sp)
 2002d70:	dc000017 	ldw	r16,0(sp)
 2002d74:	dec00304 	addi	sp,sp,12
 2002d78:	f800283a 	ret

02002d7c <_lseek_r>:
 2002d7c:	defffd04 	addi	sp,sp,-12
 2002d80:	dc400115 	stw	r17,4(sp)
 2002d84:	dc000015 	stw	r16,0(sp)
 2002d88:	2023883a 	mov	r17,r4
 2002d8c:	04008074 	movhi	r16,513
 2002d90:	84228404 	addi	r16,r16,-30192
 2002d94:	2809883a 	mov	r4,r5
 2002d98:	300b883a 	mov	r5,r6
 2002d9c:	380d883a 	mov	r6,r7
 2002da0:	dfc00215 	stw	ra,8(sp)
 2002da4:	80000015 	stw	zero,0(r16)
 2002da8:	20035bc0 	call	20035bc <lseek>
 2002dac:	00ffffc4 	movi	r3,-1
 2002db0:	10c00526 	beq	r2,r3,2002dc8 <_lseek_r+0x4c>
 2002db4:	dfc00217 	ldw	ra,8(sp)
 2002db8:	dc400117 	ldw	r17,4(sp)
 2002dbc:	dc000017 	ldw	r16,0(sp)
 2002dc0:	dec00304 	addi	sp,sp,12
 2002dc4:	f800283a 	ret
 2002dc8:	80c00017 	ldw	r3,0(r16)
 2002dcc:	183ff926 	beq	r3,zero,2002db4 <_lseek_r+0x38>
 2002dd0:	88c00015 	stw	r3,0(r17)
 2002dd4:	dfc00217 	ldw	ra,8(sp)
 2002dd8:	dc400117 	ldw	r17,4(sp)
 2002ddc:	dc000017 	ldw	r16,0(sp)
 2002de0:	dec00304 	addi	sp,sp,12
 2002de4:	f800283a 	ret

02002de8 <_read_r>:
 2002de8:	defffd04 	addi	sp,sp,-12
 2002dec:	dc400115 	stw	r17,4(sp)
 2002df0:	dc000015 	stw	r16,0(sp)
 2002df4:	2023883a 	mov	r17,r4
 2002df8:	04008074 	movhi	r16,513
 2002dfc:	84228404 	addi	r16,r16,-30192
 2002e00:	2809883a 	mov	r4,r5
 2002e04:	300b883a 	mov	r5,r6
 2002e08:	380d883a 	mov	r6,r7
 2002e0c:	dfc00215 	stw	ra,8(sp)
 2002e10:	80000015 	stw	zero,0(r16)
 2002e14:	20037980 	call	2003798 <read>
 2002e18:	00ffffc4 	movi	r3,-1
 2002e1c:	10c00526 	beq	r2,r3,2002e34 <_read_r+0x4c>
 2002e20:	dfc00217 	ldw	ra,8(sp)
 2002e24:	dc400117 	ldw	r17,4(sp)
 2002e28:	dc000017 	ldw	r16,0(sp)
 2002e2c:	dec00304 	addi	sp,sp,12
 2002e30:	f800283a 	ret
 2002e34:	80c00017 	ldw	r3,0(r16)
 2002e38:	183ff926 	beq	r3,zero,2002e20 <_read_r+0x38>
 2002e3c:	88c00015 	stw	r3,0(r17)
 2002e40:	dfc00217 	ldw	ra,8(sp)
 2002e44:	dc400117 	ldw	r17,4(sp)
 2002e48:	dc000017 	ldw	r16,0(sp)
 2002e4c:	dec00304 	addi	sp,sp,12
 2002e50:	f800283a 	ret

02002e54 <__mulsi3>:
 2002e54:	0005883a 	mov	r2,zero
 2002e58:	20000726 	beq	r4,zero,2002e78 <__mulsi3+0x24>
 2002e5c:	20c0004c 	andi	r3,r4,1
 2002e60:	2008d07a 	srli	r4,r4,1
 2002e64:	18000126 	beq	r3,zero,2002e6c <__mulsi3+0x18>
 2002e68:	1145883a 	add	r2,r2,r5
 2002e6c:	294b883a 	add	r5,r5,r5
 2002e70:	203ffa1e 	bne	r4,zero,2002e5c <__mulsi3+0x8>
 2002e74:	f800283a 	ret
 2002e78:	f800283a 	ret

02002e7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2002e7c:	defffe04 	addi	sp,sp,-8
 2002e80:	dfc00115 	stw	ra,4(sp)
 2002e84:	df000015 	stw	fp,0(sp)
 2002e88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2002e8c:	00808034 	movhi	r2,512
 2002e90:	109be904 	addi	r2,r2,28580
 2002e94:	10800017 	ldw	r2,0(r2)
 2002e98:	10000526 	beq	r2,zero,2002eb0 <alt_get_errno+0x34>
 2002e9c:	00808034 	movhi	r2,512
 2002ea0:	109be904 	addi	r2,r2,28580
 2002ea4:	10800017 	ldw	r2,0(r2)
 2002ea8:	103ee83a 	callr	r2
 2002eac:	00000206 	br	2002eb8 <alt_get_errno+0x3c>
 2002eb0:	00808074 	movhi	r2,513
 2002eb4:	10a28404 	addi	r2,r2,-30192
}
 2002eb8:	e037883a 	mov	sp,fp
 2002ebc:	dfc00117 	ldw	ra,4(sp)
 2002ec0:	df000017 	ldw	fp,0(sp)
 2002ec4:	dec00204 	addi	sp,sp,8
 2002ec8:	f800283a 	ret

02002ecc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2002ecc:	defffb04 	addi	sp,sp,-20
 2002ed0:	dfc00415 	stw	ra,16(sp)
 2002ed4:	df000315 	stw	fp,12(sp)
 2002ed8:	df000304 	addi	fp,sp,12
 2002edc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2002ee0:	e0bfff17 	ldw	r2,-4(fp)
 2002ee4:	10000716 	blt	r2,zero,2002f04 <close+0x38>
 2002ee8:	e13fff17 	ldw	r4,-4(fp)
 2002eec:	01400304 	movi	r5,12
 2002ef0:	2002e540 	call	2002e54 <__mulsi3>
 2002ef4:	00c08034 	movhi	r3,512
 2002ef8:	18d76804 	addi	r3,r3,23968
 2002efc:	10c5883a 	add	r2,r2,r3
 2002f00:	00000106 	br	2002f08 <close+0x3c>
 2002f04:	0005883a 	mov	r2,zero
 2002f08:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 2002f0c:	e0bffd17 	ldw	r2,-12(fp)
 2002f10:	10001826 	beq	r2,zero,2002f74 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2002f14:	e0bffd17 	ldw	r2,-12(fp)
 2002f18:	10800017 	ldw	r2,0(r2)
 2002f1c:	10800417 	ldw	r2,16(r2)
 2002f20:	10000626 	beq	r2,zero,2002f3c <close+0x70>
 2002f24:	e0bffd17 	ldw	r2,-12(fp)
 2002f28:	10800017 	ldw	r2,0(r2)
 2002f2c:	10800417 	ldw	r2,16(r2)
 2002f30:	e13ffd17 	ldw	r4,-12(fp)
 2002f34:	103ee83a 	callr	r2
 2002f38:	00000106 	br	2002f40 <close+0x74>
 2002f3c:	0005883a 	mov	r2,zero
 2002f40:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2002f44:	e13fff17 	ldw	r4,-4(fp)
 2002f48:	200388c0 	call	200388c <alt_release_fd>
    if (rval < 0)
 2002f4c:	e0bffe17 	ldw	r2,-8(fp)
 2002f50:	1000060e 	bge	r2,zero,2002f6c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 2002f54:	2002e7c0 	call	2002e7c <alt_get_errno>
 2002f58:	e0fffe17 	ldw	r3,-8(fp)
 2002f5c:	00c7c83a 	sub	r3,zero,r3
 2002f60:	10c00015 	stw	r3,0(r2)
      return -1;
 2002f64:	00bfffc4 	movi	r2,-1
 2002f68:	00000606 	br	2002f84 <close+0xb8>
    }
    return 0;
 2002f6c:	0005883a 	mov	r2,zero
 2002f70:	00000406 	br	2002f84 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2002f74:	2002e7c0 	call	2002e7c <alt_get_errno>
 2002f78:	00c01444 	movi	r3,81
 2002f7c:	10c00015 	stw	r3,0(r2)
    return -1;
 2002f80:	00bfffc4 	movi	r2,-1
  }
}
 2002f84:	e037883a 	mov	sp,fp
 2002f88:	dfc00117 	ldw	ra,4(sp)
 2002f8c:	df000017 	ldw	fp,0(sp)
 2002f90:	dec00204 	addi	sp,sp,8
 2002f94:	f800283a 	ret

02002f98 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2002f98:	defffc04 	addi	sp,sp,-16
 2002f9c:	df000315 	stw	fp,12(sp)
 2002fa0:	df000304 	addi	fp,sp,12
 2002fa4:	e13ffd15 	stw	r4,-12(fp)
 2002fa8:	e17ffe15 	stw	r5,-8(fp)
 2002fac:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2002fb0:	e0bfff17 	ldw	r2,-4(fp)
}
 2002fb4:	e037883a 	mov	sp,fp
 2002fb8:	df000017 	ldw	fp,0(sp)
 2002fbc:	dec00104 	addi	sp,sp,4
 2002fc0:	f800283a 	ret

02002fc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2002fc4:	defffe04 	addi	sp,sp,-8
 2002fc8:	dfc00115 	stw	ra,4(sp)
 2002fcc:	df000015 	stw	fp,0(sp)
 2002fd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2002fd4:	00808034 	movhi	r2,512
 2002fd8:	109be904 	addi	r2,r2,28580
 2002fdc:	10800017 	ldw	r2,0(r2)
 2002fe0:	10000526 	beq	r2,zero,2002ff8 <alt_get_errno+0x34>
 2002fe4:	00808034 	movhi	r2,512
 2002fe8:	109be904 	addi	r2,r2,28580
 2002fec:	10800017 	ldw	r2,0(r2)
 2002ff0:	103ee83a 	callr	r2
 2002ff4:	00000206 	br	2003000 <alt_get_errno+0x3c>
 2002ff8:	00808074 	movhi	r2,513
 2002ffc:	10a28404 	addi	r2,r2,-30192
}
 2003000:	e037883a 	mov	sp,fp
 2003004:	dfc00117 	ldw	ra,4(sp)
 2003008:	df000017 	ldw	fp,0(sp)
 200300c:	dec00204 	addi	sp,sp,8
 2003010:	f800283a 	ret

02003014 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 2003014:	defffb04 	addi	sp,sp,-20
 2003018:	dfc00415 	stw	ra,16(sp)
 200301c:	df000315 	stw	fp,12(sp)
 2003020:	df000304 	addi	fp,sp,12
 2003024:	e13ffe15 	stw	r4,-8(fp)
 2003028:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200302c:	e0bffe17 	ldw	r2,-8(fp)
 2003030:	10000716 	blt	r2,zero,2003050 <fstat+0x3c>
 2003034:	e13ffe17 	ldw	r4,-8(fp)
 2003038:	01400304 	movi	r5,12
 200303c:	2002e540 	call	2002e54 <__mulsi3>
 2003040:	00c08034 	movhi	r3,512
 2003044:	18d76804 	addi	r3,r3,23968
 2003048:	10c5883a 	add	r2,r2,r3
 200304c:	00000106 	br	2003054 <fstat+0x40>
 2003050:	0005883a 	mov	r2,zero
 2003054:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 2003058:	e0bffd17 	ldw	r2,-12(fp)
 200305c:	10001026 	beq	r2,zero,20030a0 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 2003060:	e0bffd17 	ldw	r2,-12(fp)
 2003064:	10800017 	ldw	r2,0(r2)
 2003068:	10800817 	ldw	r2,32(r2)
 200306c:	10000726 	beq	r2,zero,200308c <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
 2003070:	e0bffd17 	ldw	r2,-12(fp)
 2003074:	10800017 	ldw	r2,0(r2)
 2003078:	10800817 	ldw	r2,32(r2)
 200307c:	e13ffd17 	ldw	r4,-12(fp)
 2003080:	e17fff17 	ldw	r5,-4(fp)
 2003084:	103ee83a 	callr	r2
 2003088:	00000906 	br	20030b0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 200308c:	e0bfff17 	ldw	r2,-4(fp)
 2003090:	00c80004 	movi	r3,8192
 2003094:	10c00115 	stw	r3,4(r2)
      return 0;
 2003098:	0005883a 	mov	r2,zero
 200309c:	00000406 	br	20030b0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20030a0:	2002fc40 	call	2002fc4 <alt_get_errno>
 20030a4:	00c01444 	movi	r3,81
 20030a8:	10c00015 	stw	r3,0(r2)
    return -1;
 20030ac:	00bfffc4 	movi	r2,-1
  }
}
 20030b0:	e037883a 	mov	sp,fp
 20030b4:	dfc00117 	ldw	ra,4(sp)
 20030b8:	df000017 	ldw	fp,0(sp)
 20030bc:	dec00204 	addi	sp,sp,8
 20030c0:	f800283a 	ret

020030c4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 20030c4:	defff904 	addi	sp,sp,-28
 20030c8:	dfc00615 	stw	ra,24(sp)
 20030cc:	df000515 	stw	fp,20(sp)
 20030d0:	df000504 	addi	fp,sp,20
 20030d4:	e13ffc15 	stw	r4,-16(fp)
 20030d8:	e17ffd15 	stw	r5,-12(fp)
 20030dc:	e1bffe15 	stw	r6,-8(fp)
 20030e0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 20030e4:	e0800217 	ldw	r2,8(fp)
 20030e8:	d8800015 	stw	r2,0(sp)
 20030ec:	e13ffc17 	ldw	r4,-16(fp)
 20030f0:	e17ffd17 	ldw	r5,-12(fp)
 20030f4:	e1bffe17 	ldw	r6,-8(fp)
 20030f8:	e1ffff17 	ldw	r7,-4(fp)
 20030fc:	200329c0 	call	200329c <alt_iic_isr_register>
}  
 2003100:	e037883a 	mov	sp,fp
 2003104:	dfc00117 	ldw	ra,4(sp)
 2003108:	df000017 	ldw	fp,0(sp)
 200310c:	dec00204 	addi	sp,sp,8
 2003110:	f800283a 	ret

02003114 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2003114:	defff904 	addi	sp,sp,-28
 2003118:	df000615 	stw	fp,24(sp)
 200311c:	df000604 	addi	fp,sp,24
 2003120:	e13ffe15 	stw	r4,-8(fp)
 2003124:	e17fff15 	stw	r5,-4(fp)
 2003128:	e0bfff17 	ldw	r2,-4(fp)
 200312c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2003130:	0005303a 	rdctl	r2,status
 2003134:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2003138:	e0fffb17 	ldw	r3,-20(fp)
 200313c:	00bfff84 	movi	r2,-2
 2003140:	1884703a 	and	r2,r3,r2
 2003144:	1001703a 	wrctl	status,r2
  
  return context;
 2003148:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 200314c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 2003150:	e0bffa17 	ldw	r2,-24(fp)
 2003154:	00c00044 	movi	r3,1
 2003158:	1884983a 	sll	r2,r3,r2
 200315c:	1007883a 	mov	r3,r2
 2003160:	00808074 	movhi	r2,513
 2003164:	10a28504 	addi	r2,r2,-30188
 2003168:	10800017 	ldw	r2,0(r2)
 200316c:	1886b03a 	or	r3,r3,r2
 2003170:	00808074 	movhi	r2,513
 2003174:	10a28504 	addi	r2,r2,-30188
 2003178:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 200317c:	00808074 	movhi	r2,513
 2003180:	10a28504 	addi	r2,r2,-30188
 2003184:	10800017 	ldw	r2,0(r2)
 2003188:	100170fa 	wrctl	ienable,r2
 200318c:	e0bffc17 	ldw	r2,-16(fp)
 2003190:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2003194:	e0bffd17 	ldw	r2,-12(fp)
 2003198:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 200319c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 20031a0:	e037883a 	mov	sp,fp
 20031a4:	df000017 	ldw	fp,0(sp)
 20031a8:	dec00104 	addi	sp,sp,4
 20031ac:	f800283a 	ret

020031b0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 20031b0:	defff904 	addi	sp,sp,-28
 20031b4:	df000615 	stw	fp,24(sp)
 20031b8:	df000604 	addi	fp,sp,24
 20031bc:	e13ffe15 	stw	r4,-8(fp)
 20031c0:	e17fff15 	stw	r5,-4(fp)
 20031c4:	e0bfff17 	ldw	r2,-4(fp)
 20031c8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20031cc:	0005303a 	rdctl	r2,status
 20031d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20031d4:	e0fffb17 	ldw	r3,-20(fp)
 20031d8:	00bfff84 	movi	r2,-2
 20031dc:	1884703a 	and	r2,r3,r2
 20031e0:	1001703a 	wrctl	status,r2
  
  return context;
 20031e4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 20031e8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 20031ec:	e0bffa17 	ldw	r2,-24(fp)
 20031f0:	00c00044 	movi	r3,1
 20031f4:	1884983a 	sll	r2,r3,r2
 20031f8:	0084303a 	nor	r2,zero,r2
 20031fc:	1007883a 	mov	r3,r2
 2003200:	00808074 	movhi	r2,513
 2003204:	10a28504 	addi	r2,r2,-30188
 2003208:	10800017 	ldw	r2,0(r2)
 200320c:	1886703a 	and	r3,r3,r2
 2003210:	00808074 	movhi	r2,513
 2003214:	10a28504 	addi	r2,r2,-30188
 2003218:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 200321c:	00808074 	movhi	r2,513
 2003220:	10a28504 	addi	r2,r2,-30188
 2003224:	10800017 	ldw	r2,0(r2)
 2003228:	100170fa 	wrctl	ienable,r2
 200322c:	e0bffc17 	ldw	r2,-16(fp)
 2003230:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2003234:	e0bffd17 	ldw	r2,-12(fp)
 2003238:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 200323c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 2003240:	e037883a 	mov	sp,fp
 2003244:	df000017 	ldw	fp,0(sp)
 2003248:	dec00104 	addi	sp,sp,4
 200324c:	f800283a 	ret

02003250 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2003250:	defffc04 	addi	sp,sp,-16
 2003254:	df000315 	stw	fp,12(sp)
 2003258:	df000304 	addi	fp,sp,12
 200325c:	e13ffe15 	stw	r4,-8(fp)
 2003260:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2003264:	000530fa 	rdctl	r2,ienable
 2003268:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 200326c:	e0bfff17 	ldw	r2,-4(fp)
 2003270:	00c00044 	movi	r3,1
 2003274:	1884983a 	sll	r2,r3,r2
 2003278:	1007883a 	mov	r3,r2
 200327c:	e0bffd17 	ldw	r2,-12(fp)
 2003280:	1884703a 	and	r2,r3,r2
 2003284:	1004c03a 	cmpne	r2,r2,zero
 2003288:	10803fcc 	andi	r2,r2,255
}
 200328c:	e037883a 	mov	sp,fp
 2003290:	df000017 	ldw	fp,0(sp)
 2003294:	dec00104 	addi	sp,sp,4
 2003298:	f800283a 	ret

0200329c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 200329c:	defff504 	addi	sp,sp,-44
 20032a0:	dfc00a15 	stw	ra,40(sp)
 20032a4:	df000915 	stw	fp,36(sp)
 20032a8:	df000904 	addi	fp,sp,36
 20032ac:	e13ffc15 	stw	r4,-16(fp)
 20032b0:	e17ffd15 	stw	r5,-12(fp)
 20032b4:	e1bffe15 	stw	r6,-8(fp)
 20032b8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 20032bc:	00bffa84 	movi	r2,-22
 20032c0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 20032c4:	e0bffd17 	ldw	r2,-12(fp)
 20032c8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 20032cc:	e0bff817 	ldw	r2,-32(fp)
 20032d0:	10800808 	cmpgei	r2,r2,32
 20032d4:	1000271e 	bne	r2,zero,2003374 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20032d8:	0005303a 	rdctl	r2,status
 20032dc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20032e0:	e0fffa17 	ldw	r3,-24(fp)
 20032e4:	00bfff84 	movi	r2,-2
 20032e8:	1884703a 	and	r2,r3,r2
 20032ec:	1001703a 	wrctl	status,r2
  
  return context;
 20032f0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 20032f4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 20032f8:	00c08074 	movhi	r3,513
 20032fc:	18e29504 	addi	r3,r3,-30124
 2003300:	e0bff817 	ldw	r2,-32(fp)
 2003304:	100490fa 	slli	r2,r2,3
 2003308:	1885883a 	add	r2,r3,r2
 200330c:	e0fffe17 	ldw	r3,-8(fp)
 2003310:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 2003314:	00c08074 	movhi	r3,513
 2003318:	18e29504 	addi	r3,r3,-30124
 200331c:	e0bff817 	ldw	r2,-32(fp)
 2003320:	100490fa 	slli	r2,r2,3
 2003324:	1885883a 	add	r2,r3,r2
 2003328:	10800104 	addi	r2,r2,4
 200332c:	e0ffff17 	ldw	r3,-4(fp)
 2003330:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2003334:	e0bffe17 	ldw	r2,-8(fp)
 2003338:	10000526 	beq	r2,zero,2003350 <alt_iic_isr_register+0xb4>
 200333c:	e0bff817 	ldw	r2,-32(fp)
 2003340:	e13ffc17 	ldw	r4,-16(fp)
 2003344:	100b883a 	mov	r5,r2
 2003348:	20031140 	call	2003114 <alt_ic_irq_enable>
 200334c:	00000406 	br	2003360 <alt_iic_isr_register+0xc4>
 2003350:	e0bff817 	ldw	r2,-32(fp)
 2003354:	e13ffc17 	ldw	r4,-16(fp)
 2003358:	100b883a 	mov	r5,r2
 200335c:	20031b00 	call	20031b0 <alt_ic_irq_disable>
 2003360:	e0bff715 	stw	r2,-36(fp)
 2003364:	e0bff917 	ldw	r2,-28(fp)
 2003368:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200336c:	e0bffb17 	ldw	r2,-20(fp)
 2003370:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 2003374:	e0bff717 	ldw	r2,-36(fp)
}
 2003378:	e037883a 	mov	sp,fp
 200337c:	dfc00117 	ldw	ra,4(sp)
 2003380:	df000017 	ldw	fp,0(sp)
 2003384:	dec00204 	addi	sp,sp,8
 2003388:	f800283a 	ret

0200338c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200338c:	defffe04 	addi	sp,sp,-8
 2003390:	dfc00115 	stw	ra,4(sp)
 2003394:	df000015 	stw	fp,0(sp)
 2003398:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200339c:	00808034 	movhi	r2,512
 20033a0:	109be904 	addi	r2,r2,28580
 20033a4:	10800017 	ldw	r2,0(r2)
 20033a8:	10000526 	beq	r2,zero,20033c0 <alt_get_errno+0x34>
 20033ac:	00808034 	movhi	r2,512
 20033b0:	109be904 	addi	r2,r2,28580
 20033b4:	10800017 	ldw	r2,0(r2)
 20033b8:	103ee83a 	callr	r2
 20033bc:	00000206 	br	20033c8 <alt_get_errno+0x3c>
 20033c0:	00808074 	movhi	r2,513
 20033c4:	10a28404 	addi	r2,r2,-30192
}
 20033c8:	e037883a 	mov	sp,fp
 20033cc:	dfc00117 	ldw	ra,4(sp)
 20033d0:	df000017 	ldw	fp,0(sp)
 20033d4:	dec00204 	addi	sp,sp,8
 20033d8:	f800283a 	ret

020033dc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 20033dc:	deffed04 	addi	sp,sp,-76
 20033e0:	dfc01215 	stw	ra,72(sp)
 20033e4:	df001115 	stw	fp,68(sp)
 20033e8:	df001104 	addi	fp,sp,68
 20033ec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20033f0:	e0bfff17 	ldw	r2,-4(fp)
 20033f4:	10000716 	blt	r2,zero,2003414 <isatty+0x38>
 20033f8:	e13fff17 	ldw	r4,-4(fp)
 20033fc:	01400304 	movi	r5,12
 2003400:	2002e540 	call	2002e54 <__mulsi3>
 2003404:	00c08034 	movhi	r3,512
 2003408:	18d76804 	addi	r3,r3,23968
 200340c:	10c5883a 	add	r2,r2,r3
 2003410:	00000106 	br	2003418 <isatty+0x3c>
 2003414:	0005883a 	mov	r2,zero
 2003418:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 200341c:	e0bfef17 	ldw	r2,-68(fp)
 2003420:	10000e26 	beq	r2,zero,200345c <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 2003424:	e0bfef17 	ldw	r2,-68(fp)
 2003428:	10800017 	ldw	r2,0(r2)
 200342c:	10800817 	ldw	r2,32(r2)
 2003430:	1000021e 	bne	r2,zero,200343c <isatty+0x60>
    {
      return 1;
 2003434:	00800044 	movi	r2,1
 2003438:	00000c06 	br	200346c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 200343c:	e0bff004 	addi	r2,fp,-64
 2003440:	e13fff17 	ldw	r4,-4(fp)
 2003444:	100b883a 	mov	r5,r2
 2003448:	20030140 	call	2003014 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 200344c:	e0bff117 	ldw	r2,-60(fp)
 2003450:	10880020 	cmpeqi	r2,r2,8192
 2003454:	10803fcc 	andi	r2,r2,255
 2003458:	00000406 	br	200346c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200345c:	200338c0 	call	200338c <alt_get_errno>
 2003460:	00c01444 	movi	r3,81
 2003464:	10c00015 	stw	r3,0(r2)
    return 0;
 2003468:	0005883a 	mov	r2,zero
  }
}
 200346c:	e037883a 	mov	sp,fp
 2003470:	dfc00117 	ldw	ra,4(sp)
 2003474:	df000017 	ldw	fp,0(sp)
 2003478:	dec00204 	addi	sp,sp,8
 200347c:	f800283a 	ret

02003480 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 2003480:	defffc04 	addi	sp,sp,-16
 2003484:	df000315 	stw	fp,12(sp)
 2003488:	df000304 	addi	fp,sp,12
 200348c:	e13ffd15 	stw	r4,-12(fp)
 2003490:	e17ffe15 	stw	r5,-8(fp)
 2003494:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 2003498:	e0fffe17 	ldw	r3,-8(fp)
 200349c:	e0bffd17 	ldw	r2,-12(fp)
 20034a0:	18800e26 	beq	r3,r2,20034dc <alt_load_section+0x5c>
  {
    while( to != end )
 20034a4:	00000a06 	br	20034d0 <alt_load_section+0x50>
    {
      *to++ = *from++;
 20034a8:	e0bffd17 	ldw	r2,-12(fp)
 20034ac:	10c00017 	ldw	r3,0(r2)
 20034b0:	e0bffe17 	ldw	r2,-8(fp)
 20034b4:	10c00015 	stw	r3,0(r2)
 20034b8:	e0bffe17 	ldw	r2,-8(fp)
 20034bc:	10800104 	addi	r2,r2,4
 20034c0:	e0bffe15 	stw	r2,-8(fp)
 20034c4:	e0bffd17 	ldw	r2,-12(fp)
 20034c8:	10800104 	addi	r2,r2,4
 20034cc:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 20034d0:	e0fffe17 	ldw	r3,-8(fp)
 20034d4:	e0bfff17 	ldw	r2,-4(fp)
 20034d8:	18bff31e 	bne	r3,r2,20034a8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 20034dc:	e037883a 	mov	sp,fp
 20034e0:	df000017 	ldw	fp,0(sp)
 20034e4:	dec00104 	addi	sp,sp,4
 20034e8:	f800283a 	ret

020034ec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 20034ec:	defffe04 	addi	sp,sp,-8
 20034f0:	dfc00115 	stw	ra,4(sp)
 20034f4:	df000015 	stw	fp,0(sp)
 20034f8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 20034fc:	01008034 	movhi	r4,512
 2003500:	211bee04 	addi	r4,r4,28600
 2003504:	01408034 	movhi	r5,512
 2003508:	29555c04 	addi	r5,r5,21872
 200350c:	01808034 	movhi	r6,512
 2003510:	319bee04 	addi	r6,r6,28600
 2003514:	20034800 	call	2003480 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2003518:	01008034 	movhi	r4,512
 200351c:	21000804 	addi	r4,r4,32
 2003520:	01410074 	movhi	r5,1025
 2003524:	29600804 	addi	r5,r5,-32736
 2003528:	01810074 	movhi	r6,1025
 200352c:	31a06e04 	addi	r6,r6,-32328
 2003530:	20034800 	call	2003480 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 2003534:	01008034 	movhi	r4,512
 2003538:	21154a04 	addi	r4,r4,21800
 200353c:	01408034 	movhi	r5,512
 2003540:	29554a04 	addi	r5,r5,21800
 2003544:	01808034 	movhi	r6,512
 2003548:	31955c04 	addi	r6,r6,21872
 200354c:	20034800 	call	2003480 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2003550:	20047500 	call	2004750 <alt_dcache_flush_all>
  alt_icache_flush_all();
 2003554:	20049140 	call	2004914 <alt_icache_flush_all>
}
 2003558:	e037883a 	mov	sp,fp
 200355c:	dfc00117 	ldw	ra,4(sp)
 2003560:	df000017 	ldw	fp,0(sp)
 2003564:	dec00204 	addi	sp,sp,8
 2003568:	f800283a 	ret

0200356c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200356c:	defffe04 	addi	sp,sp,-8
 2003570:	dfc00115 	stw	ra,4(sp)
 2003574:	df000015 	stw	fp,0(sp)
 2003578:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200357c:	00808034 	movhi	r2,512
 2003580:	109be904 	addi	r2,r2,28580
 2003584:	10800017 	ldw	r2,0(r2)
 2003588:	10000526 	beq	r2,zero,20035a0 <alt_get_errno+0x34>
 200358c:	00808034 	movhi	r2,512
 2003590:	109be904 	addi	r2,r2,28580
 2003594:	10800017 	ldw	r2,0(r2)
 2003598:	103ee83a 	callr	r2
 200359c:	00000206 	br	20035a8 <alt_get_errno+0x3c>
 20035a0:	00808074 	movhi	r2,513
 20035a4:	10a28404 	addi	r2,r2,-30192
}
 20035a8:	e037883a 	mov	sp,fp
 20035ac:	dfc00117 	ldw	ra,4(sp)
 20035b0:	df000017 	ldw	fp,0(sp)
 20035b4:	dec00204 	addi	sp,sp,8
 20035b8:	f800283a 	ret

020035bc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 20035bc:	defff904 	addi	sp,sp,-28
 20035c0:	dfc00615 	stw	ra,24(sp)
 20035c4:	df000515 	stw	fp,20(sp)
 20035c8:	df000504 	addi	fp,sp,20
 20035cc:	e13ffd15 	stw	r4,-12(fp)
 20035d0:	e17ffe15 	stw	r5,-8(fp)
 20035d4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 20035d8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20035dc:	e0bffd17 	ldw	r2,-12(fp)
 20035e0:	10000716 	blt	r2,zero,2003600 <lseek+0x44>
 20035e4:	e13ffd17 	ldw	r4,-12(fp)
 20035e8:	01400304 	movi	r5,12
 20035ec:	2002e540 	call	2002e54 <__mulsi3>
 20035f0:	00c08034 	movhi	r3,512
 20035f4:	18d76804 	addi	r3,r3,23968
 20035f8:	10c5883a 	add	r2,r2,r3
 20035fc:	00000106 	br	2003604 <lseek+0x48>
 2003600:	0005883a 	mov	r2,zero
 2003604:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 2003608:	e0bffc17 	ldw	r2,-16(fp)
 200360c:	10001026 	beq	r2,zero,2003650 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 2003610:	e0bffc17 	ldw	r2,-16(fp)
 2003614:	10800017 	ldw	r2,0(r2)
 2003618:	10800717 	ldw	r2,28(r2)
 200361c:	10000926 	beq	r2,zero,2003644 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 2003620:	e0bffc17 	ldw	r2,-16(fp)
 2003624:	10800017 	ldw	r2,0(r2)
 2003628:	10800717 	ldw	r2,28(r2)
 200362c:	e13ffc17 	ldw	r4,-16(fp)
 2003630:	e17ffe17 	ldw	r5,-8(fp)
 2003634:	e1bfff17 	ldw	r6,-4(fp)
 2003638:	103ee83a 	callr	r2
 200363c:	e0bffb15 	stw	r2,-20(fp)
 2003640:	00000506 	br	2003658 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 2003644:	00bfde84 	movi	r2,-134
 2003648:	e0bffb15 	stw	r2,-20(fp)
 200364c:	00000206 	br	2003658 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
 2003650:	00bfebc4 	movi	r2,-81
 2003654:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 2003658:	e0bffb17 	ldw	r2,-20(fp)
 200365c:	1000060e 	bge	r2,zero,2003678 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 2003660:	200356c0 	call	200356c <alt_get_errno>
 2003664:	e0fffb17 	ldw	r3,-20(fp)
 2003668:	00c7c83a 	sub	r3,zero,r3
 200366c:	10c00015 	stw	r3,0(r2)
    rc = -1;
 2003670:	00bfffc4 	movi	r2,-1
 2003674:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 2003678:	e0bffb17 	ldw	r2,-20(fp)
}
 200367c:	e037883a 	mov	sp,fp
 2003680:	dfc00117 	ldw	ra,4(sp)
 2003684:	df000017 	ldw	fp,0(sp)
 2003688:	dec00204 	addi	sp,sp,8
 200368c:	f800283a 	ret

02003690 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2003690:	defffd04 	addi	sp,sp,-12
 2003694:	dfc00215 	stw	ra,8(sp)
 2003698:	df000115 	stw	fp,4(sp)
 200369c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 20036a0:	0009883a 	mov	r4,zero
 20036a4:	2003b340 	call	2003b34 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 20036a8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 20036ac:	2003b680 	call	2003b68 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 20036b0:	01008034 	movhi	r4,512
 20036b4:	21155404 	addi	r4,r4,21840
 20036b8:	01408034 	movhi	r5,512
 20036bc:	29555404 	addi	r5,r5,21840
 20036c0:	01808034 	movhi	r6,512
 20036c4:	31955404 	addi	r6,r6,21840
 20036c8:	2004a100 	call	2004a10 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 20036cc:	200485c0 	call	200485c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 20036d0:	01008034 	movhi	r4,512
 20036d4:	21122e04 	addi	r4,r4,18616
 20036d8:	20051540 	call	2005154 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 20036dc:	d126a617 	ldw	r4,-25960(gp)
 20036e0:	d0e6a717 	ldw	r3,-25956(gp)
 20036e4:	d0a6a817 	ldw	r2,-25952(gp)
 20036e8:	180b883a 	mov	r5,r3
 20036ec:	100d883a 	mov	r6,r2
 20036f0:	20002bc0 	call	20002bc <main>
 20036f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 20036f8:	01000044 	movi	r4,1
 20036fc:	2002ecc0 	call	2002ecc <close>
  exit (result);
 2003700:	e13fff17 	ldw	r4,-4(fp)
 2003704:	20051680 	call	2005168 <exit>

02003708 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 2003708:	defffe04 	addi	sp,sp,-8
 200370c:	df000115 	stw	fp,4(sp)
 2003710:	df000104 	addi	fp,sp,4
 2003714:	e13fff15 	stw	r4,-4(fp)
}
 2003718:	e037883a 	mov	sp,fp
 200371c:	df000017 	ldw	fp,0(sp)
 2003720:	dec00104 	addi	sp,sp,4
 2003724:	f800283a 	ret

02003728 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2003728:	defffe04 	addi	sp,sp,-8
 200372c:	df000115 	stw	fp,4(sp)
 2003730:	df000104 	addi	fp,sp,4
 2003734:	e13fff15 	stw	r4,-4(fp)
}
 2003738:	e037883a 	mov	sp,fp
 200373c:	df000017 	ldw	fp,0(sp)
 2003740:	dec00104 	addi	sp,sp,4
 2003744:	f800283a 	ret

02003748 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003748:	defffe04 	addi	sp,sp,-8
 200374c:	dfc00115 	stw	ra,4(sp)
 2003750:	df000015 	stw	fp,0(sp)
 2003754:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2003758:	00808034 	movhi	r2,512
 200375c:	109be904 	addi	r2,r2,28580
 2003760:	10800017 	ldw	r2,0(r2)
 2003764:	10000526 	beq	r2,zero,200377c <alt_get_errno+0x34>
 2003768:	00808034 	movhi	r2,512
 200376c:	109be904 	addi	r2,r2,28580
 2003770:	10800017 	ldw	r2,0(r2)
 2003774:	103ee83a 	callr	r2
 2003778:	00000206 	br	2003784 <alt_get_errno+0x3c>
 200377c:	00808074 	movhi	r2,513
 2003780:	10a28404 	addi	r2,r2,-30192
}
 2003784:	e037883a 	mov	sp,fp
 2003788:	dfc00117 	ldw	ra,4(sp)
 200378c:	df000017 	ldw	fp,0(sp)
 2003790:	dec00204 	addi	sp,sp,8
 2003794:	f800283a 	ret

02003798 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 2003798:	defff904 	addi	sp,sp,-28
 200379c:	dfc00615 	stw	ra,24(sp)
 20037a0:	df000515 	stw	fp,20(sp)
 20037a4:	df000504 	addi	fp,sp,20
 20037a8:	e13ffd15 	stw	r4,-12(fp)
 20037ac:	e17ffe15 	stw	r5,-8(fp)
 20037b0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20037b4:	e0bffd17 	ldw	r2,-12(fp)
 20037b8:	10000716 	blt	r2,zero,20037d8 <read+0x40>
 20037bc:	e13ffd17 	ldw	r4,-12(fp)
 20037c0:	01400304 	movi	r5,12
 20037c4:	2002e540 	call	2002e54 <__mulsi3>
 20037c8:	00c08034 	movhi	r3,512
 20037cc:	18d76804 	addi	r3,r3,23968
 20037d0:	10c5883a 	add	r2,r2,r3
 20037d4:	00000106 	br	20037dc <read+0x44>
 20037d8:	0005883a 	mov	r2,zero
 20037dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 20037e0:	e0bffb17 	ldw	r2,-20(fp)
 20037e4:	10002026 	beq	r2,zero,2003868 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 20037e8:	e0bffb17 	ldw	r2,-20(fp)
 20037ec:	10800217 	ldw	r2,8(r2)
 20037f0:	108000cc 	andi	r2,r2,3
 20037f4:	10800060 	cmpeqi	r2,r2,1
 20037f8:	1000171e 	bne	r2,zero,2003858 <read+0xc0>
        (fd->dev->read))
 20037fc:	e0bffb17 	ldw	r2,-20(fp)
 2003800:	10800017 	ldw	r2,0(r2)
 2003804:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2003808:	10001326 	beq	r2,zero,2003858 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 200380c:	e0bffb17 	ldw	r2,-20(fp)
 2003810:	10800017 	ldw	r2,0(r2)
 2003814:	10c00517 	ldw	r3,20(r2)
 2003818:	e0bfff17 	ldw	r2,-4(fp)
 200381c:	e13ffb17 	ldw	r4,-20(fp)
 2003820:	e17ffe17 	ldw	r5,-8(fp)
 2003824:	100d883a 	mov	r6,r2
 2003828:	183ee83a 	callr	r3
 200382c:	e0bffc15 	stw	r2,-16(fp)
 2003830:	e0bffc17 	ldw	r2,-16(fp)
 2003834:	1000060e 	bge	r2,zero,2003850 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 2003838:	20037480 	call	2003748 <alt_get_errno>
 200383c:	e0fffc17 	ldw	r3,-16(fp)
 2003840:	00c7c83a 	sub	r3,zero,r3
 2003844:	10c00015 	stw	r3,0(r2)
          return -1;
 2003848:	00bfffc4 	movi	r2,-1
 200384c:	00000a06 	br	2003878 <read+0xe0>
        }
        return rval;
 2003850:	e0bffc17 	ldw	r2,-16(fp)
 2003854:	00000806 	br	2003878 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 2003858:	20037480 	call	2003748 <alt_get_errno>
 200385c:	00c00344 	movi	r3,13
 2003860:	10c00015 	stw	r3,0(r2)
 2003864:	00000306 	br	2003874 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 2003868:	20037480 	call	2003748 <alt_get_errno>
 200386c:	00c01444 	movi	r3,81
 2003870:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 2003874:	00bfffc4 	movi	r2,-1
}
 2003878:	e037883a 	mov	sp,fp
 200387c:	dfc00117 	ldw	ra,4(sp)
 2003880:	df000017 	ldw	fp,0(sp)
 2003884:	dec00204 	addi	sp,sp,8
 2003888:	f800283a 	ret

0200388c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 200388c:	defffc04 	addi	sp,sp,-16
 2003890:	dfc00315 	stw	ra,12(sp)
 2003894:	df000215 	stw	fp,8(sp)
 2003898:	dc000115 	stw	r16,4(sp)
 200389c:	df000104 	addi	fp,sp,4
 20038a0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 20038a4:	e0bfff17 	ldw	r2,-4(fp)
 20038a8:	108000d0 	cmplti	r2,r2,3
 20038ac:	1000111e 	bne	r2,zero,20038f4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 20038b0:	04008034 	movhi	r16,512
 20038b4:	84176804 	addi	r16,r16,23968
 20038b8:	e0bfff17 	ldw	r2,-4(fp)
 20038bc:	1009883a 	mov	r4,r2
 20038c0:	01400304 	movi	r5,12
 20038c4:	2002e540 	call	2002e54 <__mulsi3>
 20038c8:	8085883a 	add	r2,r16,r2
 20038cc:	10800204 	addi	r2,r2,8
 20038d0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 20038d4:	04008034 	movhi	r16,512
 20038d8:	84176804 	addi	r16,r16,23968
 20038dc:	e0bfff17 	ldw	r2,-4(fp)
 20038e0:	1009883a 	mov	r4,r2
 20038e4:	01400304 	movi	r5,12
 20038e8:	2002e540 	call	2002e54 <__mulsi3>
 20038ec:	8085883a 	add	r2,r16,r2
 20038f0:	10000015 	stw	zero,0(r2)
  }
}
 20038f4:	e037883a 	mov	sp,fp
 20038f8:	dfc00217 	ldw	ra,8(sp)
 20038fc:	df000117 	ldw	fp,4(sp)
 2003900:	dc000017 	ldw	r16,0(sp)
 2003904:	dec00304 	addi	sp,sp,12
 2003908:	f800283a 	ret

0200390c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 200390c:	defff904 	addi	sp,sp,-28
 2003910:	df000615 	stw	fp,24(sp)
 2003914:	df000604 	addi	fp,sp,24
 2003918:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200391c:	0005303a 	rdctl	r2,status
 2003920:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2003924:	e0fffc17 	ldw	r3,-16(fp)
 2003928:	00bfff84 	movi	r2,-2
 200392c:	1884703a 	and	r2,r3,r2
 2003930:	1001703a 	wrctl	status,r2
  
  return context;
 2003934:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 2003938:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 200393c:	d0a00b17 	ldw	r2,-32724(gp)
 2003940:	10c000c4 	addi	r3,r2,3
 2003944:	00bfff04 	movi	r2,-4
 2003948:	1884703a 	and	r2,r3,r2
 200394c:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2003950:	d0e00b17 	ldw	r3,-32724(gp)
 2003954:	e0bfff17 	ldw	r2,-4(fp)
 2003958:	1885883a 	add	r2,r3,r2
 200395c:	00c10034 	movhi	r3,1024
 2003960:	18c00004 	addi	r3,r3,0
 2003964:	1880062e 	bgeu	r3,r2,2003980 <sbrk+0x74>
 2003968:	e0bffa17 	ldw	r2,-24(fp)
 200396c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2003970:	e0bffd17 	ldw	r2,-12(fp)
 2003974:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 2003978:	00bfffc4 	movi	r2,-1
 200397c:	00000b06 	br	20039ac <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 2003980:	d0a00b17 	ldw	r2,-32724(gp)
 2003984:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 2003988:	d0e00b17 	ldw	r3,-32724(gp)
 200398c:	e0bfff17 	ldw	r2,-4(fp)
 2003990:	1885883a 	add	r2,r3,r2
 2003994:	d0a00b15 	stw	r2,-32724(gp)
 2003998:	e0bffa17 	ldw	r2,-24(fp)
 200399c:	e0bffe15 	stw	r2,-8(fp)
 20039a0:	e0bffe17 	ldw	r2,-8(fp)
 20039a4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 20039a8:	e0bffb17 	ldw	r2,-20(fp)
} 
 20039ac:	e037883a 	mov	sp,fp
 20039b0:	df000017 	ldw	fp,0(sp)
 20039b4:	dec00104 	addi	sp,sp,4
 20039b8:	f800283a 	ret

020039bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20039bc:	defffe04 	addi	sp,sp,-8
 20039c0:	dfc00115 	stw	ra,4(sp)
 20039c4:	df000015 	stw	fp,0(sp)
 20039c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20039cc:	00808034 	movhi	r2,512
 20039d0:	109be904 	addi	r2,r2,28580
 20039d4:	10800017 	ldw	r2,0(r2)
 20039d8:	10000526 	beq	r2,zero,20039f0 <alt_get_errno+0x34>
 20039dc:	00808034 	movhi	r2,512
 20039e0:	109be904 	addi	r2,r2,28580
 20039e4:	10800017 	ldw	r2,0(r2)
 20039e8:	103ee83a 	callr	r2
 20039ec:	00000206 	br	20039f8 <alt_get_errno+0x3c>
 20039f0:	00808074 	movhi	r2,513
 20039f4:	10a28404 	addi	r2,r2,-30192
}
 20039f8:	e037883a 	mov	sp,fp
 20039fc:	dfc00117 	ldw	ra,4(sp)
 2003a00:	df000017 	ldw	fp,0(sp)
 2003a04:	dec00204 	addi	sp,sp,8
 2003a08:	f800283a 	ret

02003a0c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2003a0c:	defff904 	addi	sp,sp,-28
 2003a10:	dfc00615 	stw	ra,24(sp)
 2003a14:	df000515 	stw	fp,20(sp)
 2003a18:	df000504 	addi	fp,sp,20
 2003a1c:	e13ffd15 	stw	r4,-12(fp)
 2003a20:	e17ffe15 	stw	r5,-8(fp)
 2003a24:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2003a28:	e0bffd17 	ldw	r2,-12(fp)
 2003a2c:	10000716 	blt	r2,zero,2003a4c <write+0x40>
 2003a30:	e13ffd17 	ldw	r4,-12(fp)
 2003a34:	01400304 	movi	r5,12
 2003a38:	2002e540 	call	2002e54 <__mulsi3>
 2003a3c:	00c08034 	movhi	r3,512
 2003a40:	18d76804 	addi	r3,r3,23968
 2003a44:	10c5883a 	add	r2,r2,r3
 2003a48:	00000106 	br	2003a50 <write+0x44>
 2003a4c:	0005883a 	mov	r2,zero
 2003a50:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2003a54:	e0bffb17 	ldw	r2,-20(fp)
 2003a58:	10001f26 	beq	r2,zero,2003ad8 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 2003a5c:	e0bffb17 	ldw	r2,-20(fp)
 2003a60:	10800217 	ldw	r2,8(r2)
 2003a64:	108000cc 	andi	r2,r2,3
 2003a68:	10001726 	beq	r2,zero,2003ac8 <write+0xbc>
 2003a6c:	e0bffb17 	ldw	r2,-20(fp)
 2003a70:	10800017 	ldw	r2,0(r2)
 2003a74:	10800617 	ldw	r2,24(r2)
 2003a78:	10001326 	beq	r2,zero,2003ac8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 2003a7c:	e0bffb17 	ldw	r2,-20(fp)
 2003a80:	10800017 	ldw	r2,0(r2)
 2003a84:	10c00617 	ldw	r3,24(r2)
 2003a88:	e0bfff17 	ldw	r2,-4(fp)
 2003a8c:	e13ffb17 	ldw	r4,-20(fp)
 2003a90:	e17ffe17 	ldw	r5,-8(fp)
 2003a94:	100d883a 	mov	r6,r2
 2003a98:	183ee83a 	callr	r3
 2003a9c:	e0bffc15 	stw	r2,-16(fp)
 2003aa0:	e0bffc17 	ldw	r2,-16(fp)
 2003aa4:	1000060e 	bge	r2,zero,2003ac0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 2003aa8:	20039bc0 	call	20039bc <alt_get_errno>
 2003aac:	e0fffc17 	ldw	r3,-16(fp)
 2003ab0:	00c7c83a 	sub	r3,zero,r3
 2003ab4:	10c00015 	stw	r3,0(r2)
        return -1;
 2003ab8:	00bfffc4 	movi	r2,-1
 2003abc:	00000a06 	br	2003ae8 <write+0xdc>
      }
      return rval;
 2003ac0:	e0bffc17 	ldw	r2,-16(fp)
 2003ac4:	00000806 	br	2003ae8 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
 2003ac8:	20039bc0 	call	20039bc <alt_get_errno>
 2003acc:	00c00344 	movi	r3,13
 2003ad0:	10c00015 	stw	r3,0(r2)
 2003ad4:	00000306 	br	2003ae4 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 2003ad8:	20039bc0 	call	20039bc <alt_get_errno>
 2003adc:	00c01444 	movi	r3,81
 2003ae0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 2003ae4:	00bfffc4 	movi	r2,-1
}
 2003ae8:	e037883a 	mov	sp,fp
 2003aec:	dfc00117 	ldw	ra,4(sp)
 2003af0:	df000017 	ldw	fp,0(sp)
 2003af4:	dec00204 	addi	sp,sp,8
 2003af8:	f800283a 	ret

02003afc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 2003afc:	defffd04 	addi	sp,sp,-12
 2003b00:	dfc00215 	stw	ra,8(sp)
 2003b04:	df000115 	stw	fp,4(sp)
 2003b08:	df000104 	addi	fp,sp,4
 2003b0c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 2003b10:	e13fff17 	ldw	r4,-4(fp)
 2003b14:	01408034 	movhi	r5,512
 2003b18:	295be604 	addi	r5,r5,28568
 2003b1c:	20047bc0 	call	20047bc <alt_dev_llist_insert>
}
 2003b20:	e037883a 	mov	sp,fp
 2003b24:	dfc00117 	ldw	ra,4(sp)
 2003b28:	df000017 	ldw	fp,0(sp)
 2003b2c:	dec00204 	addi	sp,sp,8
 2003b30:	f800283a 	ret

02003b34 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2003b34:	defffd04 	addi	sp,sp,-12
 2003b38:	dfc00215 	stw	ra,8(sp)
 2003b3c:	df000115 	stw	fp,4(sp)
 2003b40:	df000104 	addi	fp,sp,4
 2003b44:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 2003b48:	2004ebc0 	call	2004ebc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2003b4c:	00800044 	movi	r2,1
 2003b50:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2003b54:	e037883a 	mov	sp,fp
 2003b58:	dfc00117 	ldw	ra,4(sp)
 2003b5c:	df000017 	ldw	fp,0(sp)
 2003b60:	dec00204 	addi	sp,sp,8
 2003b64:	f800283a 	ret

02003b68 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2003b68:	defffe04 	addi	sp,sp,-8
 2003b6c:	dfc00115 	stw	ra,4(sp)
 2003b70:	df000015 	stw	fp,0(sp)
 2003b74:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 2003b78:	01008034 	movhi	r4,512
 2003b7c:	2117d204 	addi	r4,r4,24392
 2003b80:	000b883a 	mov	r5,zero
 2003b84:	000d883a 	mov	r6,zero
 2003b88:	2003d100 	call	2003d10 <altera_avalon_jtag_uart_init>
 2003b8c:	01008034 	movhi	r4,512
 2003b90:	2117c804 	addi	r4,r4,24352
 2003b94:	2003afc0 	call	2003afc <alt_dev_reg>
}
 2003b98:	e037883a 	mov	sp,fp
 2003b9c:	dfc00117 	ldw	ra,4(sp)
 2003ba0:	df000017 	ldw	fp,0(sp)
 2003ba4:	dec00204 	addi	sp,sp,8
 2003ba8:	f800283a 	ret

02003bac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2003bac:	defffa04 	addi	sp,sp,-24
 2003bb0:	dfc00515 	stw	ra,20(sp)
 2003bb4:	df000415 	stw	fp,16(sp)
 2003bb8:	df000404 	addi	fp,sp,16
 2003bbc:	e13ffd15 	stw	r4,-12(fp)
 2003bc0:	e17ffe15 	stw	r5,-8(fp)
 2003bc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2003bc8:	e0bffd17 	ldw	r2,-12(fp)
 2003bcc:	10800017 	ldw	r2,0(r2)
 2003bd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2003bd4:	e0bffc17 	ldw	r2,-16(fp)
 2003bd8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 2003bdc:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2003be0:	10800217 	ldw	r2,8(r2)
 2003be4:	1809883a 	mov	r4,r3
 2003be8:	e17ffe17 	ldw	r5,-8(fp)
 2003bec:	e1bfff17 	ldw	r6,-4(fp)
 2003bf0:	100f883a 	mov	r7,r2
 2003bf4:	20041d40 	call	20041d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 2003bf8:	e037883a 	mov	sp,fp
 2003bfc:	dfc00117 	ldw	ra,4(sp)
 2003c00:	df000017 	ldw	fp,0(sp)
 2003c04:	dec00204 	addi	sp,sp,8
 2003c08:	f800283a 	ret

02003c0c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2003c0c:	defffa04 	addi	sp,sp,-24
 2003c10:	dfc00515 	stw	ra,20(sp)
 2003c14:	df000415 	stw	fp,16(sp)
 2003c18:	df000404 	addi	fp,sp,16
 2003c1c:	e13ffd15 	stw	r4,-12(fp)
 2003c20:	e17ffe15 	stw	r5,-8(fp)
 2003c24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2003c28:	e0bffd17 	ldw	r2,-12(fp)
 2003c2c:	10800017 	ldw	r2,0(r2)
 2003c30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2003c34:	e0bffc17 	ldw	r2,-16(fp)
 2003c38:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 2003c3c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2003c40:	10800217 	ldw	r2,8(r2)
 2003c44:	1809883a 	mov	r4,r3
 2003c48:	e17ffe17 	ldw	r5,-8(fp)
 2003c4c:	e1bfff17 	ldw	r6,-4(fp)
 2003c50:	100f883a 	mov	r7,r2
 2003c54:	20043ec0 	call	20043ec <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2003c58:	e037883a 	mov	sp,fp
 2003c5c:	dfc00117 	ldw	ra,4(sp)
 2003c60:	df000017 	ldw	fp,0(sp)
 2003c64:	dec00204 	addi	sp,sp,8
 2003c68:	f800283a 	ret

02003c6c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2003c6c:	defffc04 	addi	sp,sp,-16
 2003c70:	dfc00315 	stw	ra,12(sp)
 2003c74:	df000215 	stw	fp,8(sp)
 2003c78:	df000204 	addi	fp,sp,8
 2003c7c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2003c80:	e0bfff17 	ldw	r2,-4(fp)
 2003c84:	10800017 	ldw	r2,0(r2)
 2003c88:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2003c8c:	e0bffe17 	ldw	r2,-8(fp)
 2003c90:	10c00a04 	addi	r3,r2,40
 2003c94:	e0bfff17 	ldw	r2,-4(fp)
 2003c98:	10800217 	ldw	r2,8(r2)
 2003c9c:	1809883a 	mov	r4,r3
 2003ca0:	100b883a 	mov	r5,r2
 2003ca4:	20040780 	call	2004078 <altera_avalon_jtag_uart_close>
}
 2003ca8:	e037883a 	mov	sp,fp
 2003cac:	dfc00117 	ldw	ra,4(sp)
 2003cb0:	df000017 	ldw	fp,0(sp)
 2003cb4:	dec00204 	addi	sp,sp,8
 2003cb8:	f800283a 	ret

02003cbc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2003cbc:	defffa04 	addi	sp,sp,-24
 2003cc0:	dfc00515 	stw	ra,20(sp)
 2003cc4:	df000415 	stw	fp,16(sp)
 2003cc8:	df000404 	addi	fp,sp,16
 2003ccc:	e13ffd15 	stw	r4,-12(fp)
 2003cd0:	e17ffe15 	stw	r5,-8(fp)
 2003cd4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2003cd8:	e0bffd17 	ldw	r2,-12(fp)
 2003cdc:	10800017 	ldw	r2,0(r2)
 2003ce0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 2003ce4:	e0bffc17 	ldw	r2,-16(fp)
 2003ce8:	10800a04 	addi	r2,r2,40
 2003cec:	1009883a 	mov	r4,r2
 2003cf0:	e17ffe17 	ldw	r5,-8(fp)
 2003cf4:	e1bfff17 	ldw	r6,-4(fp)
 2003cf8:	20040e00 	call	20040e0 <altera_avalon_jtag_uart_ioctl>
}
 2003cfc:	e037883a 	mov	sp,fp
 2003d00:	dfc00117 	ldw	ra,4(sp)
 2003d04:	df000017 	ldw	fp,0(sp)
 2003d08:	dec00204 	addi	sp,sp,8
 2003d0c:	f800283a 	ret

02003d10 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 2003d10:	defffa04 	addi	sp,sp,-24
 2003d14:	dfc00515 	stw	ra,20(sp)
 2003d18:	df000415 	stw	fp,16(sp)
 2003d1c:	df000404 	addi	fp,sp,16
 2003d20:	e13ffd15 	stw	r4,-12(fp)
 2003d24:	e17ffe15 	stw	r5,-8(fp)
 2003d28:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2003d2c:	e0bffd17 	ldw	r2,-12(fp)
 2003d30:	00c00044 	movi	r3,1
 2003d34:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2003d38:	e0bffd17 	ldw	r2,-12(fp)
 2003d3c:	10800017 	ldw	r2,0(r2)
 2003d40:	10800104 	addi	r2,r2,4
 2003d44:	e0fffd17 	ldw	r3,-12(fp)
 2003d48:	18c00817 	ldw	r3,32(r3)
 2003d4c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 2003d50:	e0fffe17 	ldw	r3,-8(fp)
 2003d54:	e0bfff17 	ldw	r2,-4(fp)
 2003d58:	d8000015 	stw	zero,0(sp)
 2003d5c:	1809883a 	mov	r4,r3
 2003d60:	100b883a 	mov	r5,r2
 2003d64:	01808034 	movhi	r6,512
 2003d68:	318f7404 	addi	r6,r6,15824
 2003d6c:	e1fffd17 	ldw	r7,-12(fp)
 2003d70:	20030c40 	call	20030c4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2003d74:	e0bffd17 	ldw	r2,-12(fp)
 2003d78:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2003d7c:	e0bffd17 	ldw	r2,-12(fp)
 2003d80:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2003d84:	00808074 	movhi	r2,513
 2003d88:	10a28904 	addi	r2,r2,-30172
 2003d8c:	10800017 	ldw	r2,0(r2)
 2003d90:	1809883a 	mov	r4,r3
 2003d94:	100b883a 	mov	r5,r2
 2003d98:	01808034 	movhi	r6,512
 2003d9c:	318ff504 	addi	r6,r6,16340
 2003da0:	e1fffd17 	ldw	r7,-12(fp)
 2003da4:	20046100 	call	2004610 <alt_alarm_start>
 2003da8:	1000040e 	bge	r2,zero,2003dbc <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2003dac:	e0bffd17 	ldw	r2,-12(fp)
 2003db0:	00e00034 	movhi	r3,32768
 2003db4:	18ffffc4 	addi	r3,r3,-1
 2003db8:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2003dbc:	e037883a 	mov	sp,fp
 2003dc0:	dfc00117 	ldw	ra,4(sp)
 2003dc4:	df000017 	ldw	fp,0(sp)
 2003dc8:	dec00204 	addi	sp,sp,8
 2003dcc:	f800283a 	ret

02003dd0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 2003dd0:	defff804 	addi	sp,sp,-32
 2003dd4:	df000715 	stw	fp,28(sp)
 2003dd8:	df000704 	addi	fp,sp,28
 2003ddc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 2003de0:	e0bfff17 	ldw	r2,-4(fp)
 2003de4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 2003de8:	e0bffb17 	ldw	r2,-20(fp)
 2003dec:	10800017 	ldw	r2,0(r2)
 2003df0:	e0bffc15 	stw	r2,-16(fp)
 2003df4:	00000106 	br	2003dfc <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 2003df8:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2003dfc:	e0bffc17 	ldw	r2,-16(fp)
 2003e00:	10800104 	addi	r2,r2,4
 2003e04:	10800037 	ldwio	r2,0(r2)
 2003e08:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2003e0c:	e0bffd17 	ldw	r2,-12(fp)
 2003e10:	1080c00c 	andi	r2,r2,768
 2003e14:	10006a26 	beq	r2,zero,2003fc0 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2003e18:	e0bffd17 	ldw	r2,-12(fp)
 2003e1c:	1080400c 	andi	r2,r2,256
 2003e20:	10003326 	beq	r2,zero,2003ef0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2003e24:	00800074 	movhi	r2,1
 2003e28:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2003e2c:	e0bffb17 	ldw	r2,-20(fp)
 2003e30:	10800a17 	ldw	r2,40(r2)
 2003e34:	10800044 	addi	r2,r2,1
 2003e38:	1081ffcc 	andi	r2,r2,2047
 2003e3c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 2003e40:	e0bffb17 	ldw	r2,-20(fp)
 2003e44:	10c00b17 	ldw	r3,44(r2)
 2003e48:	e0bffe17 	ldw	r2,-8(fp)
 2003e4c:	18801426 	beq	r3,r2,2003ea0 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 2003e50:	e0bffc17 	ldw	r2,-16(fp)
 2003e54:	10800037 	ldwio	r2,0(r2)
 2003e58:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2003e5c:	e0bff917 	ldw	r2,-28(fp)
 2003e60:	10a0000c 	andi	r2,r2,32768
 2003e64:	10001026 	beq	r2,zero,2003ea8 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 2003e68:	e0bffb17 	ldw	r2,-20(fp)
 2003e6c:	10800a17 	ldw	r2,40(r2)
 2003e70:	e0fff917 	ldw	r3,-28(fp)
 2003e74:	e13ffb17 	ldw	r4,-20(fp)
 2003e78:	2085883a 	add	r2,r4,r2
 2003e7c:	10800e04 	addi	r2,r2,56
 2003e80:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2003e84:	e0bffb17 	ldw	r2,-20(fp)
 2003e88:	10800a17 	ldw	r2,40(r2)
 2003e8c:	10800044 	addi	r2,r2,1
 2003e90:	10c1ffcc 	andi	r3,r2,2047
 2003e94:	e0bffb17 	ldw	r2,-20(fp)
 2003e98:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2003e9c:	003fe306 	br	2003e2c <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 2003ea0:	0001883a 	nop
 2003ea4:	00000106 	br	2003eac <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 2003ea8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2003eac:	e0bff917 	ldw	r2,-28(fp)
 2003eb0:	10bfffec 	andhi	r2,r2,65535
 2003eb4:	10000e26 	beq	r2,zero,2003ef0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2003eb8:	e0bffb17 	ldw	r2,-20(fp)
 2003ebc:	10c00817 	ldw	r3,32(r2)
 2003ec0:	00bfff84 	movi	r2,-2
 2003ec4:	1886703a 	and	r3,r3,r2
 2003ec8:	e0bffb17 	ldw	r2,-20(fp)
 2003ecc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2003ed0:	e0bffc17 	ldw	r2,-16(fp)
 2003ed4:	10800104 	addi	r2,r2,4
 2003ed8:	e0fffb17 	ldw	r3,-20(fp)
 2003edc:	18c00817 	ldw	r3,32(r3)
 2003ee0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2003ee4:	e0bffc17 	ldw	r2,-16(fp)
 2003ee8:	10800104 	addi	r2,r2,4
 2003eec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 2003ef0:	e0bffd17 	ldw	r2,-12(fp)
 2003ef4:	1080800c 	andi	r2,r2,512
 2003ef8:	103fbf26 	beq	r2,zero,2003df8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2003efc:	e0bffd17 	ldw	r2,-12(fp)
 2003f00:	1004d43a 	srli	r2,r2,16
 2003f04:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 2003f08:	00001406 	br	2003f5c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 2003f0c:	e0bffc17 	ldw	r2,-16(fp)
 2003f10:	e0fffb17 	ldw	r3,-20(fp)
 2003f14:	18c00d17 	ldw	r3,52(r3)
 2003f18:	e13ffb17 	ldw	r4,-20(fp)
 2003f1c:	20c7883a 	add	r3,r4,r3
 2003f20:	18c20e04 	addi	r3,r3,2104
 2003f24:	18c00003 	ldbu	r3,0(r3)
 2003f28:	18c03fcc 	andi	r3,r3,255
 2003f2c:	18c0201c 	xori	r3,r3,128
 2003f30:	18ffe004 	addi	r3,r3,-128
 2003f34:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2003f38:	e0bffb17 	ldw	r2,-20(fp)
 2003f3c:	10800d17 	ldw	r2,52(r2)
 2003f40:	10800044 	addi	r2,r2,1
 2003f44:	10c1ffcc 	andi	r3,r2,2047
 2003f48:	e0bffb17 	ldw	r2,-20(fp)
 2003f4c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 2003f50:	e0bffa17 	ldw	r2,-24(fp)
 2003f54:	10bfffc4 	addi	r2,r2,-1
 2003f58:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2003f5c:	e0bffa17 	ldw	r2,-24(fp)
 2003f60:	10000526 	beq	r2,zero,2003f78 <altera_avalon_jtag_uart_irq+0x1a8>
 2003f64:	e0bffb17 	ldw	r2,-20(fp)
 2003f68:	10c00d17 	ldw	r3,52(r2)
 2003f6c:	e0bffb17 	ldw	r2,-20(fp)
 2003f70:	10800c17 	ldw	r2,48(r2)
 2003f74:	18bfe51e 	bne	r3,r2,2003f0c <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2003f78:	e0bffa17 	ldw	r2,-24(fp)
 2003f7c:	103f9e26 	beq	r2,zero,2003df8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2003f80:	e0bffb17 	ldw	r2,-20(fp)
 2003f84:	10c00817 	ldw	r3,32(r2)
 2003f88:	00bfff44 	movi	r2,-3
 2003f8c:	1886703a 	and	r3,r3,r2
 2003f90:	e0bffb17 	ldw	r2,-20(fp)
 2003f94:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2003f98:	e0bffb17 	ldw	r2,-20(fp)
 2003f9c:	10800017 	ldw	r2,0(r2)
 2003fa0:	10800104 	addi	r2,r2,4
 2003fa4:	e0fffb17 	ldw	r3,-20(fp)
 2003fa8:	18c00817 	ldw	r3,32(r3)
 2003fac:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2003fb0:	e0bffc17 	ldw	r2,-16(fp)
 2003fb4:	10800104 	addi	r2,r2,4
 2003fb8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 2003fbc:	003f8e06 	br	2003df8 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 2003fc0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 2003fc4:	e037883a 	mov	sp,fp
 2003fc8:	df000017 	ldw	fp,0(sp)
 2003fcc:	dec00104 	addi	sp,sp,4
 2003fd0:	f800283a 	ret

02003fd4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2003fd4:	defffc04 	addi	sp,sp,-16
 2003fd8:	df000315 	stw	fp,12(sp)
 2003fdc:	df000304 	addi	fp,sp,12
 2003fe0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2003fe4:	e0bfff17 	ldw	r2,-4(fp)
 2003fe8:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2003fec:	e0bffd17 	ldw	r2,-12(fp)
 2003ff0:	10800017 	ldw	r2,0(r2)
 2003ff4:	10800104 	addi	r2,r2,4
 2003ff8:	10800037 	ldwio	r2,0(r2)
 2003ffc:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2004000:	e0bffe17 	ldw	r2,-8(fp)
 2004004:	1081000c 	andi	r2,r2,1024
 2004008:	10000a26 	beq	r2,zero,2004034 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 200400c:	e0bffd17 	ldw	r2,-12(fp)
 2004010:	10800017 	ldw	r2,0(r2)
 2004014:	10800104 	addi	r2,r2,4
 2004018:	e0fffd17 	ldw	r3,-12(fp)
 200401c:	18c00817 	ldw	r3,32(r3)
 2004020:	18c10014 	ori	r3,r3,1024
 2004024:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 2004028:	e0bffd17 	ldw	r2,-12(fp)
 200402c:	10000915 	stw	zero,36(r2)
 2004030:	00000a06 	br	200405c <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2004034:	e0bffd17 	ldw	r2,-12(fp)
 2004038:	10800917 	ldw	r2,36(r2)
 200403c:	00e00034 	movhi	r3,32768
 2004040:	18ffff04 	addi	r3,r3,-4
 2004044:	18800536 	bltu	r3,r2,200405c <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 2004048:	e0bffd17 	ldw	r2,-12(fp)
 200404c:	10800917 	ldw	r2,36(r2)
 2004050:	10c00044 	addi	r3,r2,1
 2004054:	e0bffd17 	ldw	r2,-12(fp)
 2004058:	10c00915 	stw	r3,36(r2)
 200405c:	00808074 	movhi	r2,513
 2004060:	10a28904 	addi	r2,r2,-30172
 2004064:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2004068:	e037883a 	mov	sp,fp
 200406c:	df000017 	ldw	fp,0(sp)
 2004070:	dec00104 	addi	sp,sp,4
 2004074:	f800283a 	ret

02004078 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2004078:	defffd04 	addi	sp,sp,-12
 200407c:	df000215 	stw	fp,8(sp)
 2004080:	df000204 	addi	fp,sp,8
 2004084:	e13ffe15 	stw	r4,-8(fp)
 2004088:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200408c:	00000506 	br	20040a4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2004090:	e0bfff17 	ldw	r2,-4(fp)
 2004094:	1090000c 	andi	r2,r2,16384
 2004098:	10000226 	beq	r2,zero,20040a4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 200409c:	00bffd44 	movi	r2,-11
 20040a0:	00000b06 	br	20040d0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 20040a4:	e0bffe17 	ldw	r2,-8(fp)
 20040a8:	10c00d17 	ldw	r3,52(r2)
 20040ac:	e0bffe17 	ldw	r2,-8(fp)
 20040b0:	10800c17 	ldw	r2,48(r2)
 20040b4:	18800526 	beq	r3,r2,20040cc <altera_avalon_jtag_uart_close+0x54>
 20040b8:	e0bffe17 	ldw	r2,-8(fp)
 20040bc:	10c00917 	ldw	r3,36(r2)
 20040c0:	e0bffe17 	ldw	r2,-8(fp)
 20040c4:	10800117 	ldw	r2,4(r2)
 20040c8:	18bff136 	bltu	r3,r2,2004090 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 20040cc:	0005883a 	mov	r2,zero
}
 20040d0:	e037883a 	mov	sp,fp
 20040d4:	df000017 	ldw	fp,0(sp)
 20040d8:	dec00104 	addi	sp,sp,4
 20040dc:	f800283a 	ret

020040e0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 20040e0:	defffa04 	addi	sp,sp,-24
 20040e4:	df000515 	stw	fp,20(sp)
 20040e8:	df000504 	addi	fp,sp,20
 20040ec:	e13ffd15 	stw	r4,-12(fp)
 20040f0:	e17ffe15 	stw	r5,-8(fp)
 20040f4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 20040f8:	00bff9c4 	movi	r2,-25
 20040fc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 2004100:	e0bffe17 	ldw	r2,-8(fp)
 2004104:	10da8060 	cmpeqi	r3,r2,27137
 2004108:	1800031e 	bne	r3,zero,2004118 <altera_avalon_jtag_uart_ioctl+0x38>
 200410c:	109a80a0 	cmpeqi	r2,r2,27138
 2004110:	1000181e 	bne	r2,zero,2004174 <altera_avalon_jtag_uart_ioctl+0x94>
 2004114:	00002606 	br	20041b0 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2004118:	e0bffd17 	ldw	r2,-12(fp)
 200411c:	10c00117 	ldw	r3,4(r2)
 2004120:	00a00034 	movhi	r2,32768
 2004124:	10bfffc4 	addi	r2,r2,-1
 2004128:	18802226 	beq	r3,r2,20041b4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 200412c:	e0bfff17 	ldw	r2,-4(fp)
 2004130:	10800017 	ldw	r2,0(r2)
 2004134:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2004138:	e0bffc17 	ldw	r2,-16(fp)
 200413c:	10800090 	cmplti	r2,r2,2
 2004140:	1000061e 	bne	r2,zero,200415c <altera_avalon_jtag_uart_ioctl+0x7c>
 2004144:	e0fffc17 	ldw	r3,-16(fp)
 2004148:	00a00034 	movhi	r2,32768
 200414c:	10bfffc4 	addi	r2,r2,-1
 2004150:	18800226 	beq	r3,r2,200415c <altera_avalon_jtag_uart_ioctl+0x7c>
 2004154:	e0bffc17 	ldw	r2,-16(fp)
 2004158:	00000206 	br	2004164 <altera_avalon_jtag_uart_ioctl+0x84>
 200415c:	00a00034 	movhi	r2,32768
 2004160:	10bfff84 	addi	r2,r2,-2
 2004164:	e0fffd17 	ldw	r3,-12(fp)
 2004168:	18800115 	stw	r2,4(r3)
      rc = 0;
 200416c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2004170:	00001006 	br	20041b4 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2004174:	e0bffd17 	ldw	r2,-12(fp)
 2004178:	10c00117 	ldw	r3,4(r2)
 200417c:	00a00034 	movhi	r2,32768
 2004180:	10bfffc4 	addi	r2,r2,-1
 2004184:	18800d26 	beq	r3,r2,20041bc <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2004188:	e0bffd17 	ldw	r2,-12(fp)
 200418c:	10c00917 	ldw	r3,36(r2)
 2004190:	e0bffd17 	ldw	r2,-12(fp)
 2004194:	10800117 	ldw	r2,4(r2)
 2004198:	1885803a 	cmpltu	r2,r3,r2
 200419c:	10c03fcc 	andi	r3,r2,255
 20041a0:	e0bfff17 	ldw	r2,-4(fp)
 20041a4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 20041a8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 20041ac:	00000306 	br	20041bc <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 20041b0:	00000306 	br	20041c0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 20041b4:	0001883a 	nop
 20041b8:	00000106 	br	20041c0 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 20041bc:	0001883a 	nop

  default:
    break;
  }

  return rc;
 20041c0:	e0bffb17 	ldw	r2,-20(fp)
}
 20041c4:	e037883a 	mov	sp,fp
 20041c8:	df000017 	ldw	fp,0(sp)
 20041cc:	dec00104 	addi	sp,sp,4
 20041d0:	f800283a 	ret

020041d4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 20041d4:	defff304 	addi	sp,sp,-52
 20041d8:	dfc00c15 	stw	ra,48(sp)
 20041dc:	df000b15 	stw	fp,44(sp)
 20041e0:	df000b04 	addi	fp,sp,44
 20041e4:	e13ffc15 	stw	r4,-16(fp)
 20041e8:	e17ffd15 	stw	r5,-12(fp)
 20041ec:	e1bffe15 	stw	r6,-8(fp)
 20041f0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 20041f4:	e0bffd17 	ldw	r2,-12(fp)
 20041f8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 20041fc:	00004706 	br	200431c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 2004200:	e0bffc17 	ldw	r2,-16(fp)
 2004204:	10800a17 	ldw	r2,40(r2)
 2004208:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 200420c:	e0bffc17 	ldw	r2,-16(fp)
 2004210:	10800b17 	ldw	r2,44(r2)
 2004214:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 2004218:	e0fff717 	ldw	r3,-36(fp)
 200421c:	e0bff817 	ldw	r2,-32(fp)
 2004220:	18800536 	bltu	r3,r2,2004238 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 2004224:	e0fff717 	ldw	r3,-36(fp)
 2004228:	e0bff817 	ldw	r2,-32(fp)
 200422c:	1885c83a 	sub	r2,r3,r2
 2004230:	e0bff615 	stw	r2,-40(fp)
 2004234:	00000406 	br	2004248 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2004238:	00c20004 	movi	r3,2048
 200423c:	e0bff817 	ldw	r2,-32(fp)
 2004240:	1885c83a 	sub	r2,r3,r2
 2004244:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2004248:	e0bff617 	ldw	r2,-40(fp)
 200424c:	10001e26 	beq	r2,zero,20042c8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 2004250:	e0fffe17 	ldw	r3,-8(fp)
 2004254:	e0bff617 	ldw	r2,-40(fp)
 2004258:	1880022e 	bgeu	r3,r2,2004264 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 200425c:	e0bffe17 	ldw	r2,-8(fp)
 2004260:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2004264:	e0bff817 	ldw	r2,-32(fp)
 2004268:	10800e04 	addi	r2,r2,56
 200426c:	e0fffc17 	ldw	r3,-16(fp)
 2004270:	1885883a 	add	r2,r3,r2
 2004274:	e13ff517 	ldw	r4,-44(fp)
 2004278:	100b883a 	mov	r5,r2
 200427c:	e1bff617 	ldw	r6,-40(fp)
 2004280:	20011bc0 	call	20011bc <memcpy>
      ptr   += n;
 2004284:	e0fff517 	ldw	r3,-44(fp)
 2004288:	e0bff617 	ldw	r2,-40(fp)
 200428c:	1885883a 	add	r2,r3,r2
 2004290:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 2004294:	e0fffe17 	ldw	r3,-8(fp)
 2004298:	e0bff617 	ldw	r2,-40(fp)
 200429c:	1885c83a 	sub	r2,r3,r2
 20042a0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20042a4:	e0fff817 	ldw	r3,-32(fp)
 20042a8:	e0bff617 	ldw	r2,-40(fp)
 20042ac:	1885883a 	add	r2,r3,r2
 20042b0:	10c1ffcc 	andi	r3,r2,2047
 20042b4:	e0bffc17 	ldw	r2,-16(fp)
 20042b8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 20042bc:	e0bffe17 	ldw	r2,-8(fp)
 20042c0:	00bfcf16 	blt	zero,r2,2004200 <altera_avalon_jtag_uart_read+0x2c>
 20042c4:	00000106 	br	20042cc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 20042c8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 20042cc:	e0fff517 	ldw	r3,-44(fp)
 20042d0:	e0bffd17 	ldw	r2,-12(fp)
 20042d4:	1880141e 	bne	r3,r2,2004328 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 20042d8:	e0bfff17 	ldw	r2,-4(fp)
 20042dc:	1090000c 	andi	r2,r2,16384
 20042e0:	1000131e 	bne	r2,zero,2004330 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 20042e4:	0001883a 	nop
 20042e8:	e0bffc17 	ldw	r2,-16(fp)
 20042ec:	10c00a17 	ldw	r3,40(r2)
 20042f0:	e0bff717 	ldw	r2,-36(fp)
 20042f4:	1880051e 	bne	r3,r2,200430c <altera_avalon_jtag_uart_read+0x138>
 20042f8:	e0bffc17 	ldw	r2,-16(fp)
 20042fc:	10c00917 	ldw	r3,36(r2)
 2004300:	e0bffc17 	ldw	r2,-16(fp)
 2004304:	10800117 	ldw	r2,4(r2)
 2004308:	18bff736 	bltu	r3,r2,20042e8 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 200430c:	e0bffc17 	ldw	r2,-16(fp)
 2004310:	10c00a17 	ldw	r3,40(r2)
 2004314:	e0bff717 	ldw	r2,-36(fp)
 2004318:	18800726 	beq	r3,r2,2004338 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200431c:	e0bffe17 	ldw	r2,-8(fp)
 2004320:	00bfb716 	blt	zero,r2,2004200 <altera_avalon_jtag_uart_read+0x2c>
 2004324:	00000506 	br	200433c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 2004328:	0001883a 	nop
 200432c:	00000306 	br	200433c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 2004330:	0001883a 	nop
 2004334:	00000106 	br	200433c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 2004338:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 200433c:	e0fff517 	ldw	r3,-44(fp)
 2004340:	e0bffd17 	ldw	r2,-12(fp)
 2004344:	18801726 	beq	r3,r2,20043a4 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004348:	0005303a 	rdctl	r2,status
 200434c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004350:	e0fffa17 	ldw	r3,-24(fp)
 2004354:	00bfff84 	movi	r2,-2
 2004358:	1884703a 	and	r2,r3,r2
 200435c:	1001703a 	wrctl	status,r2
  
  return context;
 2004360:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2004364:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2004368:	e0bffc17 	ldw	r2,-16(fp)
 200436c:	10800817 	ldw	r2,32(r2)
 2004370:	10c00054 	ori	r3,r2,1
 2004374:	e0bffc17 	ldw	r2,-16(fp)
 2004378:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200437c:	e0bffc17 	ldw	r2,-16(fp)
 2004380:	10800017 	ldw	r2,0(r2)
 2004384:	10800104 	addi	r2,r2,4
 2004388:	e0fffc17 	ldw	r3,-16(fp)
 200438c:	18c00817 	ldw	r3,32(r3)
 2004390:	10c00035 	stwio	r3,0(r2)
 2004394:	e0bff917 	ldw	r2,-28(fp)
 2004398:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200439c:	e0bffb17 	ldw	r2,-20(fp)
 20043a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 20043a4:	e0fff517 	ldw	r3,-44(fp)
 20043a8:	e0bffd17 	ldw	r2,-12(fp)
 20043ac:	18800426 	beq	r3,r2,20043c0 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
 20043b0:	e0fff517 	ldw	r3,-44(fp)
 20043b4:	e0bffd17 	ldw	r2,-12(fp)
 20043b8:	1885c83a 	sub	r2,r3,r2
 20043bc:	00000606 	br	20043d8 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
 20043c0:	e0bfff17 	ldw	r2,-4(fp)
 20043c4:	1090000c 	andi	r2,r2,16384
 20043c8:	10000226 	beq	r2,zero,20043d4 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
 20043cc:	00bffd44 	movi	r2,-11
 20043d0:	00000106 	br	20043d8 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
 20043d4:	00bffec4 	movi	r2,-5
}
 20043d8:	e037883a 	mov	sp,fp
 20043dc:	dfc00117 	ldw	ra,4(sp)
 20043e0:	df000017 	ldw	fp,0(sp)
 20043e4:	dec00204 	addi	sp,sp,8
 20043e8:	f800283a 	ret

020043ec <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 20043ec:	defff304 	addi	sp,sp,-52
 20043f0:	dfc00c15 	stw	ra,48(sp)
 20043f4:	df000b15 	stw	fp,44(sp)
 20043f8:	df000b04 	addi	fp,sp,44
 20043fc:	e13ffc15 	stw	r4,-16(fp)
 2004400:	e17ffd15 	stw	r5,-12(fp)
 2004404:	e1bffe15 	stw	r6,-8(fp)
 2004408:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 200440c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2004410:	e0bffd17 	ldw	r2,-12(fp)
 2004414:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2004418:	00003706 	br	20044f8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 200441c:	e0bffc17 	ldw	r2,-16(fp)
 2004420:	10800c17 	ldw	r2,48(r2)
 2004424:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 2004428:	e0bffc17 	ldw	r2,-16(fp)
 200442c:	10800d17 	ldw	r2,52(r2)
 2004430:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 2004434:	e0fff817 	ldw	r3,-32(fp)
 2004438:	e0bff517 	ldw	r2,-44(fp)
 200443c:	1880062e 	bgeu	r3,r2,2004458 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 2004440:	e0fff517 	ldw	r3,-44(fp)
 2004444:	e0bff817 	ldw	r2,-32(fp)
 2004448:	1885c83a 	sub	r2,r3,r2
 200444c:	10bfffc4 	addi	r2,r2,-1
 2004450:	e0bff615 	stw	r2,-40(fp)
 2004454:	00000b06 	br	2004484 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 2004458:	e0bff517 	ldw	r2,-44(fp)
 200445c:	10000526 	beq	r2,zero,2004474 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2004460:	00c20004 	movi	r3,2048
 2004464:	e0bff817 	ldw	r2,-32(fp)
 2004468:	1885c83a 	sub	r2,r3,r2
 200446c:	e0bff615 	stw	r2,-40(fp)
 2004470:	00000406 	br	2004484 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2004474:	00c1ffc4 	movi	r3,2047
 2004478:	e0bff817 	ldw	r2,-32(fp)
 200447c:	1885c83a 	sub	r2,r3,r2
 2004480:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2004484:	e0bff617 	ldw	r2,-40(fp)
 2004488:	10001e26 	beq	r2,zero,2004504 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 200448c:	e0fffe17 	ldw	r3,-8(fp)
 2004490:	e0bff617 	ldw	r2,-40(fp)
 2004494:	1880022e 	bgeu	r3,r2,20044a0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 2004498:	e0bffe17 	ldw	r2,-8(fp)
 200449c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 20044a0:	e0bff817 	ldw	r2,-32(fp)
 20044a4:	10820e04 	addi	r2,r2,2104
 20044a8:	e0fffc17 	ldw	r3,-16(fp)
 20044ac:	1885883a 	add	r2,r3,r2
 20044b0:	1009883a 	mov	r4,r2
 20044b4:	e17ffd17 	ldw	r5,-12(fp)
 20044b8:	e1bff617 	ldw	r6,-40(fp)
 20044bc:	20011bc0 	call	20011bc <memcpy>
      ptr   += n;
 20044c0:	e0fffd17 	ldw	r3,-12(fp)
 20044c4:	e0bff617 	ldw	r2,-40(fp)
 20044c8:	1885883a 	add	r2,r3,r2
 20044cc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 20044d0:	e0fffe17 	ldw	r3,-8(fp)
 20044d4:	e0bff617 	ldw	r2,-40(fp)
 20044d8:	1885c83a 	sub	r2,r3,r2
 20044dc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20044e0:	e0fff817 	ldw	r3,-32(fp)
 20044e4:	e0bff617 	ldw	r2,-40(fp)
 20044e8:	1885883a 	add	r2,r3,r2
 20044ec:	10c1ffcc 	andi	r3,r2,2047
 20044f0:	e0bffc17 	ldw	r2,-16(fp)
 20044f4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 20044f8:	e0bffe17 	ldw	r2,-8(fp)
 20044fc:	00bfc716 	blt	zero,r2,200441c <altera_avalon_jtag_uart_write+0x30>
 2004500:	00000106 	br	2004508 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 2004504:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004508:	0005303a 	rdctl	r2,status
 200450c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004510:	e0fffa17 	ldw	r3,-24(fp)
 2004514:	00bfff84 	movi	r2,-2
 2004518:	1884703a 	and	r2,r3,r2
 200451c:	1001703a 	wrctl	status,r2
  
  return context;
 2004520:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2004524:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2004528:	e0bffc17 	ldw	r2,-16(fp)
 200452c:	10800817 	ldw	r2,32(r2)
 2004530:	10c00094 	ori	r3,r2,2
 2004534:	e0bffc17 	ldw	r2,-16(fp)
 2004538:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200453c:	e0bffc17 	ldw	r2,-16(fp)
 2004540:	10800017 	ldw	r2,0(r2)
 2004544:	10800104 	addi	r2,r2,4
 2004548:	e0fffc17 	ldw	r3,-16(fp)
 200454c:	18c00817 	ldw	r3,32(r3)
 2004550:	10c00035 	stwio	r3,0(r2)
 2004554:	e0bff917 	ldw	r2,-28(fp)
 2004558:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200455c:	e0bffb17 	ldw	r2,-20(fp)
 2004560:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2004564:	e0bffe17 	ldw	r2,-8(fp)
 2004568:	0080110e 	bge	zero,r2,20045b0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 200456c:	e0bfff17 	ldw	r2,-4(fp)
 2004570:	1090000c 	andi	r2,r2,16384
 2004574:	1000111e 	bne	r2,zero,20045bc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2004578:	0001883a 	nop
 200457c:	e0bffc17 	ldw	r2,-16(fp)
 2004580:	10c00d17 	ldw	r3,52(r2)
 2004584:	e0bff517 	ldw	r2,-44(fp)
 2004588:	1880051e 	bne	r3,r2,20045a0 <altera_avalon_jtag_uart_write+0x1b4>
 200458c:	e0bffc17 	ldw	r2,-16(fp)
 2004590:	10c00917 	ldw	r3,36(r2)
 2004594:	e0bffc17 	ldw	r2,-16(fp)
 2004598:	10800117 	ldw	r2,4(r2)
 200459c:	18bff736 	bltu	r3,r2,200457c <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 20045a0:	e0bffc17 	ldw	r2,-16(fp)
 20045a4:	10c00d17 	ldw	r3,52(r2)
 20045a8:	e0bff517 	ldw	r2,-44(fp)
 20045ac:	18800526 	beq	r3,r2,20045c4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 20045b0:	e0bffe17 	ldw	r2,-8(fp)
 20045b4:	00bfd016 	blt	zero,r2,20044f8 <altera_avalon_jtag_uart_write+0x10c>
 20045b8:	00000306 	br	20045c8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 20045bc:	0001883a 	nop
 20045c0:	00000106 	br	20045c8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
 20045c4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 20045c8:	e0fffd17 	ldw	r3,-12(fp)
 20045cc:	e0bff717 	ldw	r2,-36(fp)
 20045d0:	18800426 	beq	r3,r2,20045e4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 20045d4:	e0fffd17 	ldw	r3,-12(fp)
 20045d8:	e0bff717 	ldw	r2,-36(fp)
 20045dc:	1885c83a 	sub	r2,r3,r2
 20045e0:	00000606 	br	20045fc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 20045e4:	e0bfff17 	ldw	r2,-4(fp)
 20045e8:	1090000c 	andi	r2,r2,16384
 20045ec:	10000226 	beq	r2,zero,20045f8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 20045f0:	00bffd44 	movi	r2,-11
 20045f4:	00000106 	br	20045fc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 20045f8:	00bffec4 	movi	r2,-5
}
 20045fc:	e037883a 	mov	sp,fp
 2004600:	dfc00117 	ldw	ra,4(sp)
 2004604:	df000017 	ldw	fp,0(sp)
 2004608:	dec00204 	addi	sp,sp,8
 200460c:	f800283a 	ret

02004610 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2004610:	defff504 	addi	sp,sp,-44
 2004614:	df000a15 	stw	fp,40(sp)
 2004618:	df000a04 	addi	fp,sp,40
 200461c:	e13ffc15 	stw	r4,-16(fp)
 2004620:	e17ffd15 	stw	r5,-12(fp)
 2004624:	e1bffe15 	stw	r6,-8(fp)
 2004628:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 200462c:	e03ff615 	stw	zero,-40(fp)
 2004630:	00808074 	movhi	r2,513
 2004634:	10a28904 	addi	r2,r2,-30172
 2004638:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 200463c:	10003f26 	beq	r2,zero,200473c <alt_alarm_start+0x12c>
  {
    if (alarm)
 2004640:	e0bffc17 	ldw	r2,-16(fp)
 2004644:	10003b26 	beq	r2,zero,2004734 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 2004648:	e0bffc17 	ldw	r2,-16(fp)
 200464c:	e0fffe17 	ldw	r3,-8(fp)
 2004650:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 2004654:	e0bffc17 	ldw	r2,-16(fp)
 2004658:	e0ffff17 	ldw	r3,-4(fp)
 200465c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004660:	0005303a 	rdctl	r2,status
 2004664:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004668:	e0fff817 	ldw	r3,-32(fp)
 200466c:	00bfff84 	movi	r2,-2
 2004670:	1884703a 	and	r2,r3,r2
 2004674:	1001703a 	wrctl	status,r2
  
  return context;
 2004678:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 200467c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2004680:	00808074 	movhi	r2,513
 2004684:	10a28a04 	addi	r2,r2,-30168
 2004688:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 200468c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2004690:	e0fffd17 	ldw	r3,-12(fp)
 2004694:	e0bff617 	ldw	r2,-40(fp)
 2004698:	1885883a 	add	r2,r3,r2
 200469c:	10c00044 	addi	r3,r2,1
 20046a0:	e0bffc17 	ldw	r2,-16(fp)
 20046a4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 20046a8:	e0bffc17 	ldw	r2,-16(fp)
 20046ac:	10c00217 	ldw	r3,8(r2)
 20046b0:	e0bff617 	ldw	r2,-40(fp)
 20046b4:	1880042e 	bgeu	r3,r2,20046c8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 20046b8:	e0bffc17 	ldw	r2,-16(fp)
 20046bc:	00c00044 	movi	r3,1
 20046c0:	10c00405 	stb	r3,16(r2)
 20046c4:	00000206 	br	20046d0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 20046c8:	e0bffc17 	ldw	r2,-16(fp)
 20046cc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 20046d0:	e0bffc17 	ldw	r2,-16(fp)
 20046d4:	00c08034 	movhi	r3,512
 20046d8:	18dbec04 	addi	r3,r3,28592
 20046dc:	e0fff915 	stw	r3,-28(fp)
 20046e0:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 20046e4:	e0bffa17 	ldw	r2,-24(fp)
 20046e8:	e0fff917 	ldw	r3,-28(fp)
 20046ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 20046f0:	e0bff917 	ldw	r2,-28(fp)
 20046f4:	10c00017 	ldw	r3,0(r2)
 20046f8:	e0bffa17 	ldw	r2,-24(fp)
 20046fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2004700:	e0bff917 	ldw	r2,-28(fp)
 2004704:	10800017 	ldw	r2,0(r2)
 2004708:	e0fffa17 	ldw	r3,-24(fp)
 200470c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2004710:	e0bff917 	ldw	r2,-28(fp)
 2004714:	e0fffa17 	ldw	r3,-24(fp)
 2004718:	10c00015 	stw	r3,0(r2)
 200471c:	e0bff717 	ldw	r2,-36(fp)
 2004720:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004724:	e0bffb17 	ldw	r2,-20(fp)
 2004728:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 200472c:	0005883a 	mov	r2,zero
 2004730:	00000306 	br	2004740 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 2004734:	00bffa84 	movi	r2,-22
 2004738:	00000106 	br	2004740 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 200473c:	00bfde84 	movi	r2,-134
  }
}
 2004740:	e037883a 	mov	sp,fp
 2004744:	df000017 	ldw	fp,0(sp)
 2004748:	dec00104 	addi	sp,sp,4
 200474c:	f800283a 	ret

02004750 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2004750:	deffff04 	addi	sp,sp,-4
 2004754:	df000015 	stw	fp,0(sp)
 2004758:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 200475c:	e037883a 	mov	sp,fp
 2004760:	df000017 	ldw	fp,0(sp)
 2004764:	dec00104 	addi	sp,sp,4
 2004768:	f800283a 	ret

0200476c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200476c:	defffe04 	addi	sp,sp,-8
 2004770:	dfc00115 	stw	ra,4(sp)
 2004774:	df000015 	stw	fp,0(sp)
 2004778:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200477c:	00808034 	movhi	r2,512
 2004780:	109be904 	addi	r2,r2,28580
 2004784:	10800017 	ldw	r2,0(r2)
 2004788:	10000526 	beq	r2,zero,20047a0 <alt_get_errno+0x34>
 200478c:	00808034 	movhi	r2,512
 2004790:	109be904 	addi	r2,r2,28580
 2004794:	10800017 	ldw	r2,0(r2)
 2004798:	103ee83a 	callr	r2
 200479c:	00000206 	br	20047a8 <alt_get_errno+0x3c>
 20047a0:	00808074 	movhi	r2,513
 20047a4:	10a28404 	addi	r2,r2,-30192
}
 20047a8:	e037883a 	mov	sp,fp
 20047ac:	dfc00117 	ldw	ra,4(sp)
 20047b0:	df000017 	ldw	fp,0(sp)
 20047b4:	dec00204 	addi	sp,sp,8
 20047b8:	f800283a 	ret

020047bc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 20047bc:	defffa04 	addi	sp,sp,-24
 20047c0:	dfc00515 	stw	ra,20(sp)
 20047c4:	df000415 	stw	fp,16(sp)
 20047c8:	df000404 	addi	fp,sp,16
 20047cc:	e13ffe15 	stw	r4,-8(fp)
 20047d0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 20047d4:	e0bffe17 	ldw	r2,-8(fp)
 20047d8:	10000326 	beq	r2,zero,20047e8 <alt_dev_llist_insert+0x2c>
 20047dc:	e0bffe17 	ldw	r2,-8(fp)
 20047e0:	10800217 	ldw	r2,8(r2)
 20047e4:	1000051e 	bne	r2,zero,20047fc <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 20047e8:	200476c0 	call	200476c <alt_get_errno>
 20047ec:	00c00584 	movi	r3,22
 20047f0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 20047f4:	00bffa84 	movi	r2,-22
 20047f8:	00001306 	br	2004848 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 20047fc:	e0bffe17 	ldw	r2,-8(fp)
 2004800:	e0ffff17 	ldw	r3,-4(fp)
 2004804:	e0fffc15 	stw	r3,-16(fp)
 2004808:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 200480c:	e0bffd17 	ldw	r2,-12(fp)
 2004810:	e0fffc17 	ldw	r3,-16(fp)
 2004814:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2004818:	e0bffc17 	ldw	r2,-16(fp)
 200481c:	10c00017 	ldw	r3,0(r2)
 2004820:	e0bffd17 	ldw	r2,-12(fp)
 2004824:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2004828:	e0bffc17 	ldw	r2,-16(fp)
 200482c:	10800017 	ldw	r2,0(r2)
 2004830:	e0fffd17 	ldw	r3,-12(fp)
 2004834:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2004838:	e0bffc17 	ldw	r2,-16(fp)
 200483c:	e0fffd17 	ldw	r3,-12(fp)
 2004840:	10c00015 	stw	r3,0(r2)

  return 0;  
 2004844:	0005883a 	mov	r2,zero
}
 2004848:	e037883a 	mov	sp,fp
 200484c:	dfc00117 	ldw	ra,4(sp)
 2004850:	df000017 	ldw	fp,0(sp)
 2004854:	dec00204 	addi	sp,sp,8
 2004858:	f800283a 	ret

0200485c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 200485c:	defffd04 	addi	sp,sp,-12
 2004860:	dfc00215 	stw	ra,8(sp)
 2004864:	df000115 	stw	fp,4(sp)
 2004868:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 200486c:	00808034 	movhi	r2,512
 2004870:	10954904 	addi	r2,r2,21796
 2004874:	e0bfff15 	stw	r2,-4(fp)
 2004878:	00000606 	br	2004894 <_do_ctors+0x38>
        (*ctor) (); 
 200487c:	e0bfff17 	ldw	r2,-4(fp)
 2004880:	10800017 	ldw	r2,0(r2)
 2004884:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2004888:	e0bfff17 	ldw	r2,-4(fp)
 200488c:	10bfff04 	addi	r2,r2,-4
 2004890:	e0bfff15 	stw	r2,-4(fp)
 2004894:	e0ffff17 	ldw	r3,-4(fp)
 2004898:	00808034 	movhi	r2,512
 200489c:	10954a04 	addi	r2,r2,21800
 20048a0:	18bff62e 	bgeu	r3,r2,200487c <_do_ctors+0x20>
        (*ctor) (); 
}
 20048a4:	e037883a 	mov	sp,fp
 20048a8:	dfc00117 	ldw	ra,4(sp)
 20048ac:	df000017 	ldw	fp,0(sp)
 20048b0:	dec00204 	addi	sp,sp,8
 20048b4:	f800283a 	ret

020048b8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 20048b8:	defffd04 	addi	sp,sp,-12
 20048bc:	dfc00215 	stw	ra,8(sp)
 20048c0:	df000115 	stw	fp,4(sp)
 20048c4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 20048c8:	00808034 	movhi	r2,512
 20048cc:	10954904 	addi	r2,r2,21796
 20048d0:	e0bfff15 	stw	r2,-4(fp)
 20048d4:	00000606 	br	20048f0 <_do_dtors+0x38>
        (*dtor) (); 
 20048d8:	e0bfff17 	ldw	r2,-4(fp)
 20048dc:	10800017 	ldw	r2,0(r2)
 20048e0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 20048e4:	e0bfff17 	ldw	r2,-4(fp)
 20048e8:	10bfff04 	addi	r2,r2,-4
 20048ec:	e0bfff15 	stw	r2,-4(fp)
 20048f0:	e0ffff17 	ldw	r3,-4(fp)
 20048f4:	00808034 	movhi	r2,512
 20048f8:	10954a04 	addi	r2,r2,21800
 20048fc:	18bff62e 	bgeu	r3,r2,20048d8 <_do_dtors+0x20>
        (*dtor) (); 
}
 2004900:	e037883a 	mov	sp,fp
 2004904:	dfc00117 	ldw	ra,4(sp)
 2004908:	df000017 	ldw	fp,0(sp)
 200490c:	dec00204 	addi	sp,sp,8
 2004910:	f800283a 	ret

02004914 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2004914:	deffff04 	addi	sp,sp,-4
 2004918:	df000015 	stw	fp,0(sp)
 200491c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 2004920:	e037883a 	mov	sp,fp
 2004924:	df000017 	ldw	fp,0(sp)
 2004928:	dec00104 	addi	sp,sp,4
 200492c:	f800283a 	ret

02004930 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2004930:	defff804 	addi	sp,sp,-32
 2004934:	dfc00715 	stw	ra,28(sp)
 2004938:	df000615 	stw	fp,24(sp)
 200493c:	dc000515 	stw	r16,20(sp)
 2004940:	df000504 	addi	fp,sp,20
 2004944:	e13ffc15 	stw	r4,-16(fp)
 2004948:	e17ffd15 	stw	r5,-12(fp)
 200494c:	e1bffe15 	stw	r6,-8(fp)
 2004950:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 2004954:	e13ffd17 	ldw	r4,-12(fp)
 2004958:	e17ffe17 	ldw	r5,-8(fp)
 200495c:	e1bfff17 	ldw	r6,-4(fp)
 2004960:	2004bc80 	call	2004bc8 <open>
 2004964:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 2004968:	e0bffb17 	ldw	r2,-20(fp)
 200496c:	10002216 	blt	r2,zero,20049f8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 2004970:	04008034 	movhi	r16,512
 2004974:	84176804 	addi	r16,r16,23968
 2004978:	e0bffb17 	ldw	r2,-20(fp)
 200497c:	1009883a 	mov	r4,r2
 2004980:	01400304 	movi	r5,12
 2004984:	2002e540 	call	2002e54 <__mulsi3>
 2004988:	8085883a 	add	r2,r16,r2
 200498c:	10c00017 	ldw	r3,0(r2)
 2004990:	e0bffc17 	ldw	r2,-16(fp)
 2004994:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2004998:	04008034 	movhi	r16,512
 200499c:	84176804 	addi	r16,r16,23968
 20049a0:	e0bffb17 	ldw	r2,-20(fp)
 20049a4:	1009883a 	mov	r4,r2
 20049a8:	01400304 	movi	r5,12
 20049ac:	2002e540 	call	2002e54 <__mulsi3>
 20049b0:	8085883a 	add	r2,r16,r2
 20049b4:	10800104 	addi	r2,r2,4
 20049b8:	10c00017 	ldw	r3,0(r2)
 20049bc:	e0bffc17 	ldw	r2,-16(fp)
 20049c0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 20049c4:	04008034 	movhi	r16,512
 20049c8:	84176804 	addi	r16,r16,23968
 20049cc:	e0bffb17 	ldw	r2,-20(fp)
 20049d0:	1009883a 	mov	r4,r2
 20049d4:	01400304 	movi	r5,12
 20049d8:	2002e540 	call	2002e54 <__mulsi3>
 20049dc:	8085883a 	add	r2,r16,r2
 20049e0:	10800204 	addi	r2,r2,8
 20049e4:	10c00017 	ldw	r3,0(r2)
 20049e8:	e0bffc17 	ldw	r2,-16(fp)
 20049ec:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 20049f0:	e13ffb17 	ldw	r4,-20(fp)
 20049f4:	200388c0 	call	200388c <alt_release_fd>
  }
} 
 20049f8:	e037883a 	mov	sp,fp
 20049fc:	dfc00217 	ldw	ra,8(sp)
 2004a00:	df000117 	ldw	fp,4(sp)
 2004a04:	dc000017 	ldw	r16,0(sp)
 2004a08:	dec00304 	addi	sp,sp,12
 2004a0c:	f800283a 	ret

02004a10 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2004a10:	defffb04 	addi	sp,sp,-20
 2004a14:	dfc00415 	stw	ra,16(sp)
 2004a18:	df000315 	stw	fp,12(sp)
 2004a1c:	df000304 	addi	fp,sp,12
 2004a20:	e13ffd15 	stw	r4,-12(fp)
 2004a24:	e17ffe15 	stw	r5,-8(fp)
 2004a28:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2004a2c:	01008034 	movhi	r4,512
 2004a30:	21176b04 	addi	r4,r4,23980
 2004a34:	e17ffd17 	ldw	r5,-12(fp)
 2004a38:	01800044 	movi	r6,1
 2004a3c:	01c07fc4 	movi	r7,511
 2004a40:	20049300 	call	2004930 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2004a44:	01008034 	movhi	r4,512
 2004a48:	21176804 	addi	r4,r4,23968
 2004a4c:	e17ffe17 	ldw	r5,-8(fp)
 2004a50:	000d883a 	mov	r6,zero
 2004a54:	01c07fc4 	movi	r7,511
 2004a58:	20049300 	call	2004930 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2004a5c:	01008034 	movhi	r4,512
 2004a60:	21176e04 	addi	r4,r4,23992
 2004a64:	e17fff17 	ldw	r5,-4(fp)
 2004a68:	01800044 	movi	r6,1
 2004a6c:	01c07fc4 	movi	r7,511
 2004a70:	20049300 	call	2004930 <alt_open_fd>
}  
 2004a74:	e037883a 	mov	sp,fp
 2004a78:	dfc00117 	ldw	ra,4(sp)
 2004a7c:	df000017 	ldw	fp,0(sp)
 2004a80:	dec00204 	addi	sp,sp,8
 2004a84:	f800283a 	ret

02004a88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2004a88:	defffe04 	addi	sp,sp,-8
 2004a8c:	dfc00115 	stw	ra,4(sp)
 2004a90:	df000015 	stw	fp,0(sp)
 2004a94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2004a98:	00808034 	movhi	r2,512
 2004a9c:	109be904 	addi	r2,r2,28580
 2004aa0:	10800017 	ldw	r2,0(r2)
 2004aa4:	10000526 	beq	r2,zero,2004abc <alt_get_errno+0x34>
 2004aa8:	00808034 	movhi	r2,512
 2004aac:	109be904 	addi	r2,r2,28580
 2004ab0:	10800017 	ldw	r2,0(r2)
 2004ab4:	103ee83a 	callr	r2
 2004ab8:	00000206 	br	2004ac4 <alt_get_errno+0x3c>
 2004abc:	00808074 	movhi	r2,513
 2004ac0:	10a28404 	addi	r2,r2,-30192
}
 2004ac4:	e037883a 	mov	sp,fp
 2004ac8:	dfc00117 	ldw	ra,4(sp)
 2004acc:	df000017 	ldw	fp,0(sp)
 2004ad0:	dec00204 	addi	sp,sp,8
 2004ad4:	f800283a 	ret

02004ad8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2004ad8:	defffb04 	addi	sp,sp,-20
 2004adc:	dfc00415 	stw	ra,16(sp)
 2004ae0:	df000315 	stw	fp,12(sp)
 2004ae4:	dc000215 	stw	r16,8(sp)
 2004ae8:	df000204 	addi	fp,sp,8
 2004aec:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2004af0:	e0bfff17 	ldw	r2,-4(fp)
 2004af4:	10800217 	ldw	r2,8(r2)
 2004af8:	10d00034 	orhi	r3,r2,16384
 2004afc:	e0bfff17 	ldw	r2,-4(fp)
 2004b00:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2004b04:	e03ffe15 	stw	zero,-8(fp)
 2004b08:	00002206 	br	2004b94 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2004b0c:	04008034 	movhi	r16,512
 2004b10:	84176804 	addi	r16,r16,23968
 2004b14:	e0bffe17 	ldw	r2,-8(fp)
 2004b18:	1009883a 	mov	r4,r2
 2004b1c:	01400304 	movi	r5,12
 2004b20:	2002e540 	call	2002e54 <__mulsi3>
 2004b24:	8085883a 	add	r2,r16,r2
 2004b28:	10c00017 	ldw	r3,0(r2)
 2004b2c:	e0bfff17 	ldw	r2,-4(fp)
 2004b30:	10800017 	ldw	r2,0(r2)
 2004b34:	1880141e 	bne	r3,r2,2004b88 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2004b38:	04008034 	movhi	r16,512
 2004b3c:	84176804 	addi	r16,r16,23968
 2004b40:	e0bffe17 	ldw	r2,-8(fp)
 2004b44:	1009883a 	mov	r4,r2
 2004b48:	01400304 	movi	r5,12
 2004b4c:	2002e540 	call	2002e54 <__mulsi3>
 2004b50:	8085883a 	add	r2,r16,r2
 2004b54:	10800204 	addi	r2,r2,8
 2004b58:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2004b5c:	10000a0e 	bge	r2,zero,2004b88 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 2004b60:	e13ffe17 	ldw	r4,-8(fp)
 2004b64:	01400304 	movi	r5,12
 2004b68:	2002e540 	call	2002e54 <__mulsi3>
 2004b6c:	00c08034 	movhi	r3,512
 2004b70:	18d76804 	addi	r3,r3,23968
 2004b74:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2004b78:	e0bfff17 	ldw	r2,-4(fp)
 2004b7c:	18800226 	beq	r3,r2,2004b88 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2004b80:	00bffcc4 	movi	r2,-13
 2004b84:	00000a06 	br	2004bb0 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2004b88:	e0bffe17 	ldw	r2,-8(fp)
 2004b8c:	10800044 	addi	r2,r2,1
 2004b90:	e0bffe15 	stw	r2,-8(fp)
 2004b94:	00808034 	movhi	r2,512
 2004b98:	109be804 	addi	r2,r2,28576
 2004b9c:	10800017 	ldw	r2,0(r2)
 2004ba0:	1007883a 	mov	r3,r2
 2004ba4:	e0bffe17 	ldw	r2,-8(fp)
 2004ba8:	18bfd82e 	bgeu	r3,r2,2004b0c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2004bac:	0005883a 	mov	r2,zero
}
 2004bb0:	e037883a 	mov	sp,fp
 2004bb4:	dfc00217 	ldw	ra,8(sp)
 2004bb8:	df000117 	ldw	fp,4(sp)
 2004bbc:	dc000017 	ldw	r16,0(sp)
 2004bc0:	dec00304 	addi	sp,sp,12
 2004bc4:	f800283a 	ret

02004bc8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2004bc8:	defff604 	addi	sp,sp,-40
 2004bcc:	dfc00915 	stw	ra,36(sp)
 2004bd0:	df000815 	stw	fp,32(sp)
 2004bd4:	df000804 	addi	fp,sp,32
 2004bd8:	e13ffd15 	stw	r4,-12(fp)
 2004bdc:	e17ffe15 	stw	r5,-8(fp)
 2004be0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2004be4:	00bfffc4 	movi	r2,-1
 2004be8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 2004bec:	00bffb44 	movi	r2,-19
 2004bf0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 2004bf4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2004bf8:	e13ffd17 	ldw	r4,-12(fp)
 2004bfc:	01408034 	movhi	r5,512
 2004c00:	295be604 	addi	r5,r5,28568
 2004c04:	2004edc0 	call	2004edc <alt_find_dev>
 2004c08:	e0bff815 	stw	r2,-32(fp)
 2004c0c:	e0bff817 	ldw	r2,-32(fp)
 2004c10:	1000051e 	bne	r2,zero,2004c28 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2004c14:	e13ffd17 	ldw	r4,-12(fp)
 2004c18:	2004f6c0 	call	2004f6c <alt_find_file>
 2004c1c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 2004c20:	00800044 	movi	r2,1
 2004c24:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2004c28:	e0bff817 	ldw	r2,-32(fp)
 2004c2c:	10002a26 	beq	r2,zero,2004cd8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2004c30:	e13ff817 	ldw	r4,-32(fp)
 2004c34:	20050800 	call	2005080 <alt_get_fd>
 2004c38:	e0bff915 	stw	r2,-28(fp)
 2004c3c:	e0bff917 	ldw	r2,-28(fp)
 2004c40:	1000030e 	bge	r2,zero,2004c50 <open+0x88>
    {
      status = index;
 2004c44:	e0bff917 	ldw	r2,-28(fp)
 2004c48:	e0bffa15 	stw	r2,-24(fp)
 2004c4c:	00002406 	br	2004ce0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 2004c50:	e13ff917 	ldw	r4,-28(fp)
 2004c54:	01400304 	movi	r5,12
 2004c58:	2002e540 	call	2002e54 <__mulsi3>
 2004c5c:	00c08034 	movhi	r3,512
 2004c60:	18d76804 	addi	r3,r3,23968
 2004c64:	10c5883a 	add	r2,r2,r3
 2004c68:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2004c6c:	e0fffe17 	ldw	r3,-8(fp)
 2004c70:	00900034 	movhi	r2,16384
 2004c74:	10bfffc4 	addi	r2,r2,-1
 2004c78:	1886703a 	and	r3,r3,r2
 2004c7c:	e0bffc17 	ldw	r2,-16(fp)
 2004c80:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2004c84:	e0bffb17 	ldw	r2,-20(fp)
 2004c88:	1000051e 	bne	r2,zero,2004ca0 <open+0xd8>
 2004c8c:	e13ffc17 	ldw	r4,-16(fp)
 2004c90:	2004ad80 	call	2004ad8 <alt_file_locked>
 2004c94:	e0bffa15 	stw	r2,-24(fp)
 2004c98:	e0bffa17 	ldw	r2,-24(fp)
 2004c9c:	10001016 	blt	r2,zero,2004ce0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2004ca0:	e0bff817 	ldw	r2,-32(fp)
 2004ca4:	10800317 	ldw	r2,12(r2)
 2004ca8:	10000826 	beq	r2,zero,2004ccc <open+0x104>
 2004cac:	e0bff817 	ldw	r2,-32(fp)
 2004cb0:	10800317 	ldw	r2,12(r2)
 2004cb4:	e13ffc17 	ldw	r4,-16(fp)
 2004cb8:	e17ffd17 	ldw	r5,-12(fp)
 2004cbc:	e1bffe17 	ldw	r6,-8(fp)
 2004cc0:	e1ffff17 	ldw	r7,-4(fp)
 2004cc4:	103ee83a 	callr	r2
 2004cc8:	00000106 	br	2004cd0 <open+0x108>
 2004ccc:	0005883a 	mov	r2,zero
 2004cd0:	e0bffa15 	stw	r2,-24(fp)
 2004cd4:	00000206 	br	2004ce0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2004cd8:	00bffb44 	movi	r2,-19
 2004cdc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2004ce0:	e0bffa17 	ldw	r2,-24(fp)
 2004ce4:	1000080e 	bge	r2,zero,2004d08 <open+0x140>
  {
    alt_release_fd (index);  
 2004ce8:	e13ff917 	ldw	r4,-28(fp)
 2004cec:	200388c0 	call	200388c <alt_release_fd>
    ALT_ERRNO = -status;
 2004cf0:	2004a880 	call	2004a88 <alt_get_errno>
 2004cf4:	e0fffa17 	ldw	r3,-24(fp)
 2004cf8:	00c7c83a 	sub	r3,zero,r3
 2004cfc:	10c00015 	stw	r3,0(r2)
    return -1;
 2004d00:	00bfffc4 	movi	r2,-1
 2004d04:	00000106 	br	2004d0c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 2004d08:	e0bff917 	ldw	r2,-28(fp)
}
 2004d0c:	e037883a 	mov	sp,fp
 2004d10:	dfc00117 	ldw	ra,4(sp)
 2004d14:	df000017 	ldw	fp,0(sp)
 2004d18:	dec00204 	addi	sp,sp,8
 2004d1c:	f800283a 	ret

02004d20 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2004d20:	defffa04 	addi	sp,sp,-24
 2004d24:	df000515 	stw	fp,20(sp)
 2004d28:	df000504 	addi	fp,sp,20
 2004d2c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004d30:	0005303a 	rdctl	r2,status
 2004d34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004d38:	e0fffc17 	ldw	r3,-16(fp)
 2004d3c:	00bfff84 	movi	r2,-2
 2004d40:	1884703a 	and	r2,r3,r2
 2004d44:	1001703a 	wrctl	status,r2
  
  return context;
 2004d48:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2004d4c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 2004d50:	e0bfff17 	ldw	r2,-4(fp)
 2004d54:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2004d58:	e0bffd17 	ldw	r2,-12(fp)
 2004d5c:	10800017 	ldw	r2,0(r2)
 2004d60:	e0fffd17 	ldw	r3,-12(fp)
 2004d64:	18c00117 	ldw	r3,4(r3)
 2004d68:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 2004d6c:	e0bffd17 	ldw	r2,-12(fp)
 2004d70:	10800117 	ldw	r2,4(r2)
 2004d74:	e0fffd17 	ldw	r3,-12(fp)
 2004d78:	18c00017 	ldw	r3,0(r3)
 2004d7c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2004d80:	e0bffd17 	ldw	r2,-12(fp)
 2004d84:	e0fffd17 	ldw	r3,-12(fp)
 2004d88:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 2004d8c:	e0bffd17 	ldw	r2,-12(fp)
 2004d90:	e0fffd17 	ldw	r3,-12(fp)
 2004d94:	10c00015 	stw	r3,0(r2)
 2004d98:	e0bffb17 	ldw	r2,-20(fp)
 2004d9c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004da0:	e0bffe17 	ldw	r2,-8(fp)
 2004da4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2004da8:	e037883a 	mov	sp,fp
 2004dac:	df000017 	ldw	fp,0(sp)
 2004db0:	dec00104 	addi	sp,sp,4
 2004db4:	f800283a 	ret

02004db8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2004db8:	defffb04 	addi	sp,sp,-20
 2004dbc:	dfc00415 	stw	ra,16(sp)
 2004dc0:	df000315 	stw	fp,12(sp)
 2004dc4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2004dc8:	d0a00c17 	ldw	r2,-32720(gp)
 2004dcc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2004dd0:	d0a6aa17 	ldw	r2,-25944(gp)
 2004dd4:	10800044 	addi	r2,r2,1
 2004dd8:	d0a6aa15 	stw	r2,-25944(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2004ddc:	00002e06 	br	2004e98 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 2004de0:	e0bffd17 	ldw	r2,-12(fp)
 2004de4:	10800017 	ldw	r2,0(r2)
 2004de8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2004dec:	e0bffd17 	ldw	r2,-12(fp)
 2004df0:	10800403 	ldbu	r2,16(r2)
 2004df4:	10803fcc 	andi	r2,r2,255
 2004df8:	10000426 	beq	r2,zero,2004e0c <alt_tick+0x54>
 2004dfc:	d0a6aa17 	ldw	r2,-25944(gp)
 2004e00:	1000021e 	bne	r2,zero,2004e0c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 2004e04:	e0bffd17 	ldw	r2,-12(fp)
 2004e08:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2004e0c:	e0bffd17 	ldw	r2,-12(fp)
 2004e10:	10800217 	ldw	r2,8(r2)
 2004e14:	d0e6aa17 	ldw	r3,-25944(gp)
 2004e18:	18801d36 	bltu	r3,r2,2004e90 <alt_tick+0xd8>
 2004e1c:	e0bffd17 	ldw	r2,-12(fp)
 2004e20:	10800403 	ldbu	r2,16(r2)
 2004e24:	10803fcc 	andi	r2,r2,255
 2004e28:	1000191e 	bne	r2,zero,2004e90 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 2004e2c:	e0bffd17 	ldw	r2,-12(fp)
 2004e30:	10c00317 	ldw	r3,12(r2)
 2004e34:	e0bffd17 	ldw	r2,-12(fp)
 2004e38:	10800517 	ldw	r2,20(r2)
 2004e3c:	1009883a 	mov	r4,r2
 2004e40:	183ee83a 	callr	r3
 2004e44:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2004e48:	e0bfff17 	ldw	r2,-4(fp)
 2004e4c:	1000031e 	bne	r2,zero,2004e5c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 2004e50:	e13ffd17 	ldw	r4,-12(fp)
 2004e54:	2004d200 	call	2004d20 <alt_alarm_stop>
 2004e58:	00000d06 	br	2004e90 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 2004e5c:	e0bffd17 	ldw	r2,-12(fp)
 2004e60:	10c00217 	ldw	r3,8(r2)
 2004e64:	e0bfff17 	ldw	r2,-4(fp)
 2004e68:	1887883a 	add	r3,r3,r2
 2004e6c:	e0bffd17 	ldw	r2,-12(fp)
 2004e70:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2004e74:	e0bffd17 	ldw	r2,-12(fp)
 2004e78:	10c00217 	ldw	r3,8(r2)
 2004e7c:	d0a6aa17 	ldw	r2,-25944(gp)
 2004e80:	1880032e 	bgeu	r3,r2,2004e90 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 2004e84:	e0bffd17 	ldw	r2,-12(fp)
 2004e88:	00c00044 	movi	r3,1
 2004e8c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 2004e90:	e0bffe17 	ldw	r2,-8(fp)
 2004e94:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2004e98:	e0fffd17 	ldw	r3,-12(fp)
 2004e9c:	d0a00c04 	addi	r2,gp,-32720
 2004ea0:	18bfcf1e 	bne	r3,r2,2004de0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 2004ea4:	0001883a 	nop
}
 2004ea8:	e037883a 	mov	sp,fp
 2004eac:	dfc00117 	ldw	ra,4(sp)
 2004eb0:	df000017 	ldw	fp,0(sp)
 2004eb4:	dec00204 	addi	sp,sp,8
 2004eb8:	f800283a 	ret

02004ebc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 2004ebc:	deffff04 	addi	sp,sp,-4
 2004ec0:	df000015 	stw	fp,0(sp)
 2004ec4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2004ec8:	000170fa 	wrctl	ienable,zero
}
 2004ecc:	e037883a 	mov	sp,fp
 2004ed0:	df000017 	ldw	fp,0(sp)
 2004ed4:	dec00104 	addi	sp,sp,4
 2004ed8:	f800283a 	ret

02004edc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2004edc:	defffa04 	addi	sp,sp,-24
 2004ee0:	dfc00515 	stw	ra,20(sp)
 2004ee4:	df000415 	stw	fp,16(sp)
 2004ee8:	df000404 	addi	fp,sp,16
 2004eec:	e13ffe15 	stw	r4,-8(fp)
 2004ef0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2004ef4:	e0bfff17 	ldw	r2,-4(fp)
 2004ef8:	10800017 	ldw	r2,0(r2)
 2004efc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2004f00:	e13ffe17 	ldw	r4,-8(fp)
 2004f04:	20003d00 	call	20003d0 <strlen>
 2004f08:	10800044 	addi	r2,r2,1
 2004f0c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2004f10:	00000d06 	br	2004f48 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2004f14:	e0bffc17 	ldw	r2,-16(fp)
 2004f18:	10c00217 	ldw	r3,8(r2)
 2004f1c:	e0bffd17 	ldw	r2,-12(fp)
 2004f20:	1809883a 	mov	r4,r3
 2004f24:	e17ffe17 	ldw	r5,-8(fp)
 2004f28:	100d883a 	mov	r6,r2
 2004f2c:	20051a00 	call	20051a0 <memcmp>
 2004f30:	1000021e 	bne	r2,zero,2004f3c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2004f34:	e0bffc17 	ldw	r2,-16(fp)
 2004f38:	00000706 	br	2004f58 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2004f3c:	e0bffc17 	ldw	r2,-16(fp)
 2004f40:	10800017 	ldw	r2,0(r2)
 2004f44:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2004f48:	e0fffc17 	ldw	r3,-16(fp)
 2004f4c:	e0bfff17 	ldw	r2,-4(fp)
 2004f50:	18bff01e 	bne	r3,r2,2004f14 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2004f54:	0005883a 	mov	r2,zero
}
 2004f58:	e037883a 	mov	sp,fp
 2004f5c:	dfc00117 	ldw	ra,4(sp)
 2004f60:	df000017 	ldw	fp,0(sp)
 2004f64:	dec00204 	addi	sp,sp,8
 2004f68:	f800283a 	ret

02004f6c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2004f6c:	defffb04 	addi	sp,sp,-20
 2004f70:	dfc00415 	stw	ra,16(sp)
 2004f74:	df000315 	stw	fp,12(sp)
 2004f78:	df000304 	addi	fp,sp,12
 2004f7c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2004f80:	00808034 	movhi	r2,512
 2004f84:	109be404 	addi	r2,r2,28560
 2004f88:	10800017 	ldw	r2,0(r2)
 2004f8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2004f90:	00003106 	br	2005058 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 2004f94:	e0bffd17 	ldw	r2,-12(fp)
 2004f98:	10800217 	ldw	r2,8(r2)
 2004f9c:	1009883a 	mov	r4,r2
 2004fa0:	20003d00 	call	20003d0 <strlen>
 2004fa4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 2004fa8:	e0bffd17 	ldw	r2,-12(fp)
 2004fac:	10c00217 	ldw	r3,8(r2)
 2004fb0:	e0bffe17 	ldw	r2,-8(fp)
 2004fb4:	10bfffc4 	addi	r2,r2,-1
 2004fb8:	1885883a 	add	r2,r3,r2
 2004fbc:	10800003 	ldbu	r2,0(r2)
 2004fc0:	10803fcc 	andi	r2,r2,255
 2004fc4:	1080201c 	xori	r2,r2,128
 2004fc8:	10bfe004 	addi	r2,r2,-128
 2004fcc:	10800bd8 	cmpnei	r2,r2,47
 2004fd0:	1000031e 	bne	r2,zero,2004fe0 <alt_find_file+0x74>
    {
      len -= 1;
 2004fd4:	e0bffe17 	ldw	r2,-8(fp)
 2004fd8:	10bfffc4 	addi	r2,r2,-1
 2004fdc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2004fe0:	e0bffe17 	ldw	r2,-8(fp)
 2004fe4:	e0ffff17 	ldw	r3,-4(fp)
 2004fe8:	1885883a 	add	r2,r3,r2
 2004fec:	10800003 	ldbu	r2,0(r2)
 2004ff0:	10803fcc 	andi	r2,r2,255
 2004ff4:	1080201c 	xori	r2,r2,128
 2004ff8:	10bfe004 	addi	r2,r2,-128
 2004ffc:	10800be0 	cmpeqi	r2,r2,47
 2005000:	1000081e 	bne	r2,zero,2005024 <alt_find_file+0xb8>
 2005004:	e0bffe17 	ldw	r2,-8(fp)
 2005008:	e0ffff17 	ldw	r3,-4(fp)
 200500c:	1885883a 	add	r2,r3,r2
 2005010:	10800003 	ldbu	r2,0(r2)
 2005014:	10803fcc 	andi	r2,r2,255
 2005018:	1080201c 	xori	r2,r2,128
 200501c:	10bfe004 	addi	r2,r2,-128
 2005020:	10000a1e 	bne	r2,zero,200504c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 2005024:	e0bffd17 	ldw	r2,-12(fp)
 2005028:	10c00217 	ldw	r3,8(r2)
 200502c:	e0bffe17 	ldw	r2,-8(fp)
 2005030:	1809883a 	mov	r4,r3
 2005034:	e17fff17 	ldw	r5,-4(fp)
 2005038:	100d883a 	mov	r6,r2
 200503c:	20051a00 	call	20051a0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2005040:	1000021e 	bne	r2,zero,200504c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2005044:	e0bffd17 	ldw	r2,-12(fp)
 2005048:	00000806 	br	200506c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 200504c:	e0bffd17 	ldw	r2,-12(fp)
 2005050:	10800017 	ldw	r2,0(r2)
 2005054:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2005058:	e0fffd17 	ldw	r3,-12(fp)
 200505c:	00808034 	movhi	r2,512
 2005060:	109be404 	addi	r2,r2,28560
 2005064:	18bfcb1e 	bne	r3,r2,2004f94 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2005068:	0005883a 	mov	r2,zero
}
 200506c:	e037883a 	mov	sp,fp
 2005070:	dfc00117 	ldw	ra,4(sp)
 2005074:	df000017 	ldw	fp,0(sp)
 2005078:	dec00204 	addi	sp,sp,8
 200507c:	f800283a 	ret

02005080 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2005080:	defffa04 	addi	sp,sp,-24
 2005084:	dfc00515 	stw	ra,20(sp)
 2005088:	df000415 	stw	fp,16(sp)
 200508c:	dc000315 	stw	r16,12(sp)
 2005090:	df000304 	addi	fp,sp,12
 2005094:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 2005098:	00bffa04 	movi	r2,-24
 200509c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 20050a0:	e03ffd15 	stw	zero,-12(fp)
 20050a4:	00002106 	br	200512c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 20050a8:	04008034 	movhi	r16,512
 20050ac:	84176804 	addi	r16,r16,23968
 20050b0:	e0bffd17 	ldw	r2,-12(fp)
 20050b4:	1009883a 	mov	r4,r2
 20050b8:	01400304 	movi	r5,12
 20050bc:	2002e540 	call	2002e54 <__mulsi3>
 20050c0:	8085883a 	add	r2,r16,r2
 20050c4:	10800017 	ldw	r2,0(r2)
 20050c8:	1000151e 	bne	r2,zero,2005120 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 20050cc:	04008034 	movhi	r16,512
 20050d0:	84176804 	addi	r16,r16,23968
 20050d4:	e0bffd17 	ldw	r2,-12(fp)
 20050d8:	1009883a 	mov	r4,r2
 20050dc:	01400304 	movi	r5,12
 20050e0:	2002e540 	call	2002e54 <__mulsi3>
 20050e4:	8085883a 	add	r2,r16,r2
 20050e8:	e0ffff17 	ldw	r3,-4(fp)
 20050ec:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 20050f0:	00808034 	movhi	r2,512
 20050f4:	109be804 	addi	r2,r2,28576
 20050f8:	10c00017 	ldw	r3,0(r2)
 20050fc:	e0bffd17 	ldw	r2,-12(fp)
 2005100:	1880040e 	bge	r3,r2,2005114 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 2005104:	00808034 	movhi	r2,512
 2005108:	109be804 	addi	r2,r2,28576
 200510c:	e0fffd17 	ldw	r3,-12(fp)
 2005110:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 2005114:	e0bffd17 	ldw	r2,-12(fp)
 2005118:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 200511c:	00000606 	br	2005138 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2005120:	e0bffd17 	ldw	r2,-12(fp)
 2005124:	10800044 	addi	r2,r2,1
 2005128:	e0bffd15 	stw	r2,-12(fp)
 200512c:	e0bffd17 	ldw	r2,-12(fp)
 2005130:	10800810 	cmplti	r2,r2,32
 2005134:	103fdc1e 	bne	r2,zero,20050a8 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 2005138:	e0bffe17 	ldw	r2,-8(fp)
}
 200513c:	e037883a 	mov	sp,fp
 2005140:	dfc00217 	ldw	ra,8(sp)
 2005144:	df000117 	ldw	fp,4(sp)
 2005148:	dc000017 	ldw	r16,0(sp)
 200514c:	dec00304 	addi	sp,sp,12
 2005150:	f800283a 	ret

02005154 <atexit>:
 2005154:	200b883a 	mov	r5,r4
 2005158:	000d883a 	mov	r6,zero
 200515c:	0009883a 	mov	r4,zero
 2005160:	000f883a 	mov	r7,zero
 2005164:	200521c1 	jmpi	200521c <__register_exitproc>

02005168 <exit>:
 2005168:	defffe04 	addi	sp,sp,-8
 200516c:	000b883a 	mov	r5,zero
 2005170:	dc000015 	stw	r16,0(sp)
 2005174:	dfc00115 	stw	ra,4(sp)
 2005178:	2021883a 	mov	r16,r4
 200517c:	200534c0 	call	200534c <__call_exitprocs>
 2005180:	00808034 	movhi	r2,512
 2005184:	109be004 	addi	r2,r2,28544
 2005188:	11000017 	ldw	r4,0(r2)
 200518c:	20800f17 	ldw	r2,60(r4)
 2005190:	10000126 	beq	r2,zero,2005198 <exit+0x30>
 2005194:	103ee83a 	callr	r2
 2005198:	8009883a 	mov	r4,r16
 200519c:	20054ec0 	call	20054ec <_exit>

020051a0 <memcmp>:
 20051a0:	01c000c4 	movi	r7,3
 20051a4:	3980192e 	bgeu	r7,r6,200520c <memcmp+0x6c>
 20051a8:	2904b03a 	or	r2,r5,r4
 20051ac:	11c4703a 	and	r2,r2,r7
 20051b0:	10000f26 	beq	r2,zero,20051f0 <memcmp+0x50>
 20051b4:	20c00003 	ldbu	r3,0(r4)
 20051b8:	28800003 	ldbu	r2,0(r5)
 20051bc:	1880151e 	bne	r3,r2,2005214 <memcmp+0x74>
 20051c0:	31bfff84 	addi	r6,r6,-2
 20051c4:	01ffffc4 	movi	r7,-1
 20051c8:	00000406 	br	20051dc <memcmp+0x3c>
 20051cc:	20c00003 	ldbu	r3,0(r4)
 20051d0:	28800003 	ldbu	r2,0(r5)
 20051d4:	31bfffc4 	addi	r6,r6,-1
 20051d8:	18800e1e 	bne	r3,r2,2005214 <memcmp+0x74>
 20051dc:	21000044 	addi	r4,r4,1
 20051e0:	29400044 	addi	r5,r5,1
 20051e4:	31fff91e 	bne	r6,r7,20051cc <memcmp+0x2c>
 20051e8:	0005883a 	mov	r2,zero
 20051ec:	f800283a 	ret
 20051f0:	20c00017 	ldw	r3,0(r4)
 20051f4:	28800017 	ldw	r2,0(r5)
 20051f8:	1880041e 	bne	r3,r2,200520c <memcmp+0x6c>
 20051fc:	31bfff04 	addi	r6,r6,-4
 2005200:	21000104 	addi	r4,r4,4
 2005204:	29400104 	addi	r5,r5,4
 2005208:	39bff936 	bltu	r7,r6,20051f0 <memcmp+0x50>
 200520c:	303fe91e 	bne	r6,zero,20051b4 <memcmp+0x14>
 2005210:	003ff506 	br	20051e8 <memcmp+0x48>
 2005214:	1885c83a 	sub	r2,r3,r2
 2005218:	f800283a 	ret

0200521c <__register_exitproc>:
 200521c:	defffa04 	addi	sp,sp,-24
 2005220:	00808034 	movhi	r2,512
 2005224:	109be004 	addi	r2,r2,28544
 2005228:	dc000315 	stw	r16,12(sp)
 200522c:	14000017 	ldw	r16,0(r2)
 2005230:	dc400415 	stw	r17,16(sp)
 2005234:	dfc00515 	stw	ra,20(sp)
 2005238:	80805217 	ldw	r2,328(r16)
 200523c:	2023883a 	mov	r17,r4
 2005240:	10003e26 	beq	r2,zero,200533c <__register_exitproc+0x120>
 2005244:	10c00117 	ldw	r3,4(r2)
 2005248:	020007c4 	movi	r8,31
 200524c:	40c0180e 	bge	r8,r3,20052b0 <__register_exitproc+0x94>
 2005250:	00800034 	movhi	r2,0
 2005254:	10800004 	addi	r2,r2,0
 2005258:	1000061e 	bne	r2,zero,2005274 <__register_exitproc+0x58>
 200525c:	00bfffc4 	movi	r2,-1
 2005260:	dfc00517 	ldw	ra,20(sp)
 2005264:	dc400417 	ldw	r17,16(sp)
 2005268:	dc000317 	ldw	r16,12(sp)
 200526c:	dec00604 	addi	sp,sp,24
 2005270:	f800283a 	ret
 2005274:	01006404 	movi	r4,400
 2005278:	d9400015 	stw	r5,0(sp)
 200527c:	d9800115 	stw	r6,4(sp)
 2005280:	d9c00215 	stw	r7,8(sp)
 2005284:	00000000 	call	0 <__reset-0x2000000>
 2005288:	d9400017 	ldw	r5,0(sp)
 200528c:	d9800117 	ldw	r6,4(sp)
 2005290:	d9c00217 	ldw	r7,8(sp)
 2005294:	103ff126 	beq	r2,zero,200525c <__register_exitproc+0x40>
 2005298:	80c05217 	ldw	r3,328(r16)
 200529c:	10000115 	stw	zero,4(r2)
 20052a0:	10c00015 	stw	r3,0(r2)
 20052a4:	80805215 	stw	r2,328(r16)
 20052a8:	10006215 	stw	zero,392(r2)
 20052ac:	10006315 	stw	zero,396(r2)
 20052b0:	10c00117 	ldw	r3,4(r2)
 20052b4:	88000d1e 	bne	r17,zero,20052ec <__register_exitproc+0xd0>
 20052b8:	19000084 	addi	r4,r3,2
 20052bc:	2109883a 	add	r4,r4,r4
 20052c0:	18c00044 	addi	r3,r3,1
 20052c4:	2109883a 	add	r4,r4,r4
 20052c8:	1109883a 	add	r4,r2,r4
 20052cc:	10c00115 	stw	r3,4(r2)
 20052d0:	0005883a 	mov	r2,zero
 20052d4:	21400015 	stw	r5,0(r4)
 20052d8:	dfc00517 	ldw	ra,20(sp)
 20052dc:	dc400417 	ldw	r17,16(sp)
 20052e0:	dc000317 	ldw	r16,12(sp)
 20052e4:	dec00604 	addi	sp,sp,24
 20052e8:	f800283a 	ret
 20052ec:	02400044 	movi	r9,1
 20052f0:	12806217 	ldw	r10,392(r2)
 20052f4:	48d2983a 	sll	r9,r9,r3
 20052f8:	19000804 	addi	r4,r3,32
 20052fc:	18d1883a 	add	r8,r3,r3
 2005300:	2109883a 	add	r4,r4,r4
 2005304:	4211883a 	add	r8,r8,r8
 2005308:	2109883a 	add	r4,r4,r4
 200530c:	1109883a 	add	r4,r2,r4
 2005310:	1211883a 	add	r8,r2,r8
 2005314:	5254b03a 	or	r10,r10,r9
 2005318:	21c02215 	stw	r7,136(r4)
 200531c:	41802215 	stw	r6,136(r8)
 2005320:	12806215 	stw	r10,392(r2)
 2005324:	01000084 	movi	r4,2
 2005328:	893fe31e 	bne	r17,r4,20052b8 <__register_exitproc+0x9c>
 200532c:	11006317 	ldw	r4,396(r2)
 2005330:	2252b03a 	or	r9,r4,r9
 2005334:	12406315 	stw	r9,396(r2)
 2005338:	003fdf06 	br	20052b8 <__register_exitproc+0x9c>
 200533c:	00808074 	movhi	r2,513
 2005340:	10a2d504 	addi	r2,r2,-29868
 2005344:	80805215 	stw	r2,328(r16)
 2005348:	003fbe06 	br	2005244 <__register_exitproc+0x28>

0200534c <__call_exitprocs>:
 200534c:	00808034 	movhi	r2,512
 2005350:	109be004 	addi	r2,r2,28544
 2005354:	10800017 	ldw	r2,0(r2)
 2005358:	defff304 	addi	sp,sp,-52
 200535c:	df000b15 	stw	fp,44(sp)
 2005360:	d8800015 	stw	r2,0(sp)
 2005364:	10805204 	addi	r2,r2,328
 2005368:	dd400815 	stw	r21,32(sp)
 200536c:	dfc00c15 	stw	ra,48(sp)
 2005370:	ddc00a15 	stw	r23,40(sp)
 2005374:	dd800915 	stw	r22,36(sp)
 2005378:	dd000715 	stw	r20,28(sp)
 200537c:	dcc00615 	stw	r19,24(sp)
 2005380:	dc800515 	stw	r18,20(sp)
 2005384:	dc400415 	stw	r17,16(sp)
 2005388:	dc000315 	stw	r16,12(sp)
 200538c:	d9000115 	stw	r4,4(sp)
 2005390:	2839883a 	mov	fp,r5
 2005394:	d8800215 	stw	r2,8(sp)
 2005398:	057fffc4 	movi	r21,-1
 200539c:	d8800017 	ldw	r2,0(sp)
 20053a0:	ddc00217 	ldw	r23,8(sp)
 20053a4:	14805217 	ldw	r18,328(r2)
 20053a8:	90001726 	beq	r18,zero,2005408 <__call_exitprocs+0xbc>
 20053ac:	94400117 	ldw	r17,4(r18)
 20053b0:	8c3fffc4 	addi	r16,r17,-1
 20053b4:	80001116 	blt	r16,zero,20053fc <__call_exitprocs+0xb0>
 20053b8:	8c400044 	addi	r17,r17,1
 20053bc:	8427883a 	add	r19,r16,r16
 20053c0:	8c63883a 	add	r17,r17,r17
 20053c4:	95802204 	addi	r22,r18,136
 20053c8:	9ce7883a 	add	r19,r19,r19
 20053cc:	8c63883a 	add	r17,r17,r17
 20053d0:	b4e7883a 	add	r19,r22,r19
 20053d4:	9463883a 	add	r17,r18,r17
 20053d8:	e0001726 	beq	fp,zero,2005438 <__call_exitprocs+0xec>
 20053dc:	8c87c83a 	sub	r3,r17,r18
 20053e0:	b0c7883a 	add	r3,r22,r3
 20053e4:	18c01e17 	ldw	r3,120(r3)
 20053e8:	1f001326 	beq	r3,fp,2005438 <__call_exitprocs+0xec>
 20053ec:	843fffc4 	addi	r16,r16,-1
 20053f0:	9cffff04 	addi	r19,r19,-4
 20053f4:	8c7fff04 	addi	r17,r17,-4
 20053f8:	857ff71e 	bne	r16,r21,20053d8 <__call_exitprocs+0x8c>
 20053fc:	00800034 	movhi	r2,0
 2005400:	10800004 	addi	r2,r2,0
 2005404:	10002a1e 	bne	r2,zero,20054b0 <__call_exitprocs+0x164>
 2005408:	dfc00c17 	ldw	ra,48(sp)
 200540c:	df000b17 	ldw	fp,44(sp)
 2005410:	ddc00a17 	ldw	r23,40(sp)
 2005414:	dd800917 	ldw	r22,36(sp)
 2005418:	dd400817 	ldw	r21,32(sp)
 200541c:	dd000717 	ldw	r20,28(sp)
 2005420:	dcc00617 	ldw	r19,24(sp)
 2005424:	dc800517 	ldw	r18,20(sp)
 2005428:	dc400417 	ldw	r17,16(sp)
 200542c:	dc000317 	ldw	r16,12(sp)
 2005430:	dec00d04 	addi	sp,sp,52
 2005434:	f800283a 	ret
 2005438:	91000117 	ldw	r4,4(r18)
 200543c:	88c00017 	ldw	r3,0(r17)
 2005440:	213fffc4 	addi	r4,r4,-1
 2005444:	24001526 	beq	r4,r16,200549c <__call_exitprocs+0x150>
 2005448:	88000015 	stw	zero,0(r17)
 200544c:	183fe726 	beq	r3,zero,20053ec <__call_exitprocs+0xa0>
 2005450:	00800044 	movi	r2,1
 2005454:	1408983a 	sll	r4,r2,r16
 2005458:	91406217 	ldw	r5,392(r18)
 200545c:	95000117 	ldw	r20,4(r18)
 2005460:	214a703a 	and	r5,r4,r5
 2005464:	28000b26 	beq	r5,zero,2005494 <__call_exitprocs+0x148>
 2005468:	91406317 	ldw	r5,396(r18)
 200546c:	2148703a 	and	r4,r4,r5
 2005470:	20000c1e 	bne	r4,zero,20054a4 <__call_exitprocs+0x158>
 2005474:	99400017 	ldw	r5,0(r19)
 2005478:	d9000117 	ldw	r4,4(sp)
 200547c:	183ee83a 	callr	r3
 2005480:	90c00117 	ldw	r3,4(r18)
 2005484:	1d3fc51e 	bne	r3,r20,200539c <__call_exitprocs+0x50>
 2005488:	b8c00017 	ldw	r3,0(r23)
 200548c:	1cbfd726 	beq	r3,r18,20053ec <__call_exitprocs+0xa0>
 2005490:	003fc206 	br	200539c <__call_exitprocs+0x50>
 2005494:	183ee83a 	callr	r3
 2005498:	003ff906 	br	2005480 <__call_exitprocs+0x134>
 200549c:	94000115 	stw	r16,4(r18)
 20054a0:	003fea06 	br	200544c <__call_exitprocs+0x100>
 20054a4:	99000017 	ldw	r4,0(r19)
 20054a8:	183ee83a 	callr	r3
 20054ac:	003ff406 	br	2005480 <__call_exitprocs+0x134>
 20054b0:	90c00117 	ldw	r3,4(r18)
 20054b4:	1800071e 	bne	r3,zero,20054d4 <__call_exitprocs+0x188>
 20054b8:	90c00017 	ldw	r3,0(r18)
 20054bc:	18000926 	beq	r3,zero,20054e4 <__call_exitprocs+0x198>
 20054c0:	9009883a 	mov	r4,r18
 20054c4:	b8c00015 	stw	r3,0(r23)
 20054c8:	00000000 	call	0 <__reset-0x2000000>
 20054cc:	bc800017 	ldw	r18,0(r23)
 20054d0:	003fb506 	br	20053a8 <__call_exitprocs+0x5c>
 20054d4:	90c00017 	ldw	r3,0(r18)
 20054d8:	902f883a 	mov	r23,r18
 20054dc:	1825883a 	mov	r18,r3
 20054e0:	003fb106 	br	20053a8 <__call_exitprocs+0x5c>
 20054e4:	0007883a 	mov	r3,zero
 20054e8:	003ffb06 	br	20054d8 <__call_exitprocs+0x18c>

020054ec <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 20054ec:	defffc04 	addi	sp,sp,-16
 20054f0:	df000315 	stw	fp,12(sp)
 20054f4:	df000304 	addi	fp,sp,12
 20054f8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 20054fc:	0001883a 	nop
 2005500:	e0bfff17 	ldw	r2,-4(fp)
 2005504:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 2005508:	e0bffd17 	ldw	r2,-12(fp)
 200550c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2005510:	e0bffe17 	ldw	r2,-8(fp)
 2005514:	10000226 	beq	r2,zero,2005520 <_exit+0x34>
    ALT_SIM_FAIL();
 2005518:	002af070 	cmpltui	zero,zero,43969
 200551c:	00000106 	br	2005524 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 2005520:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2005524:	003fff06 	br	2005524 <_exit+0x38>

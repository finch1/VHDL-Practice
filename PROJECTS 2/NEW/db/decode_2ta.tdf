--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone III" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 13.1 cbx_cycloneii 2013:10:24:09:15:20:SJ cbx_lpm_add_sub 2013:10:24:09:15:20:SJ cbx_lpm_compare 2013:10:24:09:15:20:SJ cbx_lpm_decode 2013:10:24:09:15:20:SJ cbx_mgl 2013:10:24:09:16:30:SJ cbx_stratix 2013:10:24:09:15:20:SJ cbx_stratixii 2013:10:24:09:15:20:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_2ta
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode2783w[1..0]	: WIRE;
	w_anode2792w[3..0]	: WIRE;
	w_anode2809w[3..0]	: WIRE;
	w_anode2819w[3..0]	: WIRE;
	w_anode2829w[3..0]	: WIRE;
	w_anode2839w[3..0]	: WIRE;
	w_anode2849w[3..0]	: WIRE;
	w_anode2859w[3..0]	: WIRE;
	w_anode2869w[3..0]	: WIRE;
	w_anode2881w[1..0]	: WIRE;
	w_anode2888w[3..0]	: WIRE;
	w_anode2899w[3..0]	: WIRE;
	w_anode2909w[3..0]	: WIRE;
	w_anode2919w[3..0]	: WIRE;
	w_anode2929w[3..0]	: WIRE;
	w_anode2939w[3..0]	: WIRE;
	w_anode2949w[3..0]	: WIRE;
	w_anode2959w[3..0]	: WIRE;
	w_data2781w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode2959w[3..3], w_anode2949w[3..3], w_anode2939w[3..3], w_anode2929w[3..3], w_anode2919w[3..3], w_anode2909w[3..3], w_anode2899w[3..3], w_anode2888w[3..3]), ( w_anode2869w[3..3], w_anode2859w[3..3], w_anode2849w[3..3], w_anode2839w[3..3], w_anode2829w[3..3], w_anode2819w[3..3], w_anode2809w[3..3], w_anode2792w[3..3]));
	w_anode2783w[] = ( (w_anode2783w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode2792w[] = ( (w_anode2792w[2..2] & (! w_data2781w[2..2])), (w_anode2792w[1..1] & (! w_data2781w[1..1])), (w_anode2792w[0..0] & (! w_data2781w[0..0])), w_anode2783w[1..1]);
	w_anode2809w[] = ( (w_anode2809w[2..2] & (! w_data2781w[2..2])), (w_anode2809w[1..1] & (! w_data2781w[1..1])), (w_anode2809w[0..0] & w_data2781w[0..0]), w_anode2783w[1..1]);
	w_anode2819w[] = ( (w_anode2819w[2..2] & (! w_data2781w[2..2])), (w_anode2819w[1..1] & w_data2781w[1..1]), (w_anode2819w[0..0] & (! w_data2781w[0..0])), w_anode2783w[1..1]);
	w_anode2829w[] = ( (w_anode2829w[2..2] & (! w_data2781w[2..2])), (w_anode2829w[1..1] & w_data2781w[1..1]), (w_anode2829w[0..0] & w_data2781w[0..0]), w_anode2783w[1..1]);
	w_anode2839w[] = ( (w_anode2839w[2..2] & w_data2781w[2..2]), (w_anode2839w[1..1] & (! w_data2781w[1..1])), (w_anode2839w[0..0] & (! w_data2781w[0..0])), w_anode2783w[1..1]);
	w_anode2849w[] = ( (w_anode2849w[2..2] & w_data2781w[2..2]), (w_anode2849w[1..1] & (! w_data2781w[1..1])), (w_anode2849w[0..0] & w_data2781w[0..0]), w_anode2783w[1..1]);
	w_anode2859w[] = ( (w_anode2859w[2..2] & w_data2781w[2..2]), (w_anode2859w[1..1] & w_data2781w[1..1]), (w_anode2859w[0..0] & (! w_data2781w[0..0])), w_anode2783w[1..1]);
	w_anode2869w[] = ( (w_anode2869w[2..2] & w_data2781w[2..2]), (w_anode2869w[1..1] & w_data2781w[1..1]), (w_anode2869w[0..0] & w_data2781w[0..0]), w_anode2783w[1..1]);
	w_anode2881w[] = ( (w_anode2881w[0..0] & data_wire[3..3]), enable_wire);
	w_anode2888w[] = ( (w_anode2888w[2..2] & (! w_data2781w[2..2])), (w_anode2888w[1..1] & (! w_data2781w[1..1])), (w_anode2888w[0..0] & (! w_data2781w[0..0])), w_anode2881w[1..1]);
	w_anode2899w[] = ( (w_anode2899w[2..2] & (! w_data2781w[2..2])), (w_anode2899w[1..1] & (! w_data2781w[1..1])), (w_anode2899w[0..0] & w_data2781w[0..0]), w_anode2881w[1..1]);
	w_anode2909w[] = ( (w_anode2909w[2..2] & (! w_data2781w[2..2])), (w_anode2909w[1..1] & w_data2781w[1..1]), (w_anode2909w[0..0] & (! w_data2781w[0..0])), w_anode2881w[1..1]);
	w_anode2919w[] = ( (w_anode2919w[2..2] & (! w_data2781w[2..2])), (w_anode2919w[1..1] & w_data2781w[1..1]), (w_anode2919w[0..0] & w_data2781w[0..0]), w_anode2881w[1..1]);
	w_anode2929w[] = ( (w_anode2929w[2..2] & w_data2781w[2..2]), (w_anode2929w[1..1] & (! w_data2781w[1..1])), (w_anode2929w[0..0] & (! w_data2781w[0..0])), w_anode2881w[1..1]);
	w_anode2939w[] = ( (w_anode2939w[2..2] & w_data2781w[2..2]), (w_anode2939w[1..1] & (! w_data2781w[1..1])), (w_anode2939w[0..0] & w_data2781w[0..0]), w_anode2881w[1..1]);
	w_anode2949w[] = ( (w_anode2949w[2..2] & w_data2781w[2..2]), (w_anode2949w[1..1] & w_data2781w[1..1]), (w_anode2949w[0..0] & (! w_data2781w[0..0])), w_anode2881w[1..1]);
	w_anode2959w[] = ( (w_anode2959w[2..2] & w_data2781w[2..2]), (w_anode2959w[1..1] & w_data2781w[1..1]), (w_anode2959w[0..0] & w_data2781w[0..0]), w_anode2881w[1..1]);
	w_data2781w[2..0] = data_wire[2..0];
END;
--VALID FILE
